'copyright (C) Kroc Camen 2018, BSD 2-clause
'games.bm : functions for managing game definitions

'   Games_EnumerateINI(ini_file$)
'   Games_Add(...)
'   Games_Select(game%)

'given an INI file, read game definitions from it
'=============================================================================
SUB Games_EnumerateINI (ini_file$)
    DIM path$
    LET path$ = ini_file$
    
    'is the given path absolute?
    IF Paths_IsAbsolute(path$) THEN
        'does the file exist?
        IF _FILEEXISTS(path$) THEN GOTO readINI
    ELSE
        'search for the file:
        
        'check the 'current' directory
        '-- i.e. the directory the launcher was called *from*
        LET path$ = DIR_CUR$ + ini_file$
        IF _FILEEXISTS(path$) THEN GOTO readINI
        
        'check the base WADs directory
        LET path$ = DIR_WADS$ + ini_file$
        IF _FILEEXISTS(path$) THEN GOTO readINI
    END IF
    
    CALL ErrorFileNotFound(ini_file$)
    SYSTEM 1
    
readINI:
    '-------------------------------------------------------------------------
    'do additional file searching from the INI file's path
    LET DIR_INI$ = Paths_AddSlash$(Paths_GetPath$(path$))
    
    'read the game title and blurb
    DIM ini_title$
    LET ini_title$ = ReadIniUTF8$(path$, "games", "title")
    DIM ini_blurb$
    LET ini_blurb$ = ReadIniUTF8$(path$, "games", "blurb")
    
    'for now we limit game definitions to 9 since we can not provide
    'a user-scrollable area and it also simplifies the keyboard check
    DIM ini_index
    FOR ini_index = 1 TO 9
        'read from the list of game-configurations defined
        '(a single INI can define more than one game variation)
        DIM game_id$
        LET game_id$ = ReadIniUTF8$(path$, "games", STRINT$(ini_index))
        'if there's no further entries, stop looking
        IF game_id$ = "" THEN
            'if this is still the first check,
            'then no games are defined!
            IF ini_index = 1 THEN
                CALL ErrorScreen("ERROR: Invalid INI Definition")
                PRINT " No games defined in the INI file:"
                PRINT " " + CHR$(34) _
                    + RTRUNCATE$(path$, UI_SCREEN_WIDTH - 2) _
                    + CHR$(34)
                PRINT ""
                PRINTWRAP_X 2, UI_SCREEN_WIDTH - 2, _
                    "At least one game must be defined in the " _
                  + "`[games]` section. A game is defined with " _
                  + "a field number and then an ID for that game."
                PRINT ""
                PRINT " Example:"
                PRINT ""
                PRINT "     [games]"
                PRINT "     1=doom"
                CALL ErrorExit: SYSTEM 1
            END IF
            EXIT FOR
        END IF
        
        'read in the game details:
        DIM ini_section$
        LET ini_section$ = "games." + game_id$
        
        'since an IWAD *must* be defined, we also use this
        'as a check to see if the section exists
        DIM ini_iwad$
        LET ini_iwad$ = ReadIniUTF8$("", ini_section$, "iwad")
        IF ini_iwad$ = "" THEN
            CALL ErrorScreen("ERROR: Invalid INI Definition")
            PRINT " IWAD field (or game section) missing, " _
                + "in INI file:"
            PRINT " " + CHR$(34) _
               + RTRUNCATE$(path$, UI_SCREEN_WIDTH - 2) + CHR$(34)
            PRINT ""
            PRINTWRAP_X 2, UI_SCREEN_WIDTH - 2, _
                "An `iwad` field is required for a game definition. " _
              + " This error can also occur if the game's section " _
              + "cannot be found. For each local game-id given, " _
              + "a `[games.id]` section must also be given, " _
              + "for example:"
            PRINT ""
            PRINT "     [games]"
            PRINT "     1=doom"
            PRINT ""
            PRINT "     [games.doom]"
            PRINT "     iwad=DOOM"
            CALL ErrorExit: SYSTEM 1
        END IF
        
        'the game-choice name is used as a title when selected,
        'if missing, we default to the overall game title
        DIM ini_name$
        LET ini_name$ = ReadIniUTF8$("", ini_section$, "name")
        'the choice text. this is used to be able to provide
        'a selection screen with the available choices
        DIM ini_desc$
        LET ini_desc$ = ReadIniUTF8$("", ini_section$, "desc")
        
        'game requirements:
        DIM ini_use$
        LET ini_use$ = ReadIniUTF8$("", ini_section$, "use")
        DIM ini_tags$
        LET ini_tags$ = ReadIniUTF8$("", ini_section$, "tags")
        DIM bit
        SELECT CASE ReadIniUTF8$("", ini_section$, "bit")
            CASE "32": LET bit = 32
            CASE "64": LET bit = 64
            CASE ELSE: LET bit = 0
        END SELECT
        DIM ini_cmplvl$
        LET ini_cmplvl$ = ReadIniUTF8$("", ini_section$, "cmplvl")
        
        DIM vid
        SELECT CASE ReadIniUTF8$("", ini_section$, "vid")
            CASE "8": LET vid = 8
            CASE "16": LET vid = 16
            CASE "24": LET vid = 24
            CASE "32": LET vid = 32
            CASE ELSE: LET vid = 0
        END SELECT
        
        'game files and settings:
        DIM ini_pre$
        LET ini_pre$ = ReadIniUTF8$("", ini_section$, "pre")
        DIM ini_pwad$
        LET ini_pwad$ = ReadIniUTF8$("", ini_section$, "pwad")
        DIM ini_files$
        LET ini_files$ = ReadIniUTF8$("", ini_section$, "files")
        DIM ini_deh$
        LET ini_deh$ = ReadIniUTF8$("", ini_section$, "deh")
        DIM ini_bex$
        LET ini_bex$ = ReadIniUTF8$("", ini_section$, "bex")
        DIM ini_warp$
        LET ini_warp$ = ReadIniUTF8$("", ini_section$, "warp")
        DIM ini_skill$
        LET ini_skill$ = ReadIniUTF8$("", ini_section$, "skill")
        
        DIM ini_skill1$
        LET ini_skill1$ = ReadIniUTF8$("", ini_section$, "skill1")
        DIM ini_skill2$
        LET ini_skill2$ = ReadIniUTF8$("", ini_section$, "skill2")
        DIM ini_skill3$
        LET ini_skill3$ = ReadIniUTF8$("", ini_section$, "skill3")
        DIM ini_skill4$
        LET ini_skill4$ = ReadIniUTF8$("", ini_section$, "skill4")
        DIM ini_skill5$
        LET ini_skill5$ = ReadIniUTF8$("", ini_section$, "skill5")
        DIM ini_skill6$
        LET ini_skill6$ = ReadIniUTF8$("", ini_section$, "skill6")
        DIM ini_skill7$
        LET ini_skill7$ = ReadIniUTF8$("", ini_section$, "skill7")
        DIM ini_skill8$
        LET ini_skill8$ = ReadIniUTF8$("", ini_section$, "skill8")
        DIM ini_skill9$
        LET ini_skill9$ = ReadIniUTF8$("", ini_section$, "skill9")
        
        DIM ini_exec$
        LET ini_exec$ = ReadIniUTF8$("", ini_section$, "exec")
        DIM ini_cmd$
        LET ini_cmd$ = ReadIniUTF8$("", ini_section$, "cmd")
        
        CALL Games_Add( _
            game_id$, ini_title$, ini_blurb$, ini_name$, ini_desc$, _
            ini_cmplvl$, _
            ini_iwad$, ini_pre$, ini_pwad$, ini_files$, _
            ini_exec$, ini_cmd$, ini_deh$, ini_bex$, _
            ini_use$, ini_tags$, bit, vid, _
            ini_warp$, ini_skill$, _
            ini_skill1$, ini_skill2$, ini_skill3$, ini_skill4$, _
            ini_skill5$, ini_skill6$, ini_skill7$, ini_skill8$, _
            ini_skill9$ _
        )
    NEXT
    
END SUB

'=============================================================================
SUB Games_Add ( _
    id$, title$, blurb$, name$, desc$, cmplvl$, iwad$, pre$, pwad$, files$, _
    exec$, cmd$, deh$, bex$, use$, tags$, bit, vid, warp$, skill$, _
    skill1$, skill2$, skill3$, skill4$, skill5$, _
    skill6$, skill7$, skill8$, skill9$ _
)
    'increase the number of games entries
    LET Games_Count = Games_Count + 1
    REDIM _PRESERVE Games(1 TO Games_Count) AS Game
    LET Games(Games_Count).id = id$
    
    'find the IWAD meta-data entry referred to by this game
    DIM iwad%%
    LET iwad%% = IWADs_FindMeta&(iwad$)
    LET Games(Games_Count).iwad = iwad%%
    
    IF iwad%% = 0 THEN
        SELECT CASE UCASE$(Paths_GetFileBaseName$(iwad$))
            CASE "DOOM"
                LET Games(Games_Count).type = TYPE_DOOM
            CASE "CHEX"
                LET Games(Games_Count).type = TYPE_CHEX
            CASE "DOOM2", "TNT", "PLUTONIA"
                LET Games(Games_Count).type = TYPE_DOOM2
            CASE "HERETIC"
                LET Games(Games_Count).type = TYPE_HERETIC
            CASE "HEXEN"
                LET Games(Games_Count).type = TYPE_HEXEN
            CASE "STRIFE"
                LET Games(Games_Count).type = TYPE_STRIFE
            CASE "DOOM64"
                LET Games(Games_Count).type = TYPE_DOOM64
            CASE "HARM1"
                LET Games(Games_Count).type = TYPE_HARM1
            CASE "ROTWB"
                LET Games(Games_Count).type = TYPE_ROTWB
        END SELECT
    ELSE
        LET Games(Games_Count).type = IWADS(iwad%%).type
    END IF
    
    'process the tag list
    '(find any tags we haven't come across before)
    CALL Tags_Add(tags$)
    
    'set warp defaults (i.e. no warp)
    LET Games(Games_Count).warp_e = -1
    LET Games(Games_Count).warp_m = -1
        
    'warp parameter?
    IF warp$ <> "" THEN
        'if it's just a number,
        IF ISINT(warp$) THEN
            'add a warp parameter to the game
            LET Games(Games_Count).warp_m = VAL(warp$)
            GOTO skill
        END IF
        
        IF LEN(warp$) > 2 THEN
            'process warp parameter for episode / map number;
            'is there a dot in the second character? (i.e. "e.m" format)
            IF ASC(warp$, 2) = 46 THEN
                'pick the numbers
                DIM e$, m$
                LET e$ = LEFT$(warp$, 1)
                LET m$ = MID$(warp$, 3)
                'is the first part a number?
                IF ISINT(e$) THEN
                    'and the second part?
                    IF ISINT(m$) THEN
                        'add a warp parameter to the game
                        LET Games(Games_Count).warp_e = VAL(e$)
                        LET Games(Games_Count).warp_m = VAL(m$)
                        GOTO skill
                    ELSE
                        'FIXME: not a valid warp parameter?
                        SYSTEM 1
                    END IF
                ELSE
                    'FIXME: not a valid warp parameter?
                    SYSTEM 1
                END IF
            END IF
        END IF
            
        'TODO: support map-names
        SYSTEM 1
    END IF
    
skill:
    'no skill parameter?
    IF skill$ = "" THEN
        'set default
        LET Games(Games_Count).skill = -1
        
    ELSE
        IF ISINT(skill$) THEN
            'TODO: check 0-9
            LET Games(Games_Count).skill = VAL(skill$)
        ELSE
            'FIXME: error on non-number
            SYSTEM 1
        END IF
    END IF
    
    'no problems? write the data into the engine list
    LET Games(Games_Count).title = title$
    LET Games(Games_Count).blurb = blurb$
    LET Games(Games_Count).name = name$
    LET Games(Games_Count).desc = desc$
    
    IF cmplvl$ = "" THEN
        LET Games(Games_Count).cmplvl = -1
    ELSE
        LET Games(Games_Count).cmplvl = VAL(cmplvl$)
    END IF
    
    LET Games(Games_Count).pre = pre$
    LET Games(Games_Count).pwad = pwad$
    LET Games(Games_Count).files = files$
    LET Games(Games_Count).exec = exec$
    LET Games(Games_Count).cmd = cmd$
    LET Games(Games_Count).deh = deh$
    LET Games(Games_Count).bex = bex$
    LET Games(Games_Count).use = LCASE$(use$)
    LET Games(Games_Count).tags = LCASE$(tags$)
    LET Games(Games_Count).bit = bit
    LET Games(Games_Count).vid = vid
    
    LET Games(Games_Count).skill1 = skill1$
    LET Games(Games_Count).skill2 = skill2$
    LET Games(Games_Count).skill3 = skill3$
    LET Games(Games_Count).skill4 = skill4$
    LET Games(Games_Count).skill5 = skill5$
    LET Games(Games_Count).skill6 = skill6$
    LET Games(Games_Count).skill7 = skill7$
    LET Games(Games_Count).skill8 = skill8$
    LET Games(Games_Count).skill9 = skill9$
END SUB

'=============================================================================
SUB Games_Select(game%)
    LET Games_Current = game%
    LET Games_Selected = Games(Games_Current)
    
    CALL IWADs_Select(Games_Selected.iwad)
END SUB
