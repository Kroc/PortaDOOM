'copyright (C) Kroc Camen 2018, BSD 2-clause

'   Games_EnumerateINI(INIFile$)
'   Games_Add(...)
'   Games_Select(game%)

'given an INI file, read game definitions from it
'=============================================================================
SUB Games_EnumerateINI (INIFile$)
    'locate the INI file:
    '-------------------------------------------------------------------------
    DIM path$
    LET path$ = INIFile$
    
    'is the given path absolute?
    IF Paths_IsAbsolute(path$) THEN
        'does the file exist?
        IF _FILEEXISTS(path$) THEN GOTO readINI
    ELSE
        'search for the file:
        
        'check the 'current' directory
        '-- i.e. the directory the launcher was called *from*
        LET path$ = DIR_CUR$ + INIFile$
        IF _FILEEXISTS(path$) THEN GOTO readINI
        
        'check the base WADs directory
        LET path$ = DIR_WADS$ + INIFile$
        IF _FILEEXISTS(path$) THEN GOTO readINI
    END IF
    
    'FIXME: file not found!
    ERROR 100
    
readINI:
    '-------------------------------------------------------------------------
    DO
        'read from the list of game-configurations defined
        '(a single INI can define more than one game variation)
        DIM game_id$
        LET game_id$ = ReadSetting$(path$, "games", STRINT$(Games_Count + 1))
        'if there's no further entries, stop looking
        IF game_id$ = "" THEN EXIT DO
        
        'read in the game details:
        'TODO: validation
        'TODO: early rejection of engines incompatible with all game defs,
        '      e.g. 64-bit engine on a 32-bit CPU
        DIM ini_section$
        LET ini_section$ = "games." + game_id$
        
        DIM ini_title$
        LET ini_title$ = ReadSetting$("", ini_section$, "title")
        DIM ini_desc$
        LET ini_desc$ = ReadSetting$("", ini_section$, "desc")
        DIM ini_cmplvl$
        LET ini_cmplvl$ = ReadSetting$("", ini_section$, "cmplvl")
        DIM ini_iwad$
        LET ini_iwad$ = ReadSetting$("", ini_section$, "iwad")
        DIM ini_pre$
        LET ini_pre$ = ReadSetting$("", ini_section$, "pre")
        DIM ini_pwad$
        LET ini_pwad$ = ReadSetting$("", ini_section$, "pwad")
        DIM ini_files$
        LET ini_files$ = ReadSetting$("", ini_section$, "files")
        DIM ini_deh$
        LET ini_deh$ = ReadSetting$("", ini_section$, "deh")
        DIM ini_bex$
        LET ini_bex$ = ReadSetting$("", ini_section$, "bex")
        DIM ini_tags$
        LET ini_tags$ = ReadSetting$("", ini_section$, "tags")
        DIM ini_vid$
        LET ini_vid$ = ReadSetting$("", ini_section$, "vid")
        DIM ini_warp$
        LET ini_warp$ = ReadSetting$("", ini_section$, "warp")
        DIM ini_skill$
        LET ini_skill$ = ReadSetting$("", ini_section$, "skill")
        
        DIM vid%
        SELECT CASE ini_vid$
            CASE "8": LET vid% = 8
            CASE "16": LET vid% = 16
            CASE "24": LET vid% = 24
            CASE "32": LET vid% = 32
            CASE ELSE: LET vid% = 0
        END SELECT
        
        CALL Games_Add( _
            game_id$, ini_title$, ini_desc$, ini_cmplvl$, _
            ini_iwad$, ini_pre$, ini_pwad$, ini_files$, _
            ini_deh$, ini_bex$, _
            ini_tags$, vid%, _
            ini_warp$, ini_skill$ _
        )
    LOOP
END SUB

'=============================================================================
SUB Games_Add ( _
    id$, title$, desc$, cmplvl$, iwad$, pre$, pwad$, files$, _
    deh$, bex$, tags$, vid%, warp$, skill$ _
)
    'increase the number of games entries
    LET Games_Count = Games_Count + 1
    REDIM _PRESERVE Games(1 TO Games_Count) AS Game
    LET Games(Games_Count).id = STRADD&(id$)
    
    'find the IWAD meta-data entry referred to by this game
    DIM iwad%%
    LET iwad%% = IWADs_FindMeta&(iwad$)
    LET Games(Games_Count).iwad = iwad%%
    
    IF iwad%% = 0 THEN
        SELECT CASE UCASE$(Paths_GetFileBaseName$(iwad$))
            CASE "DOOM"
                LET Games(Games_Count).type = TYPE_DOOM
            CASE "CHEX"
                LET Games(Games_Count).type = TYPE_CHEX
            CASE "DOOM2", "TNT", "PLUTONIA"
                LET Games(Games_Count).type = TYPE_DOOM2
            CASE "HERETIC"
                LET Games(Games_Count).type = TYPE_HERETIC
            CASE "HEXEN"
                LET Games(Games_Count).type = TYPE_HEXEN
            CASE "STRIFE"
                LET Games(Games_Count).type = TYPE_STRIFE
            CASE "DOOM64"
                LET Games(Games_Count).type = TYPE_DOOM64
        END SELECT
    ELSE
        LET Games(Games_Count).type = IWADS(iwad%%).type
    END IF
    
    'process the tag list
    '(find any tags we haven't come across before)
    CALL Tags_Add(tags$)
    
    'set warp defaults (i.e. no warp)
    LET Games(Games_Count).warp_e = -1
    LET Games(Games_Count).warp_m = -1
        
    'warp parameter?
    IF warp$ <> "" THEN
        'if it's just a number,
        IF ISINT(warp$) THEN
            'add a warp parameter to the game
            LET Games(Games_Count).warp_m = VAL(warp$)
            GOTO skill
        END IF
        
        IF LEN(warp$) > 2 THEN
            'process warp parameter for episode / map number;
            'is there a dot in the second character? (i.e. "e.m" format)
            IF ASC(warp$, 2) = 46 THEN
                'pick the numbers
                DIM e$, m$
                LET e$ = LEFT$(warp$, 1)
                LET m$ = MID$(warp$, 3)
                'is the first part a number?
                IF ISINT(e$) THEN
                    'and the second part?
                    IF ISINT(m$) THEN
                        'add a warp parameter to the game
                        LET Games(Games_Count).warp_e = VAL(e$)
                        LET Games(Games_Count).warp_m = VAL(m$)
                        GOTO skill
                    ELSE
                        'FIXME: not a valid warp parameter?
                        SYSTEM 1
                    END IF
                ELSE
                    'FIXME: not a valid warp parameter?
                    SYSTEM 1
                END IF
            END IF
        END IF
            
        'TODO: support map-names
        SYSTEM 1
    END IF
    
skill:
    'no skill parameter?
    IF skill$ = "" THEN
        'set default
        LET Games(Games_Count).skill = -1
        
    ELSE
        IF ISINT(skill$) THEN
            'TODO: check 0-9
            LET Games(Games_Count).skill = VAL(skill$)
        ELSE
            'FIXME: error on non-number
            SYSTEM 1
        END IF
    END IF
    
    'no problems? write the data into the engine list
    LET Games(Games_Count).title = STRADD&(title$)
    LET Games(Games_Count).desc = STRADD&(desc$)
    
    IF cmplvl$ = "" THEN
        LET Games(Games_Count).cmplvl = -1
    ELSE
        LET Games(Games_Count).cmplvl = VAL(cmplvl$)
    END IF
    
    LET Games(Games_Count).pre = STRADD&(pre$)
    LET Games(Games_Count).pwad = STRADD&(pwad$)
    LET Games(Games_Count).files = STRADD&(files$)
    LET Games(Games_Count).deh = STRADD&(deh$)
    LET Games(Games_Count).bex = STRADD&(bex$)
    LET Games(Games_Count).tags = STRADD&(tags$)
    
    'don't allow vid% to be undefined
    LET Games(Games_Count).vid = vid%
END SUB

'=============================================================================
SUB Games_Select(game%)
    LET Games_Current = game%
    LET Games_Selected = Games(Games_Current)
    
    CALL IWADs_Select(Games_Selected.iwad)
END SUB
