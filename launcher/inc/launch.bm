'copyright (C) Kroc Camen 2018, BSD 2-clause

'=============================================================================
'launch the selected game, with the selected engine, with the selected
'parameters, any mods (if selected) and so forth. we need to build the
'right command-line to do all of this
'
'   [00]: START & /WAIT
'   [01]: save game path
'   [02]: engine executable
'   [03]: config file
'   [04]: compatibility level
'   [05]: IWAD
'   [06]: auto-load files
'   [07]: PWAD
'   [08]: DEH & BEX
'   [09]: demo playback
'   [10]: warp & skill
'   [11]: execute scripts
'   [12]: resolution & full-screen
'   [13]: launch!

_ECHO ""
_ECHO "     PortaDOOM Launcher"
_ECHO ""

'NOTE: many doom engines save their config files in the 'current directory',
'which is typically expected to be that of the executable. however, we want
'to separate user-data (such as save-games) from the engines. whilst we can
'change the save directory, config files will still be dumped in the 'current
'directory'.

'we therefore need to change the current directory and rewrite
'all the WAD / file paths to be relative from there!

'this is the relative path from the WAD's
'save folder back to this executable
DIM SHARED FIX_PATH$
LET FIX_PATH$ = "..\..\..\"

'we will remember the directory of the last file
'(used for finding side-by-side WADs)
DIM SHARED DIR_PREV$
'other directories that will be remembered as we go
DIM SHARED DIR_IWAD$
DIM SHARED DIR_PWAD$

'some engines require different methods of passing extra files, e.g. PWAD
'and mods. as we go, we'll build up a list of files to include (in the right
'order) and worry about the specific invocation at the end
LET CMD_FILES$ = ""


'-----------------------------------------------------------------------------
'[00] START & /WAIT
'-----------------------------------------------------------------------------
'use the `START` command to launch the engine without freezing up the launcher
LET CMD$ = "START"
'add a window title
LET CMD$ = CMD$ + " " + CHR$(34) + "PortaDOOM Launcher" + CHR$(34)
'has the `/WAIT` command-line option been specified?
IF CMD_WAIT` THEN
	'add parameter to `START` to hold until the executable closes
	'-- note this will freeze launcher.exe!
	LET CMD$ = CMD$ + " /WAIT"
END IF

'-----------------------------------------------------------------------------
'[01] save game path:
'-----------------------------------------------------------------------------
'the "saves" folder should exist (it's part of PortaDOOM),
'but just in case, check
CALL Launch_MkDir(DIR_EXE$ + DIR_SAVES$)

'add the save-folder name for the selected engine; there can be
'multiple folder names and IDs for engines, such as 32/64-bit and
'differing versions, so a common save name is provided in the INI
DIM DIR_SAVE_ENGINE$
LET DIR_SAVE_ENGINE$ = Paths_AddSlash$( _
	DIR_SAVES$ + STRGET$(Engines_Selected.save) _
)

'does this folder exist?
CALL Launch_MkDir(DIR_EXE$ + DIR_SAVE_ENGINE$)

'the saves folder will contain a sub-folder for each engine (above),
'and then another sub-folder for the IWAD or PWAD
DIM DIR_SAVE_GAME$

'if the game is using a PWAD,
'use that name for the save folder
IF STRGET$(Games_Selected.pwad) <> "" THEN
    LET DIR_SAVE_GAME$ = DIR_SAVE_ENGINE$ _
        + Paths_GetFileBaseName$(STRGET$(Games_Selected.pwad))
ELSE
    'otherwise just use the IWAD name
    LET DIR_SAVE_GAME$ = DIR_SAVE_ENGINE$ _
        + Paths_GetFileBaseName$(STRGET$(Games_Selected.iwad))
END IF

'does this folder exist?
CALL Launch_MkDir(DIR_EXE$ + DIR_SAVE_GAME$)

'set the directory for the game engine to assume as default; note that from
'here on, all paths on the command-line must be relative to save-game folder!
LET CMD$ = CMD$ + " /D " + CHR$(34) + DIR_EXE$ + DIR_SAVE_GAME$ + CHR$(34)

'ensure it ends with a slash
'TODO: Add mod support to this
LET DIR_SAVE_GAME$ = Paths_AddSlash$(DIR_SAVE_GAME$)

'-----------------------------------------------------------------------------
'[02] engine executable:
'-----------------------------------------------------------------------------
DIM DIR_ENGINE$
LET DIR_ENGINE$ = DIR_PORTS$ + Paths_AddSlash$(STRGET$(Engines_Selected.dir))

'add the engine executable to the command-line
LET CMD$ = CMD$ + " " + CHR$(34) _
         + Launch_FixPath$(DIR_ENGINE$) + STRGET$(Engines_Selected.exe) _
         + CHR$(34)
         
_ECHO "         port : " + STRGET$(Engines_Selected.title)
_ECHO "       engine : " + DIR_ENGINE$ + STRGET$(Engines_Selected.exe)
_ECHO ""

'-----------------------------------------------------------------------------
'[03] config file:
'-----------------------------------------------------------------------------
DIM CMD_CONFIG$

'which file-extension does the engine use? ZDoom-based engines
'use ".ini", everything else ".cfg" (including DOOM64EX)
DIM cfg$
IF Engines_Selected.kin >= KIN_Z THEN
    LET cfg$ = ".ini"
ELSE
    LET cfg$ = ".cfg"
END IF

'define the default config file path, as we will need to copy this if the
'engine's config file doesn't exist yet. note that this leaves off the
'file extension, for now
DIM cfg_default$
LET cfg_default$ = DIR_CONFIG$ + "default." + STRGET$(Engines_Selected.cfg)

'was the command-line parameter given to use the default config-file?
IF CMD_DEFAULT` THEN
    'set the path to the default config file (sans-extension)
    LET CMD_CONFIG$ = cfg_default$
ELSE
    'build the path to the user's config file (for selected engine)
    'note that this leaves off the file extension, for now
    DIM cfg_engine$
    LET cfg_engine$ = DIR_SAVE_ENGINE$ _
                    + "config." + STRGET$(Engines_Selected.cfg)

    'if the user's config file doesn't exist, make a copy of the default
    IF NOT _FILEEXISTS(cfg_engine$ + cfg$) THEN
        'copy across the default config file
        'FIXME: capture error here
        SHELL "COPY /Y " _
            + CHR$(34) + cfg_default$ + cfg$ + CHR$(34) + " /A " _
            + CHR$(34) + cfg_engine$ + cfg$ + CHR$(34) + " /A"
        
        'vanilla engines store non-original settings in an extra config file
        IF Engines_Selected.kin = KIN_V THEN
            'FIXME: capture error here
            SHELL "COPY /Y " _
                + CHR$(34) + cfg_default$ + ".extra" + cfg$ + CHR$(34) + " /A " _
                + CHR$(34) + cfg_engine$ + ".extra" + cfg$ + CHR$(34) + " /A"
        END IF
    END IF
    
    LET CMD_CONFIG$ = cfg_engine$
END IF

'add the command-line parameter to select the config file
LET CMD$ = CMD$ + " -config " _
         + CHR$(34) + Launch_FixPath$(CMD_CONFIG$) + cfg$ + CHR$(34)
_ECHO "      -config : " + CMD_CONFIG$ + cfg$

'vanilla engines (Chocolate-Doom, Crispy-Doom) store non-original settings
'in an extra config file (this is why we omit the file extension until now)
IF Engines_Selected.kin = KIN_V THEN
    LET CMD$ = CMD$ + " -extraconfig " _
             + CHR$(34) + Launch_FixPath$(CMD_CONFIG$ + ".extra" + cfg$) + CHR$(34)
    
    _ECHO " -extraconfig : " + CMD_CONFIG$ + ".extra" + cfg$
END IF

'-----------------------------------------------------------------------------
'[04] compatibility level:
'-----------------------------------------------------------------------------
IF Games_Selected.cmplvl >= 0 THEN
    'TODO: should this only be applied to Boom-based engines?
    LET CMD$ = CMD$ + " -complevel " + STRINT$(Games_Selected.cmplvl)
    _ECHO "   -complevel : " + STRINT$(Games_Selected.cmplvl)
END IF

'-----------------------------------------------------------------------------
'[05] IWAD:
'-----------------------------------------------------------------------------
'try and locate the IWAD path
'FIXME: handle FreeDOOM replacement / BFG-edition patching
LET CMD_IWAD$ = IWADs_GetPath$(STRGET$(Games_Selected.iwad))
LET DIR_IWAD$ = Paths_GetPath$(CMD_IWAD$)

LET CMD_IWAD$ = Launch_ClipPath$(CMD_IWAD$)
LET CMD$ = CMD$ + " -iwad " _
         + CHR$(34) + Launch_FixPath$(CMD_IWAD$) + CHR$(34)
_ECHO "        -iwad : " + CMD_IWAD$

'-----------------------------------------------------------------------------
'[06] auto-load files:
'-----------------------------------------------------------------------------
'any files that should be automatically included with the engine?
'(e.g. "brightmaps.pk3", "lights.pk3")
DIM auto_path$
LET auto_path$ = STRGET$(Engines_Selected.auto)
IF auto_path$ <> "" THEN
	'read the first file from the list
	LET auto_path$ = WADs_Split$(auto_path$)
	DO
		'FIXME: check file exists; here or at the end?
		'TODO: other places for auto-load files?
		
		'add the file to the ordered list to pass to the engine.
		'note that auto-load files come before the PWAD
		LET CMD_FILES$ = CMD_FILES$ + DIR_ENGINE$ + auto_path$ + ";"
		
		_ECHO " (auto) -file : " + DIR_ENGINE$ + auto_path$
		
		LET auto_path$ = WADs_Split$("")
	LOOP WHILE auto_path$ <> ""
END IF

'-----------------------------------------------------------------------------
'[07] PWAD:
'-----------------------------------------------------------------------------
'doom engines typically don't have a specific concept of a "PWAD", it's just
'an additional file to load like any other and it's not necessarily the first
'listed, that will likely be the auto-load files

LET CMD_PWAD$ = STRGET$(Games_Selected.pwad)
IF CMD_PWAD$ <> "" THEN
    LET CMD_PWAD$ = WADs_GetPWADPath$(CMD_PWAD$)
	'FIXME: file missing?
    LET DIR_PWAD$ = Paths_GetPath$(CMD_PWAD$)
	
	CMD_PWAD$ = Launch_ClipPath$(CMD_PWAD$)
	
    LET CMD_FILES$ = CMD_FILES$ + CMD_PWAD$ + ";"
    _ECHO "         pwad : " + CMD_PWAD$
END IF

'-----------------------------------------------------------------------------
'[08] DEH & BEX:
'-----------------------------------------------------------------------------
'has a DEH file been specified?
LET CMD_DEH$ = STRGET$(Games_Selected.deh)
IF CMD_DEH$ <> "" THEN
    'find the DEH file
	'FIXME: file missing?
    LET CMD_DEH$ = WADs_Find$(CMD_DEH$)
    'add it to the command-line
    LET CMD$ = CMD$ + " -deh " _
             + CHR$(34) + Launch_FixPath$(CMD_DEH$) + CHR$(34)
    'and announce
    _ECHO "         -deh : " + CMD_DEH$
END IF

'has a BEX file been specified?
LET CMD_BEX$ = STRGET$(Games_Selected.bex)
IF CMD_BEX$ <> "" THEN
    'find the BEX file
	'FIXME: file missing?
    LET CMD_BEX$ = WADs_Find$(CMD_BEX$)
	'add it to the command-line
    LET CMD$ = CMD$ + " -bex " _
             + CHR$(34) + Launch_FixPath$(CMD_BEX$) + CHR$(34)
	'and announce
    _ECHO "         -bex : " + CMD_BEX$
END IF

'-----------------------------------------------------------------------------
'[09] demo playback:
'-----------------------------------------------------------------------------
IF LEN(CMD_DEMO$) <> 0 THEN
    'try and find the file:
    DIM demo$
	'try the folder from which the launcher was called
    LET demo$ = DIR_CUR$ + CMD_DEMO$
    'if it doesn't exist there...
    IF NOT _FILEEXISTS(demo$) THEN
        'try the special demos folder
		LET demo$ = DIR_DEMOS$ + CMD_DEMO$
		'if it doesn't exist there...
        IF NOT _FILEEXISTS(demo$) THEN
            'FIXME: handle demo file missing
        END IF
    END IF
    
    'add the command-line param to play the demo
    LET CMD$ = CMD$ + " -playdemo " _
             + CHR$(34) + Launch_FixPath$(demo$) + CHR$(34)
    _ECHO "    -playdemo : " + demo$
END IF

'-----------------------------------------------------------------------------
'[10] warp & skill:
'-----------------------------------------------------------------------------
'TODO: ask for skill level if warp, but no skill

IF Games_Selected.warp_e >= 0 OR Games_Selected.warp_m >= 0 THEN
	DIM e$: LET e$ = STR$(Games_Selected.warp_e)
	DIM m$: LET m$ = STR$(Games_Selected.warp_m)
	DIM warp$
	
	IF Games_Selected.warp_e >= 0 THEN LET warp$ = warp$ + e$
	IF Games_Selected.warp_m >= 0 THEN LET warp$ = warp$ + m$
	
	LET CMD$ = CMD$ + " -warp" + warp$
	_ECHO "        -warp :" + warp$
END IF

IF Games_Selected.skill >= 0 THEN
	LET CMD$ = CMD$ + " -skill" + STR$(Games_Selected.skill)
	_ECHO "       -skill :" + STR$(Games_Selected.skill)
END IF

'-----------------------------------------------------------------------------
'[11] execute scripts:
'-----------------------------------------------------------------------------
'TODO
IF CMD_EXEC$ <> "" THEN
	_ECHO ""
	_ECHO "ERROR: /EXEC unimplemented!"
	_ECHO ""
	SYSTEM 1
END IF

'-----------------------------------------------------------------------------
'[12] resolution & full-screen:
'-----------------------------------------------------------------------------
'the full-screen parameter varies by engine-type;
'ZDoom-based engines use `+fullscreen`:
IF Engines_Selected.kin = KIN_Z THEN
	LET CMD$ = CMD$ + " +fullscreen"
ELSE
	LET CMD$ = CMD$ + " -fullscreen"
END IF

DIM screen_width AS LONG
LET screen_width = _DESKTOPWIDTH
DIM screen_height AS LONG
LET screen_height = _DESKTOPHEIGHT
LET CMD$ = CMD$ + " -width " + STRINT$(screen_width)
LET CMD$ = CMD$ + " -height " + STRINT$(screen_height)

_ECHO "       -width :" + STR$(screen_width) _
    + "  -height :" + STR$(screen_height)

'-----------------------------------------------------------------------------
'[13] file list:
'-----------------------------------------------------------------------------
DIM file$
LET file$ = CMD_FILES$
IF file$ <> "" THEN
	'vanilla engines use `-merge`
	IF Engines_Selected.kin = KIN_V THEN
		CMD$ = CMD$ + " -merge"
	ELSE
		CMD$ = CMD$ + " -file"
	END IF
	
	'read the first file from the list
	LET file$ = WADs_Split$(file$)
	DO
		'add the file to the command-line
		LET CMD$ = CMD$ + " " + CHR$(34) + Launch_FixPath$(file$) + CHR$(34)
		
		LET file$ = WADs_Split$("")
	LOOP WHILE file$ <> ""
END IF

'-----------------------------------------------------------------------------
'[14] launch!
'-----------------------------------------------------------------------------
'specify the save-game directory as the 'current' directory
'TODO: a more specific way of detecting this?
IF STRGET$(Engines_Selected.name) = "PrBoom+" THEN
	LET CMD$ = CMD$ + " -save " + CHR$(34) + "." + CHR$(34)
ELSE
	'all other engines use `-savedir`,
	'except doom64x which has no support yet
	LET CMD$ = CMD$ + " -savedir " + CHR$(34) + "." + CHR$(34)
END IF

_ECHO ""
_ECHO CMD$
_ECHO ""

SHELL "pause"
CHDIR DIR_EXE$ + DIR_SAVE_GAME$
SHELL CMD$

SYSTEM

'=============================================================================

errMkDir:
_ECHO ""
_ECHO "ERROR: could not create required folder!"
_ECHO ""
SYSTEM 1
	
err_fileMissing:
SYSTEM 1

'make a folder if it doesn't exist; capture errors (e.g. read-only)
'=============================================================================
SUB Launch_MkDir(path$)
	ON ERROR GOTO errMkDir
	
	IF NOT _DIREXISTS(path$) THEN
		'folder is missing? attempt to make it, but be aware
		'of that potentially failing (read-only media?)
		MKDIR (path$)
		'no error, reset error handler
		ON ERROR GOTO 0
	END IF
END SUB

'correct a relative path from the save-game folder
'=============================================================================
FUNCTION Launch_FixPath$(path$)
    'is the path relative?
    IF NOT Paths_IsAbsolute(path$) THEN
        LET Launch_FixPath$ = FIX_PATH$ + path$
	ELSE
		'if the path is a sub-folder of PortaDOOM, convert it to relative
		IF LEFT$(path$, LEN(DIR_EXE$)) = DIR_EXE$ THEN
			LET Launch_FixPath$ = FIX_PATH$ + MID$(path$, LEN(DIR_EXE$) + 1)
		ELSE
			LET Launch_FixPath$ = path$
		END IF
    END IF
END FUNCTION

'if an absolute path is within PortaDOOM's folders, make it relative
'=============================================================================
FUNCTION Launch_ClipPath$(path$)
	IF LEFT$(path$, LEN(DIR_EXE$)) = DIR_EXE$ THEN
		LET Launch_ClipPath$ = MID$(path$, LEN(DIR_EXE$) + 1)
	ELSE
		LET Launch_ClipPath$ = path$
	END IF
END FUNCTION
