'copyright (C) Kroc Camen 2018, BSD 2-clause
'cmd.bm : read in command-line parameters

'display help?
'=============================================================================
DIM CMD$
IF _COMMANDCOUNT = 0 THEN
	'TODO: if there are no command-line parameters, we present a UI to build
    '      a custom game configuration?
	LET CMD$ = ""
ELSE
	LET CMD$ = LCASE$(COMMAND$(1))
END IF

IF CMD$ = "" _
OR CMD$ = "/?" _
OR CMD$ = "/h" _
OR CMD$ = "/help" _
OR CMD$ = "-?" _
OR CMD$ = "-h" _
OR CMD$ = "-help" _
OR CMD$ = "--help" _
THEN
	DIM USAGE$
	LET USAGE$ = "    launcher.exe"
	LET USAGE$ = USAGE$ + " [/USE <engine>]"
	LET USAGE$ = USAGE$ + " [/WAIT]"
	LET USAGE$ = USAGE$ + " [/SW]"
	LET USAGE$ = USAGE$ + " [/32]"
	LET USAGE$ = USAGE$ + " [/DEFAULT]"
	LET USAGE$ = USAGE$ + CHR$(10)+CHR$(13) + "            "
	LET USAGE$ = USAGE$ + " [/IWAD <file>]"
	LET USAGE$ = USAGE$ + " [/PWAD <file>]"
	LET USAGE$ = USAGE$ + " [/DEH <file>]"
	LET USAGE$ = USAGE$ + " [/BEX <file>]"
	LET USAGE$ = USAGE$ + CHR$(10)+CHR$(13) + "            "
	LET USAGE$ = USAGE$ + " [/DEMO <file>]"
	LET USAGE$ = USAGE$ + " [/WARP <map-number>]"
	LET USAGE$ = USAGE$ + " [/SKILL <skill-level>]"
	LET USAGE$ = USAGE$ + CHR$(10)+CHR$(13) + "            "
	LET USAGE$ = USAGE$ + " [/CMPLVL <complevel>]"
	LET USAGE$ = USAGE$ + " [/EXEC <file>]"
	LET USAGE$ = USAGE$ + CHR$(10)+CHR$(13) + "            "
	LET USAGE$ = USAGE$ + " [-- <files>...]"
    'TODO: console help
	
	_ECHO ""
	_ECHO " Usage:"
	_ECHO ""
	_ECHO USAGE$
	_ECHO ""
	_ECHO " /USE <engine>"
	_ECHO ""
	_ECHO "    Which engine to use. Can be any of the following:"
	_ECHO ""
	_ECHO "        TODO"
	_ECHO ""
	_ECHO " /WAIT"
	_ECHO ""
	_ECHO "    Causes launcher.exe to not immediately return once the engine is launched."
	_ECHO "    Script execution will continue only once the engine has quit."
	_ECHO ""
	_ECHO " /SW"
	_ECHO ""
	_ECHO "    Force software rendering. By default hardware rendering is used in"
	_ECHO "    GZDoom and PRBoom+ (" + CHR$(34) + "glboom-plus.exe" + CHR$(34) + ")."
	_ECHO ""
	_ECHO " /32"
	_ECHO ""
	_ECHO "    Always use 32-bit binaries, even on a 64-bit system."
	_ECHO ""
	_ECHO " /DEFAULT"
	_ECHO ""
	_ECHO "    Loads the engine with the default config file instead of the current user"
	_ECHO "    config file. Any changes you make to the engine's settings will be saved"
	_ECHO "    in the default configuration file."
	_ECHO ""
	_ECHO " /IWAD <file>"
	_ECHO ""
	_ECHO "    The IWAD (Internal WAD) is the base WAD to use."
	_ECHO ""
	_ECHO "        TODO"
	_ECHO ""
	_ECHO " /PWAD <file>"
	_ECHO ""
	_ECHO "        TODO"
	_ECHO ""
	_ECHO " /DEH <file>"
	_ECHO " /BEX <file>"
	_ECHO ""
	_ECHO "    Early DOOM modifications were done by way of a live patching system known as"
	_ECHO "    DeHackEd. These " + CHR$(34) + ".deh" + CHR$(34) + " files are common, even today, as the lowest-common-"
	_ECHO "    denominator of DOOM modding."
	_ECHO ""
	_ECHO "    Boom, a highly-influential early source-port, enhanced this format further"
	_ECHO "    with " + CHR$(34) + "Boom-EXtended" + CHR$(34) + " DeHackEd files."
	_ECHO ""
	_ECHO "    These parameters specify a DEH or BEX file to load alongside any WADs."
	_ECHO ""
	_ECHO " /DEMO <file>"
	_ECHO ""
	_ECHO "    DOOM play sessions can be recorded and played back later. These are often"
	_ECHO "    distributed as " + CHR$(34) + ".lmp" + CHR$(34) + " files. The /DEMO option specifies the file to play."
	_ECHO ""
	_ECHO " /WARP <map-number>"
	_ECHO ""
	_ECHO "    Warp to the given map number. For games with episodes, such as DOOM and"
	_ECHO "    Heretic, this is in the format `e.m` where `e` is the Episode number and"
	_ECHO "    `m` is the Map number, e.g. `/WARP 2.4`. For games without episodes like"
	_ECHO "    DOOM II, it's just a single number e.g. `/WARP 21`"
	_ECHO ""
	_ECHO " /SKILL <skill-level>"
	_ECHO ""
	_ECHO "    Set skill (difficulty) level. This is a number nominally 1 to 5, but this"
	_ECHO "    may vary with mods. A value of 0 disables monsters on some engines, but this"
	_ECHO "    can sometimes prevent a level from being completable."
	_ECHO ""
	_ECHO " /CMPLVL <complevel>"
	_ECHO ""
	_ECHO "    Specifies the compatibility level, a feature provided by PrBoom+ to emulate"
	_ECHO "    the behaviour of different versions of the DOOM executable. The complevel"
	_ECHO "    can be:"
	_ECHO ""
	_ECHO "        0     = Doom v1.2"
	_ECHO "        1     = Doom v1.666"
	_ECHO "        2     = Doom v1.9"
	_ECHO "        3     = Ultimate Doom & Doom95"
	_ECHO "        4     = Final Doom"
	_ECHO "        5     = DOSDoom"
	_ECHO "        6     = TASDOOM"
	_ECHO "        7     = Boom's inaccurate vanilla compatibility mode"
	_ECHO "        8     = Boom v2.01"
	_ECHO "        9     = Boom v2.02"
	_ECHO "        10    = LxDoom"
	_ECHO "        11    = MBF"
	_ECHO "        12-16 = PrBoom (old versions)"
	_ECHO "        17    = Current PrBoom"
	_ECHO ""
	_ECHO " /EXEC <file>"
	_ECHO ""
	_ECHO "    Execute the script file."
	_ECHO ""
	SHELL "PAUSE"
    SYSTEM
END IF

'read command-line switches:
'=============================================================================
'the command-line switches are to allow drop-in replacement compatibility
'with "play.bat" / "doom.bat", the previous launcher setup. commands come
'in three varieties: 1. commands for engine selection / compatibility:
'
DIM SHARED CMD_USE$ '....a specific engine-id to use
DIM SHARED CMD_REQ$ '....a tag-list of engine requirements
DIM SHARED CMD_32` '.....always use 32-bit executable on 64-bit system
DIM SHARED CMD_SW` '.....require 8-bit (typically "software") rendering
DIM SHARED CMD_DEFAULT` 'should default config file be used?

DIM cmd_hasEngine` '.....flag, select engine(s) from command-line

'and, 2. commands to specify what game to play:
'
DIM SHARED CMD_IWAD$ '...IWAD to use
DIM SHARED CMD_PWAD$ '...optional PWAD to play
DIM SHARED CMD_DEH$ '....optional ".DEH" (DeHackEd) file to include
DIM SHARED CMD_BEX$ '....optional ".BEX" (Boom-EXtneded DeHackEd) file to include
DIM SHARED CMD_DEMO$ '...demo lump to play
DIM SHARED CMD_WARP$ '...episode/map number to warp to
DIM SHARED CMD_SKILL$ '..skill level number
DIM SHARED CMD_CMPLVL$ '.compatibility level
DIM SHARED CMD_EXEC$ '...extra script to execute
DIM SHARED CMD_FILES$ '..list of extra files to include

DIM cmd_hasGame` '.......flag, define game from command-line

'3. commands that affect invocation
'
DIM SHARED CMD_WAIT` '...stall the launcher whilst the game is running

'FIXME: do not allow mix of command params & INI files?
LET i = 1
DO WHILE COMMAND$(i) <> ""
    SELECT CASE UCASE$(COMMAND$(i))
		CASE "/WAIT"
			LET CMD_WAIT` = TRUE
			
        CASE "/USE"
            'capture the parameter that follows
            LET i = i + 1: LET CMD_USE$ = COMMAND$(i)
            'note that we will have to select engine(s) using this
            LET cmd_hasEngine` = TRUE
            
        CASE "/REQ"
            'capture the parameter that follows
            LET i = i + 1: LET CMD_REQ$ = COMMAND$(i)
            'note that we will have to select engine(s) using this
            LET cmd_hasEngine` = TRUE
            
        CASE "/32"
            'set the flag to favour 32-bit binaries (on 64-bit systems);
            'on its own, this does not select an engine
            LET CMD_32` = TRUE
            
        CASE "/SW"
            'set the flag to favour software / 8-bit rendering;
            'on its own, this does not select an engine
            LET CMD_SW` = TRUE
            
        CASE "/DEFAULT"
            'set the flag to use the default config file;
            'on its own, this does not select an engine
            LET CMD_DEFAULT` = TRUE
            
        CASE "/IWAD"
            'capture the parameter that follows
            LET i = i + 1: LET CMD_IWAD$ = COMMAND$(i)
            'note that we will have to define a game using this
            LET cmd_hasGame` = TRUE
            
        CASE "/PWAD"
            'capture the parameter that follows
            LET i = i + 1: LET CMD_PWAD$ = COMMAND$(i)
            'note that we will have to define a game using this
            LET cmd_hasGame` = TRUE
            
        CASE "/DEH"
            'capture the parameter that follows
            LET i = i + 1: LET CMD_DEH$ = COMMAND$(i)
            'note that we will have to define a game using this
            LET cmd_hasGame` = TRUE
            
        CASE "/BEX"
            'capture the parameter that follows
            LET i = i + 1: LET CMD_BEX$ = COMMAND$(i)
            'note that we will have to define a game using this
            LET cmd_hasGame` = TRUE
            
        CASE "/DEMO"
            'capture the parameter that follows
            LET i = i + 1: LET CMD_DEMO$ = COMMAND$(i)
            'note that we will have to define a game using this
            LET cmd_hasGame` = TRUE
            
        CASE "/WARP"
            'capture the parameter that follows
            LET i = i + 1: LET CMD_WARP$ = COMMAND$(i)
			'note that we will have to define a game using this
            LET cmd_hasGame` = TRUE
            
        CASE "/SKILL"
            'capture the parameter that follows
            LET i = i + 1: LET CMD_SKILL$ = COMMAND$(i)
			'note that we will have to define a game using this
            LET cmd_hasGame` = TRUE
            
        CASE "/CMPLVL"
            'capture the parameter that follows
            LET i = i + 1: LET CMD_CMPLVL$ = COMMAND$(i)
            
        CASE "/EXEC"
            'capture the parameter that follows
            LET i = i + 1: LET CMD_EXEC$ = COMMAND$(i)
			'note that we will have to define a game using this
            LET cmd_hasGame` = TRUE
            
        CASE "--"
            'once the 'end-of-command' marker is encountered, everything
			'that follows is a WAD file to be given to the engine; this
			'implies that a game is to be defined
			LET cmd_hasGame` = TRUE
            'read in and append the remaining params
			LET i = i + 1
			DO WHILE COMMAND$(i) <> ""
				LET CMD_FILES$ = CMD_FILES$ + COMMAND$(i) + ";"
			LOOP
			'cannot process any other commands
			EXIT DO
			
        CASE ELSE
            'if an INI file is given, load the game definitions from it
            IF UCASE$(Paths_GetFileExtension$(COMMAND$(i))) = "INI" THEN
                'attempt to locate the INI file
                'FIXME: handle file-not-found error
                Games_EnumerateINI(COMMAND$(i))
			ELSE
				'no other command / file is allowed until the
				'end-of-command marker is encountered "--"
				_ECHO ""
				_ECHO "ERROR: Invalid parameters!"
				_ECHO ""
				SYSTEM 1
            END IF
    END SELECT
    LET i = i + 1
LOOP
_ECHO ""

'is there enough parameters to define a game from the command-line?
IF cmd_hasGame` THEN
    DIM title$, cmplvl$, deh$, bex$, tags$, vid$
    
    'require "software" renderer (8-bit, 256-colours)
    IF CMD_SW` = TRUE THEN LET vid$ = "8" ELSE LET vid$ = "32"

    'if no IWAD is provided, we will default to "DOOM2"
    IF CMD_IWAD$ = "" THEN LET CMD_IWAD$ = "DOOM2.WAD"
    'since the command-line doesn't provide
    'meta-data, get that internally
    LET title$ = IWADs_GetTitle$(CMD_IWAD$)

    'FIXME: implement `/REQ` for requiring feature tags
    LET tags$ = IWADs_GetTags$(CMD_IWAD$)

    'these can be applied 1:1
    'TODO: validation on this end, to give CMD-specific error message?
    LET deh$ = CMD_DEH$
    LET bex$ = CMD_BEX$
    LET cmplvl$ = CMD_CMPLVL$
    
    CALL Games_Add ( _
        "cmd", title$, cmplvl$, CMD_IWAD$, CMD_PWAD$, CMD_FILES$, _
		deh$, bex$, tags$, vid$, CMD_WARP$, CMD_SKILL$ _
    )
END IF
