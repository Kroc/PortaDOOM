'copyright (C) Kroc Camen 2018, BSD 2-clause
'cmd.bm : read in command-line parameters

'read command-line switches:
'=============================================================================
DIM CMD$
'no command-line parameters? display the command-line help
'launcher.exe does not yet provide a GUI interface without params
IF _COMMANDCOUNT = 0 THEN GOTO cmd_help

'the command-line switches are to allow drop-in replacement compatibility
'with "play.bat" / "doom.bat", the previous launcher setup. commands come
'in three varieties:
'
'1. commands for engine selection / compatibility:
'
DIM SHARED CMD_USE$ '....a specific engine-id to use
DIM SHARED CMD_REQ$ '....a tag-list of engine requirements
DIM SHARED CMD_32` '.....always use 32-bit executable on 64-bit system
DIM SHARED CMD_SW` '.....require 8-bit (typically "software") rendering

DIM cmd_hasEngine` '.....flag, select engine(s) from command-line

'2. commands to specify what game to play:
'
DIM SHARED CMD_IWAD$ '...IWAD to use
DIM SHARED CMD_PWAD$ '...optional PWAD to play
DIM SHARED CMD_DEH$ '....optional ".DEH" (DeHackEd) file to include
DIM SHARED CMD_BEX$ '....optional ".BEX" (Boom-EXtneded DeHackEd) file to include
DIM SHARED CMD_DEMO$ '...demo lump to play
DIM SHARED CMD_WARP$ '...episode/map number to warp to
DIM SHARED CMD_SKILL$ '..skill level number
DIM SHARED CMD_CMPLVL$ '.compatibility level
DIM SHARED CMD_EXEC$ '...extra script to execute
DIM SHARED CMD_FILES$ '..list of extra files to include

DIM cmd_hasGame` '.......flag, define game from command-line

'3. commands that affect invocation
'
DIM SHARED CMD_WAIT` '...stall the launcher whilst the game is running
DIM SHARED CMD_DEBUG` '..display detailed information
DIM SHARED CMD_DEFAULT` 'should default config file be used?
DIM SHARED CMD_QUIT` '...(ZDoom-based engines only), quit after launching

LET CMD_DEBUG` = TRUE

'FIXME: do not allow mix of command params & INI files?
LET i = 1
DO WHILE COMMAND$(i) <> ""
    SELECT CASE UCASE$(COMMAND$(i))
        CASE "/?", "--HELP"
cmd_help:   PRINT ""
            PRINT " No default UI yet, use command-line parameters to invoke:"
            PRINT ""
            PRINT " launcher.exe [/USE <engine>] [/WAIT] [/SW] [/32] [/DEFAULT]"
            PRINT "              [/IWAD <file> | /DOOM | /DOOM2 | /TNT | /PLUTONIA | /HERETIC"
            PRINT "              | /HEXEN | /STRIFE | /CHEX | /FREEDOOM1 | /FREEDOOM2 ]"
            PRINT "              [/PWAD <file>] [/DEH <file>] [/BEX <file>]"
            PRINT "              [/DEMO <file>] [/WARP <number>] [/SKILL <number>]"
            PRINT "              [/CMPLVL <number>] [/EXEC <file>] [/QUIT]"
            PRINT "              [-- <files>...]"
            PRINT ""
            PRINT ""
            PRINT " Or press ";: COLOR AQUA: PRINT "[O]";: COLOR UI_FORECOLOR
            PRINT " to visit the on-line documentation @"
            COLOR LIME
            PRINT " https://github.com/Kroc/PortaDOOM/wiki/Launcher"
            COLOR UI_FORECOLOR
            PRINT ""
            COLOR WHITE
            PRINT " Press Any Key to Exit"
            PRINT ""
            
            DO: LET key$ = INKEY$: LOOP WHILE key$ = ""
            IF key$ = "o" THEN
                SHELL _DONTWAIT "https://github.com/Kroc/PortaDOOM/wiki/Launcher"
            END IF
            
            SYSTEM
            
        CASE "/WAIT"
            'keep launcher.exe on screen whilst the game runs
            LET CMD_WAIT` = TRUE
            
        CASE "/DEBUG"
            'enable debugging mode; will print
            'additional information to the screen
            LET CMD_DEBUG` = TRUE
            'if this is the only param then nothing useful can be done,
            'print out the command-line usage
            IF _COMMANDCOUNT = 1 THEN GOTO cmd_help
            
        CASE "/QUIT"
            'for ZDoom-based engines only (ZDoom, Zandronum, GZDoom);
            'the engine loads and then quits. useful only for automation tasks
            LET CMD_QUIT` = TRUE
            
        CASE "/USE"
            'capture the parameter that follows
            LET i = i + 1: LET CMD_USE$ = COMMAND$(i)
            'note that we will have to select engine(s) using this
            LET cmd_hasEngine` = TRUE
            
        CASE "/REQ"
            'capture the parameter that follows
            LET i = i + 1: LET CMD_REQ$ = COMMAND$(i)
            'note that we will have to select engine(s) using this
            LET cmd_hasEngine` = TRUE
            
            PRINT " ERROR: `/REQ` NOT IMPLEMENTED"
            SLEEP
            SYSTEM 1
            
        CASE "/32"
            'set the flag to favour 32-bit binaries (on 64-bit systems);
            'on its own, this does not select an engine
            LET CMD_32` = TRUE
            
        CASE "/SW"
            'set the flag to favour software / 8-bit rendering;
            'on its own, this does not select an engine
            LET CMD_SW` = TRUE
            
        CASE "/DEFAULT"
            'set the flag to use the default config file;
            'on its own, this does not select an engine
            LET CMD_DEFAULT` = TRUE
            
        CASE "/IWAD", "/DOOM", "/CHEX", "/DOOM2", "/TNT", "/PLUTONIA", _
             "/HERETIC", "/HEXEN", "/STRIFE", "/FREEDOOM1", "/FREEDOOM2"
            'you can't define an IWAD twice, e.g. `/IWAD DOOM /HEXEN`
            IF CMD_IWAD$ <> "" THEN
				CALL ErrorScreen
                PRINT " ERROR: IWAD defined twice"
				PRINT ""
				PRINTWRAP_X 2, UI_SCREEN_WIDTH - 2, _
					"/IWAD parameter cannot be used twice. Note that the " _
				  + "/DOOM, /DOOM2, /TNT, /PLUTONIA, /HERETIC, /HEXEN, " _
				  + "/STRIFE, /FREEDOOM1 & /FREEDOOM2 switches are " _
				  + "shortcuts to /IWAD so these cannot be combined with " _
				  + "/IWAD, or each other."
                CALL ErrorExit
            END IF
            
            SELECT CASE UCASE$(COMMAND$(i))
                CASE "/IWAD"
                    'capture the parameter that follows
                    LET i = i + 1: LET CMD_IWAD$ = COMMAND$(i)
                    
                CASE "/DOOM": LET CMD_IWAD$ = "DOOM"
                CASE "/CHEX": LET CMD_IWAD$ = "CHEX"
                CASE "/DOOM2": LET CMD_IWAD$ = "DOOM2"
                CASE "/TNT": LET CMD_IWAD$ = "TNT"
                CASE "/PLUTONIA": LET CMD_IWAD$ = "PLUTONIA"
                CASE "/HERETIC": LET CMD_IWAD$ = "HERETIC"
                CASE "/HEXEN": LET CMD_IWAD$ = "HEXEN"
                CASE "/STRIFE": LET CMD_IWAD$ = "STRIFE1"
                CASE "/FREEDOOM1": LET CMD_IWAD$ = "FREEDOOM1"
                CASE "/FREEDOOM2": LET CMD_IWAD$ = "FREEDOOM2"
            END SELECT
            'note that we will have to define a game using this
            LET cmd_hasGame` = TRUE
            
        CASE "/PWAD"
            'capture the parameter that follows
            LET i = i + 1: LET CMD_PWAD$ = COMMAND$(i)
            'note that we will have to define a game using this
            LET cmd_hasGame` = TRUE
            
        CASE "/DEH"
            'capture the parameter that follows
            LET i = i + 1: LET CMD_DEH$ = COMMAND$(i)
            'note that we will have to define a game using this
            LET cmd_hasGame` = TRUE
            
        CASE "/BEX"
            'capture the parameter that follows
            LET i = i + 1: LET CMD_BEX$ = COMMAND$(i)
            'note that we will have to define a game using this
            LET cmd_hasGame` = TRUE
            
        CASE "/DEMO"
            'capture the parameter that follows
            LET i = i + 1: LET CMD_DEMO$ = COMMAND$(i)
            'note that we will have to define a game using this
            LET cmd_hasGame` = TRUE
            
        CASE "/WARP"
            'capture the parameter that follows
            LET i = i + 1: LET CMD_WARP$ = COMMAND$(i)
            'note that we will have to define a game using this
            LET cmd_hasGame` = TRUE
            
        CASE "/SKILL"
            'capture the parameter that follows
            LET i = i + 1: LET CMD_SKILL$ = COMMAND$(i)
            'note that we will have to define a game using this
            LET cmd_hasGame` = TRUE
            
        CASE "/CMPLVL"
            'capture the parameter that follows
            LET i = i + 1: LET CMD_CMPLVL$ = COMMAND$(i)
            
        CASE "/EXEC"
            'capture the parameter that follows
            LET i = i + 1: LET CMD_EXEC$ = COMMAND$(i)
            'note that we will have to define a game using this
            LET cmd_hasGame` = TRUE
            
        CASE "--"
            'once the 'end-of-command' marker is encountered, everything
            'that follows is a WAD file to be given to the engine
            LET i = i + 1
            DO WHILE COMMAND$(i) <> ""
                LET CMD_FILES$ = CMD_FILES$ + COMMAND$(i) + ";"
                ' any one file implies that a game is to be defined
                LET cmd_hasGame` = TRUE
                'continue searching
                LET i = i + 1
            LOOP
            
            EXIT DO
            
        CASE ELSE
            'if an INI file is given, load the game definitions from it
            IF UCASE$(Paths_GetFileExtension$(COMMAND$(i))) = "INI" THEN
                'attempt to locate the INI file
                'FIXME: handle file-not-found error
                Games_EnumerateINI(COMMAND$(i))
            ELSE
                'no other command / file is allowed until the
                'end-of-command marker is encountered "--"
                CALL ErrorScreen
                PRINT " ERROR: Invalid parameters!"
                CALL ErrorExit
            END IF
    END SELECT
    LET i = i + 1
LOOP

'display the parameters used if debug is enabled
IF CMD_DEBUG` THEN
    IF (CMD_WAIT` OR CMD_32` OR CMD_SW` OR CMD_DEFAULT` OR CMD_QUIT`) THEN
        PRINT "  ";
        IF CMD_WAIT` THEN PRINT "/WAIT ";
        IF CMD_32` THEN PRINT "/32 ";
        IF CMD_SW` THEN PRINT "/SW ";
        IF CMD_DEFAULT` THEN PRINT "/DEFAULT ";
        IF CMD_QUIT` THEN PRINT "/QUIT ";
        PRINT ""
    END IF
    IF CMD_USE$ <> "" THEN PRINT "  /USE    " + CMD_USE$
    IF CMD_REQ$ <> "" THEN PRINT "  /REQ    " + CMD_REQ$
    IF CMD_IWAD$ <> "" THEN PRINT "  /IWAD   " + CMD_IWAD$
    IF CMD_PWAD$ <> "" THEN PRINT "  /PWAD   " + CMD_PWAD$
    IF CMD_DEH$ <> "" THEN PRINT "  /DEH    " + CMD_DEH$
    IF CMD_BEX$ <> "" THEN PRINT "  /BEX    " + CMD_BEX$
    IF CMD_DEMO$ <> "" THEN PRINT "  /DEMO   " + CMD_DEMO$
    IF CMD_WARP$ <> "" THEN PRINT "  /WARP   " + CMD_WARP$
    IF CMD_SKILL$ <> "" THEN PRINT "  /SKILL  " + CMD_SKILL$
    IF CMD_CMPLVL$ <> "" THEN PRINT "  /CMPLVL " + CMD_CMPLVL$
    IF CMD_EXEC$ <> "" THEN PRINT "  /EXEC   " + CMD_EXEC$
    PRINT ""
END IF

'is there enough parameters to define a game from the command-line?
IF cmd_hasGame` THEN
    DIM title$, tags$, vid%, desc$
    
    'default to no hard requirement for rendering colour-depth 
    LET vid% = 0
    'require "software" renderer (8-bit, 256-colours)
    IF CMD_SW` = TRUE THEN LET vid% = 8
    
    'if no IWAD is provided, we will default to "DOOM2"
    IF CMD_IWAD$ = "" THEN LET CMD_IWAD$ = "DOOM2.WAD"
    
    'TODO: get game name / title from the IWAD meta-data
    
    CALL Games_Add ( _
        "cmd", title$, desc$, CMD_CMPLVL$, CMD_IWAD$, CMD_PWAD$, CMD_FILES$, _
        CMD_DEH$, CMD_BEX$, tags$, vid%, CMD_WARP$, CMD_SKILL$ _
    )
END IF
