'copyright (C) Kroc Camen 2018, BSD 2-clause

'   Paths_IsAbsolute(path$)     -> TRUE|FALSE
'   Paths_GetPath$(path$)       -> STRING
'   Paths_AddSlash$(path$)      -> STRING
'	Paths_StripSlash$(path$)	-> STRING
'   Paths_GetFolderName$        -> STRING
'   Paths_GetFileName$          -> STRING
'   Paths_HasExtension(path$)   -> TRUE|FALSE
'   Paths_GetFileExtension$     -> STRING
'   Paths_GetFileBaseName$      -> STRING
'   Paths_GetShortPath$         -> STRING

DECLARE LIBRARY

    FUNCTION GetShortPathNameA ( _
        lpszLongPath AS STRING, _
        lpszShortPath AS STRING, _
        BYVAL cchBuffer AS LONG _
    )

END DECLARE

'is the path absolute? i.e. "\..." or "C:\..."
'=============================================================================
FUNCTION Paths_IsAbsolute(path$)
    'just in case we're passed a fixed-length string
    LET path$ = RTRIM$(path$)
    'don't be silly
    IF LEN(path$) = 0 THEN EXIT FUNCTION
    
    'begins with a slash?
    IF ASC(path$, 1) = 92 THEN
        LET Paths_IsAbsolute = TRUE
    
    'we don't want to check the 2nd character if there isn't one.
    'since here it's not a slash, the path cannot be absolute
    ELSEIF LEN(path$) < 2 THEN
        EXIT FUNCTION
        
    'check the 2nd character for ":", e.g. "C:"
    ELSEIF ASC(path$, 2) = 58 THEN
        LET Paths_IsAbsolute = TRUE
        
    END IF
END FUNCTION

'returns the folder-path from a file-path, i.e. remove file name if present
'=============================================================================
FUNCTION Paths_GetPath$(path$)
    'just in case we're passed a fixed-length string
    LET path$ = RTRIM$(path$)
    'don't be silly
    IF LEN(path$) = 0 THEN EXIT FUNCTION
    
    DIM z%
    LET z% = _INSTRREV(path$, "\")
    'return nothing if there's no slash at all,
    'i.e. the string is just a file-name
    IF z% = 0 THEN EXIT FUNCTION
    
    LET Paths_GetPath$ = LEFT$(path$, z%)
END FUNCTION

'if there isn't, adds a slash to the end of a string
'=============================================================================
FUNCTION Paths_AddSlash$(path$)
    'just in case we're passed a fixed-length string
    LET path$ = RTRIM$(path$)
    
    IF LEN(path$) = 0 THEN
        LET Paths_AddSlash$ = "\"
    
    ELSEIF ASC(path$, LEN(path$)) <> 92 THEN
        LET Paths_AddSlash$ = path$ + "\"
        
    ELSE
        LET Paths_AddSlash$ = path$
    END IF
    
END FUNCTION

'removes the trailing slash
'=============================================================================
FUNCTION Paths_StripSlash$(path$)
	'just in case we're passed a fixed-length string
	LET path$ = RTRIM$(path$)
	
	DIM len_path%
	LET len_path% = LEN(path$)
	
	IF len_path% = 0 THEN EXIT FUNCTION
	
	IF ASC(path$, len_path%) = 92 THEN
		LET Paths_StripSlash$ = LEFT$(path$, len_path% - 1)
	END IF
	
END FUNCTION

'return the folder name from a path
'=============================================================================
FUNCTION Paths_GetFolderName$(path$)
    'just in case we're passed a fixed-length string
    LET path$ = RTRIM$(path$)
    'don't be silly
    IF LEN(path$) = 0 THEN EXIT FUNCTION
    IF path$ = "\" THEN EXIT FUNCTION
    
    'return nothing if there's no slash at all, i.e. the string is just a
    'file-name. directories MUST end with slash; use `Paths_AddSlash$` to
    'ensure a directory is always terminated correctly
    IF INSTR(path$, "\") = 0 THEN EXIT FUNCTION
    
    DIM a AS _UNSIGNED LONG
    DIM z AS _UNSIGNED LONG
    DIM len_path AS _UNSIGNED LONG
    LET len_path = LEN(path$)
    
    'this assumes that a folder always ends with a slash, otherwise it's
    'a file name. is the last character is already a slash?
    IF ASC(path$, len_path) = 92 THEN
        'we know the end position already,
        'skip over to finding the beginning
        LET z = len_path
    ELSE
        'walk backward through the string looking for the slash;
        'due to the validation check at the beginning of the function,
        'we know for certain at least one back-slash exists
        FOR z = len_path TO 1 STEP - 1
            IF ASC(path$, z) = 92 THEN EXIT FOR
        NEXT z
    END IF
    
    'we've passed the file name, walk backwards to capture the folder name
    FOR a = z - 1 TO 0 STEP - 1
        IF a = 0 THEN EXIT FOR
        IF ASC(path$, a) = 92 THEN EXIT FOR
    NEXT a
    
    'if an earlier slash was not found,
    'then there was only one folder, e.g. "some_folder\some.file"
    IF a = 0 THEN
        LET Paths_GetFolderName$ = LEFT$(path$, z - 1)
    ELSE
        'extract the folder name from the boundaries we determined
        LET Paths_GetFolderName$ = MID$(path$, a + 1, z - a - 1)
    END IF
END FUNCTION

'returns the file name (including extension) from a path
'=============================================================================
FUNCTION Paths_GetFileName$(path$)
    'just in case we're passed a fixed-length string
    LET path$ = RTRIM$(path$)
    
    DIM len_path AS _UNSIGNED LONG
    LET len_path = LEN(path$)
    
    'don't be silly
    IF len_path = 0 THEN EXIT FUNCTION
    'if the path ends in a slash then it's a folder and there's no file-name
    IF ASC(path$, len_path) = 92 THEN EXIT FUNCTION
    
    'return the input if there's no slash at all, i.e. the string is just a
    'file-name. directories MUST end with slash; use `Paths_AddSlash$` to
    'ensure a directory is always terminated correctly
    IF INSTR(path$, "\") = 0 THEN
        LET Paths_GetFileName$ = path$
        EXIT FUNCTION
    END IF
    
    'walk backward through the string looking for the slash;
    'due to the validation check at the beginning of the function,
    'we know for certain at least one back-slash exists
    DIM i AS _UNSIGNED LONG
    FOR i = len_path TO 1 STEP - 1
        IF ASC(path$, i) = 92 THEN EXIT FOR
    NEXT i
    
    'the file name is from the last slash, forward
    LET Paths_GetFileName$ = RIGHT$(path$, len_path - i)
END FUNCTION

'=============================================================================
FUNCTION Paths_HasExtension(path$)
    'just in case we're passed a fixed-length string
    LET path$ = RTRIM$(path$)
    
    DIM len_path AS _UNSIGNED LONG
    LET len_path = LEN(path$)
    
    'don't be silly
    IF len_path = 0 THEN EXIT FUNCTION
    'if the path ends in a slash then it's a folder and there's no file-name
    IF ASC(path$, len_path) = 92 THEN
        LET Paths_HasExtension = FALSE
        EXIT FUNCTION
    END IF
    
    'walk backwards along the string
    DIM z AS _UNSIGNED LONG
    FOR z = len_path TO 1 STEP - 1
        'if we encounter a slash, we've hit the beginning of a filename,
        'there cannot be any extensions now; we allow dots in folder names
        IF ASC(path$, z) = 92 THEN
            LET Paths_HasExtension = FALSE: EXIT FUNCTION
        
        'if we encounter a dot, obviously there's an extension
        ELSEIF ASC(path$, z) = 46 THEN
            LET Paths_HasExtension = TRUE: EXIT FUNCTION
        END IF
    NEXT z
    
    LET Paths_HasExtension = FALSE
END FUNCTION

'returns the file extension from a path, if it has a file name in it
'=============================================================================
FUNCTION Paths_GetFileExtension$(path$)
    'just in case we're passed a fixed-length string
    LET path$ = RTRIM$(path$)
    
    DIM len_path AS _UNSIGNED LONG
    LET len_path = LEN(path$)
    
    'don't be silly
    IF len_path = 0 THEN EXIT FUNCTION
    'if the path ends in a slash then it's a folder and there's no file-name
    IF ASC(path$, len_path) = 92 THEN EXIT FUNCTION
    
    'we want to ignore folder names that may contain periods,
    'so look for the folder slash first to isolate a file name
    LET path$ = MID$(path$, _INSTRREV(path$, "\") + 1)
    
    'is there any period at all?
    DIM i AS _UNSIGNED LONG
    LET i = _INSTRREV(path$, ".")
    'no file extension, return blank
    IF i = 0 THEN EXIT FUNCTION
    
    'return the part after the period
    LET Paths_GetFileExtension$ = MID$(path$, i + 1)
END FUNCTION

'returns the file name (excluding extension) from a path
'=============================================================================
FUNCTION Paths_GetFileBaseName$(path$)
    'just in case we're passed a fixed-length string
    LET path$ = RTRIM$(path$)
    
    DIM len_path AS _UNSIGNED LONG
    LET len_path = LEN(path$)
    
    'don't be silly
    IF len_path = 0 THEN EXIT FUNCTION
    'if the path ends in a slash then it's a folder and there's no file-name
    IF ASC(path$, len_path) = 92 THEN EXIT FUNCTION
    
    'walk backward through the string looking for a slash since we only want
    'the name from that point forward. if there is no slash, we'll take the
    'name as from the start of the string
    DIM a AS _UNSIGNED LONG
    FOR a = len_path - 1 TO 1 STEP - 1
        IF ASC(path$, a) = 92 THEN EXIT FOR
    NEXT a
    'this is a beautiful bit of serendipity: if the slash is found, then we
    'want to start the file name after the slash, and if the slash is not
    'found then the final `NEXT` ensures that the value of A is 0 and we
    'want it to be 1 (first character)
    LET a = a + 1
    
    'now walk forward looking for the dot
    DIM z AS _UNSIGNED LONG
    FOR z = a TO len_path
        IF ASC(path$, z) = 46 THEN EXIT FOR
    NEXT z
    LET z = z - 1
    
    'slice out the string we want
    LET Paths_GetFileBaseName$ = MID$(path$, a, z)
END FUNCTION

'returns the 8.3 version of a file path using the Windows API,
'note that this requires that the file exist at the given path
'source: http://www.qbasicnews.com/dav/qb64.php
'=============================================================================
FUNCTION Paths_GetShortPath$ (filepath$)
    DIM shortPathName AS STRING * 260
    LET shortPathName = SPACE$(260)
    DIM result&
    LET result& = GetShortPathNameA( _
        filepath$ + CHR$(0), shortPathName, LEN(shortPathName) _
    )
    IF result& > 0 THEN
        LET Paths_GetShortPath$ = RTRIM$(shortPathName)
    ELSE
        LET Paths_GetShortPath$ = filepath$
    END IF
END FUNCTION
