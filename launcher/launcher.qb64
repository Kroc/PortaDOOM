'copyright (C) Kroc Camen 2018, BSD 2-clause

'third-party library declarations:
'-----------------------------------------------------------------------------
'$INCLUDE:'lib\INI-Manager\ini.bi'

'our library declarations:
'-----------------------------------------------------------------------------
'$INCLUDE:'lib\ascii.bi'
'$INCLUDE:'lib\consts.bi'
'$INCLUDE:'lib\reg.bi'

'PortaDOOM Launcher declarations:
'-----------------------------------------------------------------------------
'$INCLUDE:'inc\tags.bi'
'$INCLUDE:'inc\games.bi'
'$INCLUDE:'inc\engines.bi'
'$INCLUDE:'inc\iwads.bi'

'=============================================================================

'generic 'index' counter
DIM i AS _UNSIGNED LONG

'temp variable for reading `INKEY$`
DIM key$

'the folder where config files are kept
CONST DIR_CONFIG$ = "config\"

'folder for the 'source ports' -- game engines
CONST DIR_PORTS$ = "ports\"

'folder for the user's save files
CONST DIR_SAVES$ = "saves\"

'folder for external executables;
'such as patching utilities
CONST DIR_TOOLS$ = "tools\"

'folder for WADs -- the game files to play
CONST DIR_WADS$ = "wads\"

'folder for demo-files (i.e. recorded runs)
CONST DIR_DEMOS$ = "demos\"

'folder for gameplay mods
CONST DIR_MODS$ = "mods\"

'read system info:
'-----------------------------------------------------------------------------
'get CPU type for the system (32 / 64-bit)
DIM SHARED CPU_BIT AS _UNSIGNED LONG
'default to 32-bit as this will always work
LET CPU_BIT = 32
'check the environment variables for CPU type:
'this one would only be true if we are a 64-bit executable also
IF ENVIRON$("PROCESSOR_ARCHITECTURE") = "AMD64" THEN LET CPU_BIT = 64
'detect 64-bit system from a 32-bit executable (WOW64)
IF ENVIRON$("PROCESSOR_ARCHITEW6432") = "AMD64" THEN LET CPU_BIT = 64

'directory of this executable (regardless of where it was called from)
DIM SHARED DIR_EXE$
LET DIR_EXE$ = Paths_AddSlash$(_CWD$)

'now, is this executable running from the source code folder or from within
'PortaDOOM's folder (as it would be in releases)? since these are different
'directories, and the launcher operates on the assumption that it's in the
'"PortaDOOM\files" folder, we need to re-route things when running from
'development builds. check to see if our parent folder is not "files":

IF Paths_GetFolderName$(DIR_EXE$) = "launcher" THEN
    'change directory to the expected location
    CHDIR "..\PortaDOOM\files"
    LET DIR_EXE$ = Paths_AddSlash$(_CWD$)
END IF

'the 'current directory' (where this executable was called *from*),
'this will be one of the folders we check when searching for files
DIM SHARED DIR_CUR$
LET DIR_CUR$ = Paths_AddSlash$(_STARTDIR$)

'=============================================================================
'MAIN:
'=============================================================================
'$INCLUDE:'inc\ui_init.bi'

COLOR BLACK, UI_FORECOLOR
LOCATE UI_SCREEN_HEIGHT, 1: PRINT SPACE$(UI_SCREEN_WIDTH);
LOCATE 1, 1: PRINT SPACE$(UI_SCREEN_WIDTH)

COLOR UI_FORECOLOR, UI_BACKCOLOR
VIEW PRINT 2 TO UI_SCREEN_HEIGHT - 1
CLS 2: PRINT ""

'process command line / enumerate games:
'-----------------------------------------------------------------------------
'$INCLUDE:'inc\cmd.bm'

select_game:
'-----------------------------------------------------------------------------
'if only one game is defined, we don't need to offer a choice
IF Games_Count =1 THEN
    CALL Games_Select(1)
    GOTO select_engine
END IF

'present game selection UI:
'walk through the list of games

CLS 2
PRINT ""
COLOR UI_FORECOLOR
PRINT " Select game choice by pressing indicated number key:"
PRINT ""

DIM H%
FOR i = 1 TO Games_Count
    COLOR AQUA: PRINT " [" + STRINT$(i) + "]: ";: COLOR YELLOW
    PRINT TRUNCATE$(Games(i).title, UI_SCREEN_WIDTH - 5 - 2)
    PRINT " " + CHR$(214) + STRING$(UI_SCREEN_WIDTH - 3, ASC_BOX_H)
    COLOR LIME
    IF Games(i).desc <> "" THEN
        COLOR LIME
        LET H% = PRINTWRAP%( _
            5, CSRLIN, UI_SCREEN_WIDTH - 6, _
            Games(i).desc _
        )
        DIM j AS LONG
        FOR j = CSRLIN - H% TO CSRLIN - 1
            LOCATE j, 2: COLOR YELLOW: PRINT CHR$(ASC_BOX_DBL_V)
        NEXT j
    END IF
    PRINT ""
NEXT i

DO
    'read the keyboard:
    LET key$ = INKEY$
    IF key$ = "" THEN _CONTINUE
    
    'is it a numeric key?
    IF ISINT(key$) = FALSE THEN
        'no, beep, and wait again
        BEEP: _CONTINUE
    END IF
    
    'is a number within range?
    IF VAL(key$) > 0 AND VAL(key$) <= Games_Count THEN
        'select that game
        Games_Select(VAL(key$))
        EXIT DO
    END IF
    
    'not a valid number key
    BEEP
LOOP

select_engine:
'-----------------------------------------------------------------------------
'search through the "ports" folder for game engines and read in their details.
'this also builds a set of look-up tables for cross-referencing tags with
'games and engines so that we can filter out incompatible engines
CALL Engines_Enumerate

'filter the known engines according to the game
'requirements and the user's preferences
CALL Engines_Filter

'if only one engine remains, no choice needed
IF Engines_ListCount = 1 THEN
    CALL Engines_Select(Engines_List(1))
    GOTO launch
END IF

'try and pick out the best engine for
'the ultra / fast / retro tier categories
CALL Engines_SelectTiers

'present engine selection UI:

CLS 2
PRINT ""
COLOR UI_FORECOLOR
PRINT " We've selected the engines compatible with your computer and the chosen game;"
PRINT " choose an engine that suits you by pressing the indicated key below:"
PRINT ""

IF Engines_SelectedUltra <> 0 THEN
    COLOR AQUA: PRINT " [U] ULTRA: ";: COLOR YELLOW
    PRINT "For high-end computers with dedicated graphics (GPU)"
    PRINT " " + CHR$(214) + STRING$(UI_SCREEN_WIDTH - 3, ASC_BOX_H)
    COLOR WHITE
    PRINT TRUNCATE$( _
        "    " + Engines(Engines_SelectedUltra).title, _
        UI_SCREEN_WIDTH - 5 _
    )
    PRINT ""
    IF Engines(Engines_SelectedUltra).desc <> "" THEN
        COLOR LIME
        LET H% = PRINTWRAP%( _
            5, CSRLIN, UI_SCREEN_WIDTH - 6, _
            Engines(Engines_SelectedUltra).desc _
        )
        FOR i = CSRLIN - H% - 2 TO CSRLIN - 1
            LOCATE i, 2: COLOR YELLOW: PRINT CHR$(ASC_BOX_DBL_V)
        NEXT i
    END IF
    PRINT ""
END IF

IF Engines_SelectedFast <> 0 THEN
    COLOR AQUA: PRINT " [F] FAST: ";: COLOR YELLOW
    PRINT "For low-end computers or laptops with integrated graphics"
    PRINT " " + CHR$(214) + STRING$(UI_SCREEN_WIDTH - 3, ASC_BOX_H)
    COLOR WHITE
    PRINT TRUNCATE$( _
        "    " + Engines(Engines_SelectedFast).title, _
        UI_SCREEN_WIDTH - 5 _
    )
    PRINT ""
    IF Engines(Engines_SelectedFast).desc <> "" THEN
        COLOR LIME
        LET H% = PRINTWRAP%( _
            5, CSRLIN, UI_SCREEN_WIDTH - 6, _
            Engines(Engines_SelectedFast).desc _
        )
        FOR i = CSRLIN - H% - 2 TO CSRLIN - 1
            LOCATE i, 2: COLOR YELLOW: PRINT CHR$(ASC_BOX_DBL_V)
        NEXT i
    END IF
    PRINT ""
END IF

IF Engines_SelectedRetro <> 0 THEN
    COLOR AQUA: PRINT " [R] RETRO: ";: COLOR YELLOW
    PRINT "If you prefer the original chunky pixel graphics"
    PRINT " " + CHR$(214) + STRING$(UI_SCREEN_WIDTH - 3, ASC_BOX_H)
    COLOR WHITE
    PRINT TRUNCATE$( _
        "    " + Engines(Engines_SelectedRetro).title, _
        UI_SCREEN_WIDTH - 5 _
    )
    PRINT ""
    IF Engines(Engines_SelectedRetro).desc <> "" THEN
        COLOR LIME
        LET H% = PRINTWRAP%( _
            5, CSRLIN, UI_SCREEN_WIDTH - 6, _
            Engines(Engines_SelectedRetro).desc _
        )
        FOR i = CSRLIN - H% - 2 TO CSRLIN - 1
            LOCATE i, 2: COLOR YELLOW: PRINT CHR$(ASC_BOX_DBL_V)
        NEXT i
    END IF
END IF

DO
    'read the keyboard:
    LET key$ = INKEY$
    IF key$ = "" THEN _CONTINUE
    
    SELECT CASE UCASE$(key$)
        CASE "U"
            IF Engines_SelectedUltra = 0 THEN BEEP: _CONTINUE
            CALL Engines_Select(Engines_SelectedUltra)
            EXIT DO
        CASE "F"
            IF Engines_SelectedFast = 0 THEN BEEP: _CONTINUE
            CALL Engines_Select(Engines_SelectedFast)
            EXIT DO
        CASE "R"
            IF Engines_SelectedRetro = 0 THEN BEEP: _CONTINUE
            CALL Engines_Select(Engines_SelectedRetro)
            EXIT DO
        CASE ELSE
            'not a valid key
            BEEP
    END SELECT
LOOP

launch:
'-----------------------------------------------------------------------------
'$INCLUDE:'inc\launch.bm'

'=============================================================================
SUB PRINTWRAP_X(x~%%, w~%%, text$)
    DIM NEWPOS%
    LET NEWPOS% = PRINTWRAP%(x~%%, CSRLIN, w~%%,text$)
END SUB

'print a message to screen, handling word-wrapping and boundaries.
'returns the final line-count actually used
'=============================================================================
FUNCTION PRINTWRAP%(x~%%, y~%%, w~%%, text$)
    LOCATE y~%%, x~%%
    
    DIM last_spc%, char~%%
    DIM line_len%
    DIM line_count%
    LET line_count% = 1
    
    LET text$ = text$ + " "
    
    DIM i AS _UNSIGNED LONG
    LET i = 1: LET last_spc% = 1
    DO
        'get a single character from the source string
        LET char~%% = ASC(text$, i)
        'is this a space?
        IF char~%% = ASC_SPC THEN
            'does the current word over-hang?
            IF line_len% >= w~%% THEN
                'move to the next line
                LET y~%% = y~%% + 1
                LOCATE y~%%, x~%%
                
                LET line_count% = line_count% + 1
                
                'print the current word & space and continue
                PRINT MID$(text$, last_spc% + 1, i - last_spc% - 1);
                'the length of the new line is now this word+space
                LET line_len% = i - last_spc%
                'set this space as the next available break-point
                LET last_spc% = i
            ELSE
                PRINT MID$(text$, last_spc%, i - last_spc%);
                
                LET last_spc% = i
                LET line_len% = line_len% + 1
            END IF
        ELSE
            LET line_len% = line_len% + 1
        END IF
        
        LET i = i + 1
    LOOP WHILE i <= LEN(text$)
    PRINT ""
    
    LET PRINTWRAP% = line_count%
END FUNCTION

'=============================================================================
'PortaDOOM Launcher declarations:
'-----------------------------------------------------------------------------
'$INCLUDE:'inc\error.bm'
'$INCLUDE:'inc\tags.bm'
'$INCLUDE:'inc\games.bm'
'$INCLUDE:'inc\engines.bm'
'$INCLUDE:'inc\iwads.bm'
'$INCLUDE:'inc\wads.bm'

'third-party library functions:
'-----------------------------------------------------------------------------
'$INCLUDE:'lib\INI-Manager\ini.bm'

'our library functions:
'-----------------------------------------------------------------------------
'$INCLUDE:'lib\strings.bm'
'$INCLUDE:'lib\paths.bm'
'$INCLUDE:'lib\reg.bm'
