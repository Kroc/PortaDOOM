'copyright (C) Kroc Camen 2018, BSD 2-clause

'=============================================================================
'launch the selected game, with the selected engine, with the selected
'parameters, any mods (if selected) and so forth. we need to build the
'right command-line to do all of this
'
'   [01]: save game path
'   [02]: engine executable
'   [03]: config file
'   [04]: compatibility level
'   [05]: IWAD
'   [06]: PWAD
'   [07]: DEH & BEX
'   [08]: demo playback
'   [09]: warp & skill
'   [10]: execute scripts
'   [11]: resolution & full-screen

_ECHO ""
_ECHO "     PortaDOOM Launcher"
_ECHO ""

'use the `START` command to launch the engine without freezing up the launcher
LET CMD$ = "START"

'NOTE: many doom engines save their config files in the 'current directory',
'which is typically expected to be that of the executable. however, we want
'to separate user-data (such as save-games) from the engines. whilst we can
'change the save directory, config files will still be dumped in the 'current
'directory'.

'we therefore need to change the current directory and rewrite
'all the WAD / file paths to be relative from there!

'this is the relative path from the WAD's
'save folder back to this executable
DIM SHARED FIX_PATH$
LET FIX_PATH$ = "..\..\..\"

'we will remember the directory of the last file
'(used for finding side-by-side WADs)
DIM SHARED DIR_PREV$
'other directories that will be remembered as we go
DIM SHARED DIR_IWAD$
DIM SHARED DIR_PWAD$

'-----------------------------------------------------------------------------
'[01] save game path:
'-----------------------------------------------------------------------------
'the "saves" folder should exist (it's part of PortaDOOM),
'but just in case, check
IF NOT _DIREXISTS(DIR_SAVES$) THEN
    'folder is missing? attempt to make it, but be aware
    'of that potentially failing (read-only media?)
    ON ERROR GOTO err_MkDir
    MKDIR (DIR_SAVES$)
    ON ERROR GOTO 0
END IF

'add the save-folder name for the selected engine; there can be
'multiple folder names and IDs for engines, such as 32/64-bit and
'differing versions, so a common save name is provided in the INI
DIM DIR_SAVE_ENGINE$
LET DIR_SAVE_ENGINE$ = DIR_SAVES$ + Paths_AddSlash$(Engines_Selected.save)

'does this folder exist?
IF NOT _DIREXISTS(DIR_SAVE_ENGINE$) THEN
    'folder is missing? attempt to make it, but be aware
    'of that potentially failing (read-only media?)
    ON ERROR GOTO err_MkDir
    MKDIR (DIR_SAVE_ENGINE$)
    ON ERROR GOTO 0
END IF

'the saves folder will contain a sub-folder for each engine (above),
'and then another sub-folder for the IWAD or PWAD
DIM DIR_SAVE_GAME$

'if the game is using a PWAD,
'use that name for the save folder
IF LEN(Games_Selected.pwad) <> 0 THEN
    LET DIR_SAVE_GAME$ = DIR_SAVE_ENGINE$ _
        + Paths_GetFileBaseName$(Games_Selected.pwad)
ELSE
    'otherwise just use the IWAD name
    LET DIR_SAVE_GAME$ = DIR_SAVE_ENGINE$ _
        + Paths_GetFileBaseName$(Games_Selected.iwad)
END IF

'does this folder exist?
IF NOT _DIREXISTS(DIR_SAVE_GAME$) THEN
    'folder is missing? attempt to make it, but be aware
    'of that potentially failing (read-only media?)
    ON ERROR GOTO err_MkDir
    MKDIR (DIR_SAVE_GAME$)
    ON ERROR GOTO 0
END IF

'ensure it ends with a slash
'TODO: Add mod support to this
LET DIR_SAVE_GAME$ = Paths_AddSlash$(DIR_SAVE_GAME$)

'set the directory for the game engine to assume as default; note that from
'here on, all paths on the command-line are relative to save-game folder!
LET CMD$ = CMD$ + " /D " + CHR$(34) + DIR_SAVE_GAME$ + CHR$(34)

'----------------------------------------------------------------------------
'[02] engine executable:
'-----------------------------------------------------------------------------
DIM DIR_ENGINE$
LET DIR_ENGINE$ = DIR_PORTS$ + Paths_AddSlash$(Engines_Selected.folder)

'add the engine executable to the command-line
LET CMD$ = CMD$ + " " + CHR$(34) _
         + Launch_FixPath$(DIR_ENGINE$) + RTRIM$(Engines_Selected.exe) _
         + CHR$(34)
         
_ECHO "         port : " + RTRIM$(Engines_Selected.title)
_ECHO "       engine : " + DIR_ENGINE$ + RTRIM$(Engines_Selected.exe)

'-----------------------------------------------------------------------------
'[03] config file:
'-----------------------------------------------------------------------------
DIM CMD_CONFIG$

'which file-extension does the engine use? ZDoom-based engines
'use ".ini", everything else ".cfg" (including DOOM64EX)
DIM cfg$
IF Engines_Selected.kin >= KIN_Z THEN
    LET cfg$ = ".ini"
ELSE
    LET cfg$ = ".cfg"
END IF

'define the default config file path, as we will need to copy this if the
'engine's config file doesn't exist yet. note that this leaves off the
'file extension, for now
DIM cfg_default$
LET cfg_default$ = DIR_CONFIG$ + "default." + RTRIM$(Engines_Selected.cfg)

'was the command-line parameter given to use the default config-file?
IF CMD_DEFAULT` THEN
    'set the path to the default config file (sans-extension)
    LET CMD_CONFIG$ = cfg_default$
ELSE
    'build the path to the user's config file (for selected engine)
    'note that this leaves off the file extension, for now
    DIM cfg_engine$
    LET cfg_engine$ = DIR_SAVE_ENGINE$ _
                    + "config." + RTRIM$(Engines_Selected.cfg)

    'if the user's config file doesn't exist, make a copy of the default
    IF NOT _FILEEXISTS(cfg_engine$ + cfg$) THEN
        'copy across the default config file
        'FIXME: capture error here
        SHELL "COPY /Y " _
            + CHR$(34) + cfg_default$ + cfg$ + CHR$(34) + " /A " _
            + CHR$(34) + cfg_engine$ + cfg$ + CHR$(34) + " /A"
        
        'vanilla engines store non-original settings in an extra config file
        IF Engines_Selected.kin = KIN_V THEN
            'FIXME: capture error here
            SHELL "COPY /Y " _
                + CHR$(34) + cfg_default$ + ".extra" + cfg$ + CHR$(34) + " /A " _
                + CHR$(34) + cfg_engine$ + ".extra" + cfg$ + CHR$(34) + " /A"
        END IF
    END IF
    
    LET CMD_CONFIG$ = cfg_engine$
END IF

'add the command-line parameter to select the config file
LET CMD$ = CMD$ + " -config " _
         + CHR$(34) + Launch_FixPath$(CMD_CONFIG$) + cfg$ + CHR$(34)

'vanilla engines (Chocolate-Doom, Crispy-Doom) store non-original settings
'in an extra config file (this is why we omit the file extension until now)
IF Engines_Selected.kin = KIN_V THEN
    LET CMD$ = CMD$ + " -extraconfig " _
             + CHR$(34) + FIX_PATH$ + CMD_CONFIG$ + ".extra" + cfg$ + CHR$(34)
    
    _ECHO " -extraconfig : " + CMD_CONFIG$ + ".extra" + cfg$
END IF

_ECHO "      -config : " + CMD_CONFIG$ + cfg$

'-----------------------------------------------------------------------------
'[04] compatibility level:
'-----------------------------------------------------------------------------
IF Games_Selected.cmplvl >= 0 THEN
    'TODO: should this only be applied to Boom-based engines?
    LET CMD$ = CMD$ + " -complevel " + STRINT$(Games_Selected.cmplvl)
    _ECHO "   -complevel : " + STRINT$(Games_Selected.cmplvl)
END IF

'-----------------------------------------------------------------------------
'[05] IWAD:
'-----------------------------------------------------------------------------
'try and locate the IWAD path
'FIXME: handle FreeDOOM replacement
LET CMD_IWAD$ = WADs_GetIWADPath$(RTRIM$(Games_Selected.iwad))
LET DIR_IWAD$ = Paths_GetPath$(CMD_IWAD$)

LET CMD$ = CMD$ + " -iwad " _
         + CHR$(34) + Launch_FixPath$(CMD_IWAD$) + CHR$(34)
_ECHO "        -iwad : " + CMD_IWAD$

'-----------------------------------------------------------------------------
'[06] PWAD:
'-----------------------------------------------------------------------------
LET CMD_PWAD$ = RTRIM$(Games_Selected.pwad)
IF CMD_PWAD$ <> "" THEN
    LET CMD_PWAD$ = WADs_GetPWADPath$(CMD_PWAD$)
    LET DIR_PWAD$ = Paths_GetPath$(CMD_PWAD$)
    
    _ECHO "         pwad : " + CMD_PWAD$
END IF

'-----------------------------------------------------------------------------
'[07] DEH & BEX:
'-----------------------------------------------------------------------------
'has a DEH file been specified?
LET CMD_DEH$ = RTRIM$(Games_Selected.deh)
IF CMD_DEH$ <> "" THEN
    'find the DEH file
    LET CMD_DEH$ = WADs_Find$(CMD_DEH$)
    'add it to the command-line
    LET CMD$ = CMD$ + " -deh " _
             + CHR$(34) + Launch_FixPath$(CMD_DEH$) + CHR$(34)
    'and announce
    _ECHO "         -deh : " + CMD_DEH$
END IF

LET CMD_BEX$ = RTRIM$(Games_Selected.bex)
IF CMD_BEX$ <> "" THEN
    'find the BEX file
    LET CMD_BEX$ = WADs_Find$(CMD_BEX$)
    LET CMD$ = CMD$ + " -bex " _
             + CHR$(34) + Launch_FixPath$(CMD_BEX$) + CHR$(34)
    _ECHO "         -bex : " + CMD_BEX$
END IF

'-----------------------------------------------------------------------------
'[08] demo playback:
'-----------------------------------------------------------------------------
IF LEN(CMD_DEMO$) <> 0 THEN
    'try and find the file:
    DIM demo$
    'first try the special demos folder
    LET demo$ = DIR_DEMOS$ + CMD_DEMO$
    'if it doesn't exist there...
    IF NOT _FILEEXISTS(demo$) THEN
        'try the folder from which the launcher was called;
        'e.g. if the demo file is stored alongside the PWAD
        LET demo$ = DIR_CUR$ + CMD_DEMO$
        IF NOT _FILEEXISTS(demo$) THEN
            'FIXME: handle demo file missing
        END IF
    END IF
    
    'add the command-line param to play the demo
    LET CMD$ = CMD$ + " -playdemo " _
             + CHR$(34) + Launch_FixPath$(CMD_DEMO$) + CHR$(34)
    _ECHO "    -playdemo : " + CMD_DEMO$
END IF

'-----------------------------------------------------------------------------
'[09] warp & skill:
'-----------------------------------------------------------------------------
'TODO

'-----------------------------------------------------------------------------
'[10] execute scripts:
'-----------------------------------------------------------------------------
'TODO

'-----------------------------------------------------------------------------
'[11] resolution & full-screen:
'-----------------------------------------------------------------------------
'TODO

'-----------------------------------------------------------------------------
'[12] launch!
'-----------------------------------------------------------------------------
SHELL CMD$

SYSTEM

'=============================================================================

err_MkDir:
_ECHO ""
_ECHO "ERROR: could not create required folder!"
_ECHO ""
SYSTEM 1


'=============================================================================
FUNCTION Launch_FixPath$(path$)
    'is the path absolute?
    IF Paths_IsAbsolute(path$) THEN
        'even though the path is absolute, a relative path may have been
        'appended to the end, so normalise the path regardless
        LET Launch_FixPath$ = Paths_Canonicalize$(path$)
    ELSE
        LET Launch_FixPath$ = FIX_PATH$ + path$
    END IF
END FUNCTION
