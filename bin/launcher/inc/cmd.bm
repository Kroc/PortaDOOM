'copyright (C) Kroc Camen 2018, BSD 2-clause

'display help?
'=============================================================================
DIM CMD$
LET CMD$ = LCASE$(COMMAND$(1))

IF CMD$ = "/?" _
OR CMD$ = "/h" _
OR CMD$ = "/help" _
OR CMD$ = "-?" _
OR CMD$ = "-h" _
OR CMD$ = "-help" _
OR CMD$ = "--help" _
THEN
    'TODO: console help
    SYSTEM 0
END IF

'read command-line switches:
'=============================================================================
DIM SHARED CMD_USE$ '....a specific engine-id to use
DIM SHARED CMD_REQ$ '....a tag-list of engine requirements
DIM SHARED CMD_32` '.....always use 32-bit executable on 64-bit system
DIM SHARED CMD_SW` '.....require 8-bit (typically "software") rendering
DIM SHARED CMD_DEFAULT` 'should default config file be used?
DIM SHARED CMD_IWAD$ '...IWAD to use
DIM SHARED CMD_PWAD$ '...optional PWAD to play
DIM SHARED CMD_DEH$ '....optional ".DEH" (DeHackEd) file to include
DIM SHARED CMD_BEX$ '....optional ".BEX" (Boom-EXtneded DeHackEd) file to include
DIM SHARED CMD_DEMO$ '...demo lump to play
DIM SHARED CMD_WARP$ '...episode/map number to warp to
DIM SHARED CMD_SKILL$ '..skill level number
DIM SHARED CMD_CMPLVL$ '.compatibility level
DIM SHARED CMD_EXEC$ '...extra script to execute

'FIXME: do not allow mix of command params & INI files?
LET i = 1
DO WHILE COMMAND$(i) <> ""
    SELECT CASE UCASE$(COMMAND$(i))
        'just capture the param values, we will parse & validate later
        CASE "/USE": LET i = i + 1: LET CMD_USE$ = COMMAND$(i)
        CASE "/REQ": LET i = i + 1: LET CMD_REQ$ = COMMAND$(i)
        CASE "/32": LET CMD_32` = TRUE
        CASE "/SW": LET CMD_SW` = TRUE
        CASE "/DEFAULT": LET CMD_DEFAULT` = TRUE
        CASE "/IWAD": LET i = i + 1: LET CMD_IWAD$ = COMMAND$(i)
        CASE "/PWAD": LET i = i + 1: LET CMD_PWAD$ = COMMAND$(i)
        CASE "/DEH": LET i = i + 1: LET CMD_DEH$ = COMMAND$(i)
        CASE "/BEX": LET i = i + 1: LET CMD_BEX$ = COMMAND$(i)
        CASE "/DEMO": LET i = i + 1: LET CMD_DEMO$ = COMMAND$(i)
        CASE "/WARP": LET i = i + 1: LET CMD_WARP$ = COMMAND$(i)
        CASE "/SKILL": LET i = i + 1: LET CMD_SKILL$ = COMMAND$(i)
        CASE "/CMPLVL": LET i = i + 1: LET CMD_CMPLVL$ = COMMAND$(i)
        CASE "/EXEC": LET i = i + 1: LET CMD_EXEC$ = COMMAND$(i)
        CASE "--"
            'FIXME: handle file list
        CASE ELSE
            'if an INI file is given, load the game definitions from it
            IF UCASE$(Paths_GetFileExtension$(COMMAND$(i))) = "INI" THEN
                'attempt to locate the INI file
                'FIXME: handle error
                Games_EnumerateINI(COMMAND$(i))
            END IF
            'FIXME: invalid param?
    END SELECT
    LET i = i + 1
LOOP
_ECHO ""

'is there enough parameters to define a game from the command-line?
IF LEN(CMD_IWAD$) <> 0 _
OR LEN(CMD_PWAD$) <> 0 _
THEN
    Games_EnumerateCMD
END IF

'=============================================================================

'NOTE: many doom engines save their config files in the 'current directory',
'which is typically expected to be that of the executable. However, we want
'to separate user-data (such as save-games) from the engines. whilst we can
'change the save directory, config files will still be dumped in the 'current
'directory'.

'we therefore need to change the current directory and rewrite
'all the WAD / file paths to be relative from there!

'the saves folder will contain a sub-folder for each engine,
'and then another sub-folder for the IWAD or PWAD
DIM SHARED DIR_SAVE$

'this is the relative path from the WAD's
'save folder back to this executable
DIM SHARED FIX_PATH$
LET FIX_PATH$ = "..\..\.."

'we will remember the directory of the last file
'(used for finding side-by-side WADs)
DIM SHARED DIR_PREV$
'other directories that will be remembered as we go
DIM SHARED DIR_IWAD$
DIM SHARED DIR_PWAD$

'when an engine is selected, this will be the directory for it
DIM SHARED DIR_ENGINE$

DIM SHARED IWAD$
DIM SHARED PWAD$
