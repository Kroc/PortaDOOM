'copyright (C) Kroc Camen 2018, BSD 2-clause

$CONSOLE
_CONSOLE OFF

'hide the main window until we have something rendered on it first
$SCREENHIDE

'disallow resizing of the window. this adds a great deal of complexity for
'very little gain right now and there isn't an easy way to restore a window
'to its 1:1 size
$RESIZE:OFF

'set ALT+ENTER to switch to 4:3 aspect ratio, with anti-aliasing;
'many thanks Fellippe Heitor for implementing this!
_ALLOWFULLSCREEN _SQUAREPIXELS, _SMOOTH

'=============================================================================

'$INCLUDE:'lib\consts.bi'
'$INCLUDE:'lib\reg.bi'

'$INCLUDE:'lib\strgui\strgui.bi'
'$INCLUDE:'lib\ui.bi'

'$INCLUDE:'lib\INI-Manager\ini.bi'

'=============================================================================

'$INCLUDE:'inc\tags.bi'
'$INCLUDE:'inc\games.bi'
'$INCLUDE:'inc\engines.bi'

'-----------------------------------------------------------------------------

'generic 'index' counter
DIM i AS _UNSIGNED LONG

'the folder where config files are kept
DIM SHARED DIR_CONFIG$
LET DIR_CONFIG$ = "config\"

'folder for the 'source ports' -- game engines
DIM SHARED DIR_PORTS$
LET DIR_PORTS$ = "ports\"

'folder for the user's save files
DIM SHARED DIR_SAVES$
LET DIR_SAVES$ = "saves\"

'folder for external executables;
'such as patching utilities
DIM SHARED DIR_TOOLS$
LET DIR_TOOLS$ = "tools\"

'folder for WADs -- the game files to play
DIM SHARED DIR_WADS$
LET DIR_WADS$ = "wads\"

'folder for demo-files (i.e. recorded runs)
DIM SHARED DIR_DEMOS$
LET DIR_DEMOS$ = "demos\"

'folder for gameplay mods
DIM SHARED DIR_MODS$
LET DIR_MODS$ = "mods\"

'read system info:
'-----------------------------------------------------------------------------
'get CPU type for the system (32 / 64-bit)
DIM SHARED CPU_BIT AS _UNSIGNED LONG
'default to 32-bit as this will always work
LET CPU_BIT = 32
'check the environment variables for CPU type:
'this one would only be true if we are a 64-bit executable also
IF ENVIRON$("PROCESSOR_ARCHITECTURE") = "AMD64" THEN LET CPU_BIT = 64
'detect 64-bit system from a 32-bit executable (WOW64)
IF ENVIRON$("PROCESSOR_ARCHITEW6432") = "AMD64" THEN LET CPU_BIT = 64

'directory of this executable (regardless of where it was called from)
DIM SHARED DIR_EXE$
LET DIR_EXE$ = Paths_AddSlash$(_CWD$)

'now, is this executable running from the source code folder or from within
'PortaDOOM's folder (as it would be in releases)? since these are different
'directories, and the launcher operates on the assumption that it's in the
'"PortaDOOM\files" folder, we need to re-route things when running from
'development builds. check to see if our parent folder is not "files":

IF Paths_GetFolderName$(DIR_EXE$) = "launcher" THEN
    'change directory to the expected location
    CHDIR "..\..\PortaDOOM\files"
    LET DIR_EXE$ = Paths_AddSlash$(_CWD$)
END IF

'the 'current directory' (where this executable was called *from*),
'this will be one of the folders we check when searching for files
DIM SHARED DIR_CUR$
LET DIR_CUR$ = Paths_AddSlash$(_STARTDIR$)

_ECHO ""
_ECHO "launcher.exe : " + DIR_EXE$
_ECHO "current dir  : " + DIR_CUR$
_ECHO ""


'=============================================================================
'MAIN:
'=============================================================================
_TITLE "PortaDOOM Launcher"

'set graphics mode, screen size, colour and clear screen
SCREEN SCREEN_MODE, , 0, 0: WIDTH SCREEN_WIDTH, SCREEN_HEIGHT

'print base UI:
DIM SHARED ui_titlebar AS _UNSIGNED _BYTE
DIM SHARED ui_statusbar AS _UNSIGNED _BYTE
LET ui_titlebar = UI.DesktopBars.Add(1, BLACK, LTGREY, _TITLE$, "")
LET ui_statusbar = UI.DesktopBars.Add(_HEIGHT, BLACK, LTGREY, "", "...")
CALL UI.Render

_SCREENSHOW

'process command line / enumerate games:
'-----------------------------------------------------------------------------
IF _COMMANDCOUNT = 0 THEN
    'TODO: if there are no command-line parameters, we present a UI to build
    '      a custom game configuration?
    SYSTEM 1
END IF

'read command-line parameters
'$INCLUDE:'inc\cmd.bm'

'select game:
'-----------------------------------------------------------------------------
'TODO: game selection window, if there are more than 1 games defined
LET game% = 1

'enumerate engines:
'-----------------------------------------------------------------------------
'search through the "ports" folder for game engines and read in their details.
'this also builds a set of look-up tables for cross-referencing tags with
'games and engines so that we can filter out incompatible engines
CALL Engines_Enumerate

'filter the engines to suit the chosen game:
'-----------------------------------------------------------------------------
'there is no simple description for this cross-referencing process...
CALL UI.DesktopBars.Update(ui_statusbar, "Reticulating Splines...", "")
CALL UI.Render

_ECHO "": _ECHO ""

'test each engine against the game's requirements:
FOR engine% = 1 TO UBOUND(Engines)
    _ECHO ""
    _ECHO "* testing engine #" + STRINT$(engine%) + " " + Engines(engine%).id
    
    'are we looking for a specific engine-id,
    'e.g. the `/USE` command-line parameter
    IF CMD_USE$ <> "" THEN
        IF _TRIM$(Engines(engine%).id) <> CMD_USE$ THEN
            _ECHO "": _ECHO "! no-match (id): " + Engines(engine%).id
            _CONTINUE
        END IF
    END IF
    
    'is the binary compatible with this machine? (32 / 64-bit)
    'if we are a 32-bit machine, we can't run 64-bit software
    _ECHO "- Bit:" + STRINT$(Engines(engine%).bit)
    IF CPU_BIT = 32 AND Engines(engine%).bit = 64 THEN
        _ECHO "": _ECHO "! no-match (bit): " + Engines(engine%).id
        _CONTINUE
    END IF
    
    '-------------------------------------------------------------------------
    
    'TODO: validate engine IWAD / PWAD support
    
    
    '-------------------------------------------------------------------------
    
    'does this engine provide all the features required by the game?
    '(walk along the tags on the engine)
    FOR tag% = 1 TO UBOUND(Tags)
        _ECHO "- Tag:" + Tags(tag%) _
            + " EngineTags=" + STRINT$(EngineTags(engine%, tag%)) _
            + " GameTags=" + STRINT$(GameTags(game%, tag%))
        
        'check the game's requirement for this tag
        SELECT CASE GameTags(game%, tag%)
            'the *game* requires this from the engine
            CASE 1:
                'if the *engine* does not provide this feature,
                'move on to the next engine
                IF EngineTags(engine%, tag%) = 0 THEN
                    _ECHO "": _ECHO "! no-match (tag): " + Engines(engine%).id
                    '`_CONTINUE` does not support breaking nested loops
                    LET engine% = engine% + 1: GOTO NextEngine
                END IF
        END SELECT
    NEXT tag%
    
    '-------------------------------------------------------------------------
    
    'all tags have been checked, meaning that this engine is a candidate
    LET EngineTags(engine%, 0) = 1
    'add this tag to the valid short-list
    LET EngineListCount% = EngineListCount% + 1
    REDIM _PRESERVE EngineList(1 TO EngineListCount%) AS INTEGER
    LET EngineList(EngineListCount%) = engine%
    
    _ECHO ""
    _ECHO "match: " + Engines(engine%).id

    NextEngine:
NEXT engine%

'print a list of the candidate engines:
_ECHO ""
_ECHO "Candidate Engines:"
_ECHO "------------------"
FOR engine% = 1 TO EngineListCount%
    _ECHO "- " + Engines(EngineList(engine%)).id + ": " + Engines(EngineList(engine%)).name
NEXT engine%
_ECHO ""

'if, after removing all incompatible engines, there remains only one,
'we can skip over the selection process
IF EngineListCount% = 1 THEN
    LET engine% = EngineList(1)
    Engines_Select engine%
    
    GOTO SummaryScreen
END IF

'select the 'best' engine by default
LET engine% = EngineList(1)
Engines_Select engine%


SummaryScreen:
'=============================================================================
REM '$INCLUDE:'inc\ui_summary.bm'

SLEEP
SYSTEM

launch:
'=============================================================================

'NOTE: many doom engines save their config files in the 'current directory',
'which is typically expected to be that of the executable. However, we want
'to separate user-data (such as save-games) from the engines. whilst we can
'change the save directory, config files will still be dumped in the 'current
'directory'.

'we therefore need to change the current directory and rewrite
'all the WAD / file paths to be relative from there!

'the saves folder will contain a sub-folder for each engine,
'and then another sub-folder for the IWAD or PWAD
DIM SHARED DIR_SAVE$

'this is the relative path from the WAD's
'save folder back to this executable
DIM SHARED FIX_PATH$
LET FIX_PATH$ = "..\..\.."

'we will remember the directory of the last file
'(used for finding side-by-side WADs)
DIM SHARED DIR_PREV$
'other directories that will be remembered as we go
DIM SHARED DIR_IWAD$
DIM SHARED DIR_PWAD$

'when an engine is selected, this will be the directory for it
DIM SHARED DIR_ENGINE$

DIM SHARED IWAD$
DIM SHARED PWAD$


'use the `START` command to launch the engine without freezing up the launcher
LET CMD$ = "START "
'set the directory for the game engine to assume as default
LET CMD$ = CMD$ + "/D " + CHR$(34) + DIR_SAVE$ + CHR$(34) + " "

'''specify the engine executable
''LET CMD$ = CMD$ + CHR$(34) _
''         + FIX_PATH$ + DIR_PORTS$ + Engines(engine%).folder + "\" _
''         + Engines(engine%).exe + CHR$(34) + " "

SLEEP
SYSTEM

'=============================================================================

'$INCLUDE:'inc\tags.bm'
'$INCLUDE:'inc\games.bm'
'$INCLUDE:'inc\engines.bm'
'$INCLUDE:'inc\wads.bm'

'=============================================================================
'$INCLUDE:'lib\INI-Manager\ini.bm'
'$INCLUDE:'lib\strings.bm'
'$INCLUDE:'lib\paths.bm'
'$INCLUDE:'lib\reg.bm'
'$INCLUDE:'lib\strgui\strgui.bm'
'$INCLUDE:'lib\ui.bm'
 
