'copyright (C) Kroc Camen 2018-2023, BSD 2-clause
'iwads.bm : manage IWADs

'IWADs in PortaDOOM are not automatically enumerated, like engines, as we
'would technically have to search all folders in "wads/". also we have to
'deal with IWADs missing, for when we want to search Steam / GOG installs.
'therefore the IWAD pool of meta-data is built on-demand with files for
'classic IWADs present
'
'IWADs are tricky because they represent a commonly needed resource
'for other WADs, but are also games themselves

'   IWADs_FindMeta&(path$)                      -> LONG
'   IWADs_EnumerateINI(INIFile$)
'   IWADs_Add(...)
'   IWADs_GetPath$(iwad$)                       -> STRING
'   IWADs_Select()

'match an IWAD name to its meta-data entry (load meta-data if necessary)
'returns an index into `IWADs` array, or 0 for not-found
'=============================================================================
FUNCTION IWADs_FindMeta&(iwad$)
    'quick-out for in-lining
    IF iwad$ = "" THEN EXIT FUNCTION

    'note that `file_path$` could be a full path, even absolute;
    'take just the file-name to search. it's assumed that all IWADs have
    'have unique file-names, something the DOOM community does adhere to
    
    DIM file_name$
    LET file_name$ = UCASE$(Paths_GetFileName$(iwad$))
    
    'if there are no IWADs defined, we'll have to go straight to disk
    IF IWADs_Count = 0 THEN GOTO loadMetaData
    
    'walk through the existing IWAD records
    'searching for the given file name
    DIM i AS LONG
    FOR i = 1 TO IWADs_Count
        'get the IWAD file name from the record
        DIM iwad_name$
        LET iwad_name$ = UCASE$(Paths_GetFileName$(IWADs(i).path))
        'does the IWAD file-name match?
        IF iwad_name$ = file_name$ THEN
            'a record for this IWAD already exists,
            'return its index
            LET IWADs_FindMeta& = i
            EXIT FUNCTION
        END IF
    NEXT i
    
    'IWAD was not found!
    
loadMetaData:
    '-------------------------------------------------------------------------
    'try and locate an INI file containing IWAD meta-data
    'TODO: do we work with the whole path, or just the file-name?
    
    'convert the WAD file-name to an INI file-name
    DIM ini_file$
    LET ini_file$ = LCASE$(Paths_GetFileBaseName$(file_name$)) + ".ini"
    
    'load IWAD meta-data from the INI file (if present)
    'TODO: if no IWAD meta-data file found, build some rough data ad-hoc?
    'TODO: check the current INI file when reading from a game definition
    LET IWADs_FindMeta& = IWADs_EnumerateINI&(ini_file$)
    
    'TODO: was meta-data found?
END FUNCTION

'given an INI file, read an IWAD definition from it
'=============================================================================
FUNCTION IWADs_EnumerateINI&(ini_path$)
    'locate the INI file:
    '-------------------------------------------------------------------------
    DIM path$
    LET path$ = ini_path$
    
    'is the given path absolute?
    IF Paths_IsAbsolute(path$) THEN
        'does the file exist?
        IF _FILEEXISTS(path$) THEN GOTO readINI
    ELSE
        'search for the file:
        
        'if game definitions were loaded
        'from an INI file, check its path
        IF DIR_INI$ <> "" THEN
            LET path$ = DIR_INI$ + ini_path$
            IF _FILEEXISTS(path$) THEN GOTO readINI
        END IF
        
        'check the 'current' directory
        '-- i.e. the directory the launcher was called *from*
        LET path$ = DIR_CUR$ + ini_path$
        IF _FILEEXISTS(path$) THEN GOTO readINI
        
        'check the base WADs directory
        LET path$ = DIR_WADS$ + ini_path$
        IF _FILEEXISTS(path$) THEN GOTO readINI
    END IF
    
    'file not found -- return 0
    EXIT FUNCTION
    
readINI:
    '-------------------------------------------------------------------------
    DIM iwad_id$
    LET iwad_id$ = ReadIniUTF8$(path$, "iwad", "id")
    
    DIM iwad_name$
    LET iwad_name$ = ReadIniUTF8$("", "iwad", "name")
    
    DIM iwad_type%
    SELECT CASE UCASE$(ReadIniUTF8$(path$, "iwad", "type"))
        CASE "DOOM": LET iwad_type% = TYPE_DOOM
        CASE "DOOM2": LET iwad_type% = TYPE_DOOM2
        CASE "HERETIC": LET iwad_type% = TYPE_HERETIC
        CASE "HEXEN": LET iwad_type% = TYPE_HEXEN
        CASE "STRIFE": LET iwad_type% = TYPE_STRIFE
        CASE "CHEX": LET iwad_type% = TYPE_CHEX
        CASE "DOOM64": LET iwad_type% = TYPE_DOOM64
        CASE "HARM1": LET iwad_type% = TYPE_HARM1
        CASE "ROTWB": LET iwad_type% = TYPE_ROTWB
        CASE "IWAD", "IPK3": LET iwad_type% = TYPE_IPK3
        CASE ELSE
            LET iwad_type% = TYPE_DOOM2
    END SELECT
    
    DIM iwad_title$
    LET iwad_title$ = ReadIniUTF8$("", "iwad", "title")
    DIM iwad_path$
    LET iwad_path$ = ReadIniUTF8$("", "iwad", "path")
    DIM iwad_deh$
    LET iwad_deh$ = ReadIniUTF8$("", "iwad", "deh")
    DIM iwad_tags$
    LET iwad_tags$ = ReadIniUTF8$("", "iwad", "tags")
    
    DIM iwad_skill1$
    LET iwad_skill1$ = ReadIniUTF8$("", "iwad.skills", "1")
    DIM iwad_skill2$
    LET iwad_skill2$ = ReadIniUTF8$("", "iwad.skills", "2")
    DIM iwad_skill3$
    LET iwad_skill3$ = ReadIniUTF8$("", "iwad.skills", "3")
    DIM iwad_skill4$
    LET iwad_skill4$ = ReadIniUTF8$("", "iwad.skills", "4")
    DIM iwad_skill5$
    LET iwad_skill5$ = ReadIniUTF8$("", "iwad.skills", "5")
    DIM iwad_skill6$
    LET iwad_skill6$ = ReadIniUTF8$("", "iwad.skills", "6")
    DIM iwad_skill7$
    LET iwad_skill7$ = ReadIniUTF8$("", "iwad.skills", "7")
    DIM iwad_skill8$
    LET iwad_skill8$ = ReadIniUTF8$("", "iwad.skills", "8")
    DIM iwad_skill9$
    LET iwad_skill9$ = ReadIniUTF8$("", "iwad.skills", "9")
    
    LET IWADs_EnumerateINI& = IWADs_Add&( _
        iwad_id$, iwad_name$, iwad_type%, _
        iwad_title$, iwad_path$, iwad_deh$, iwad_tags$, _
        iwad_skill1$, iwad_skill2$, iwad_skill3$, iwad_skill4$, _
        iwad_skill5$, iwad_skill6$, iwad_skill7$, iwad_skill8$, _
        iwad_skill9$ _
    )
END FUNCTION

'=============================================================================
FUNCTION IWADs_Add&( _
    id$, name$, game_type%, title$, path$, deh$, tags$, _
    skill1$, skill2$, skill3$, skill4$, skill5$, _
    skill6$, skill7$, skill8$, skill9$ _
)
    'increase the number of IWAD entries
    LET IWADs_Count = IWADs_Count + 1
    REDIM _PRESERVE IWADs(1 TO IWADs_Count) AS IWAD
    'we'll return this index
    LET IWADs_Add& = IWADs_Count
    
    'process the tag list
    CALL Tags_Add(tags$)
    
    LET IWADs(IWADs_Count).id = id$
    LET IWADs(IWADs_Count).name = name$
    LET IWADs(IWADs_Count).type = game_type%
    LET IWADs(IWADs_Count).title = title$
    LET IWADs(IWADs_Count).path = path$
    LET IWADs(IWADs_Count).deh = deh$
    LET IWADs(IWADs_Count).tags = tags$
    LET IWADs(IWADs_Count).skill1 = skill1$
    LET IWADs(IWADs_Count).skill2 = skill2$
    LET IWADs(IWADs_Count).skill3 = skill3$
    LET IWADs(IWADs_Count).skill4 = skill4$
    LET IWADs(IWADs_Count).skill5 = skill5$
    LET IWADs(IWADs_Count).skill6 = skill6$
    LET IWADs(IWADs_Count).skill7 = skill7$
    LET IWADs(IWADs_Count).skill8 = skill8$
    LET IWADs(IWADs_Count).skill9 = skill9$
    
END FUNCTION

'locate an IWAD and return its path -- handles Steam / GOG IWADs
'=============================================================================
FUNCTION IWADs_GetPath$(iwad$)
    DIM iwad_path$
    LET iwad_path$ = iwad$
    
    'look for an IWAD ini file that gives the path
    DIM iwad_id&
    LET iwad_id& = IWADs_FindMeta&(iwad$)
    IF iwad_id& > 0 THEN
        'use the IWAD path given in the IWAD ini definition
        LET iwad$ = IWADs(iwad_id&).path
    END IF
    
    'is the given path absolute?
    IF Paths_IsAbsolute(iwad$) THEN
        'does the file exist?
        IF _FILEEXISTS(iwad$) THEN
            LET IWADs_GetPath$ = iwad$
            EXIT FUNCTION
        END IF
    END IF
    
    'search for the file:
    
    'if game definitions were loaded
    'from an INI file, check its path
    IF DIR_INI$ <> "" THEN
        LET iwad_path$ = DIR_INI$ + iwad$
        IF _FILEEXISTS(iwad_path$) THEN GOTO iwadFound
    END IF
    
    'check the 'current' directory
    '-- i.e. the directory the launcher was called *from*
    LET iwad_path$ = DIR_CUR$ + iwad$
    IF _FILEEXISTS(iwad_path$) THEN GOTO iwadFound
    
    'check the base WADs directory
    LET iwad_path$ = DIR_WADS$ + iwad$
    IF _FILEEXISTS(iwad_path$) THEN GOTO iwadFound
    
    'if not found, look for Steam / GOG installations...
    GOSUB iwadInstalled
    
iwadFound:
    'return what we've found
    LET IWADs_GetPath$ = iwad_path$
    EXIT FUNCTION
    
iwadInstalled:
    '-------------------------------------------------------------------------
    SELECT CASE UCASE$(Paths_GetFileBaseName$(iwad$))
        CASE "DOOM": GOTO iwadDOOM
        CASE "DOOM2": GOTO iwadDOOM2
        CASE "TNT": GOTO iwadTNT
        CASE "PLUTONIA": GOTO iwadPLUTONIA
        CASE "HERETIC": GOTO iwadHERETIC
        CASE "HEXEN": GOTO iwadHEXEN
        CASE "STRIFE1": GOTO iwadSTRIFE
        CASE ELSE
            CALL UIErrorScreen_Begin("ERROR: IWAD Not Found!")
                PRINT " The IWAD file:"
                PRINT ""
                PRINT " " + CHR$(34) _
                   + RTRUNCATE$(iwad$, UI_SCREEN_WIDTH - 2) + CHR$(34)
                PRINT ""
                PRINT " Could not be found."
                CALL UIErrorScreen_End
    END SELECT
    
    RETURN
    
iwadDOOM:
    'try and find "DOOM.WAD" in Steam/GOG installations:
    '-------------------------------------------------------------------------
    'is GOG "The Ultimate DOOM" installed?
    IF WADs_GetGOGFileByRef(iwad_path$, _
        GOG_DOOMU_ID, "DOOM.WAD" _
    ) THEN RETURN
    'is GOG "DOOM I Enhanced" installed?
    IF WADs_GetGOGFileByRef(iwad_path$, _
        GOG_DOOMUE_ID, "DOOM_Data\StreamingAssets\doom.wad" _
    ) THEN RETURN
    
    'is Steam "The Ultimate DOOM" installed?
    IF WADs_GetSteamFileByRef(iwad_path$, _
        STEAM_DOOMU_ID, STEAM_DOOMU_NAME, _
        "base\DOOM.WAD" _
    ) THEN RETURN
    'is Steam "DOOM I Enhanced" installed?
    IF WADs_GetSteamFileByRef(iwad_path$, _
        STEAM_DOOMUE_ID, STEAM_DOOMUE_NAME, _
        "DOOM_Data\StreamingAssets\doom.wad" _
    ) THEN RETURN
    
    'IF NO OTHER OPTION REMAINS, FALL BACK TO DOOM 3
    'this is not ideal, because the WAD needs patching
    '-------------------------------------------------------------------------
    'is GOG "DOOM 3 BFG Edition" installed?
    IF WADs_GetGOGFileByRef(iwad_path$, _
        GOG_DOOM3BFG_ID, "base\wads\DOOM.WAD" _
    ) THEN GOTO iwadDOOM_BFG
    
    'is Steam "DOOM 3 BFG Edition" installed?
    IF WADs_GetSteamFileByRef(iwad_path$, _
        STEAM_DOOM3BFG_ID, STEAM_DOOM3BFG_NAME, _
        "base\wads\DOOM.WAD" _
    ) THEN GOTO iwadDOOM_BFG
    
    'can't find DOOM.WAD, try FreeDOOM substitution?
    '-------------------------------------------------------------------------
    IF iwad_path$ = "" THEN
        PRINT "": COLOR WHITE
        PRINT "                WARNING: Could not locate DOOM.WAD,"
        PRINT "                using FREEDOOM1.WAD as replacement"
        PRINT ""
        LET iwad_path$ = DIR_WADS$ + "conversions\freedoom\freedoom1.wad"
    END IF
    
    RETURN

iwadDOOM_BFG:
    '-------------------------------------------------------------------------
    'patch the DOOM BFG WADs
    PRINT "": COLOR WHITE
    PRINT "                DOOM 3 BFG Edition found -- automatically patching..."
    
    DIM bfg_path$, bfg_doom$, bfg_tool$
    LET bfg_path$ = Paths_GetPath$(iwad_path$)
    LET bfg_doom$ = bfg_path$ + "DOOMU_BFG_PATCHED.WAD"
    LET bfg_tool$ = DIR_TOOLS$ + "xdelta3\"
    
    'if the file has already been patched in the past
    IF _FILEEXISTS(bfg_doom$) THEN
        'then use that
        LET iwad_path$ = bfg_doom$
        PRINT "                Using existing DOOMU_BFG_PATCHED.WAD"
    ELSE
        'do the patching:
        IF _SHELLHIDE ( _
            CHR$(34) + bfg_tool$ + "xdelta3-3.0.11-i686.exe" _
          + CHR$(34) + " -d -s " + CHR$(34) + iwad_path$ + CHR$(34) + " " _
          + CHR$(34) + bfg_tool$ + "bfg-to-ud.vcdiff" + CHR$(34) + " " _
          + CHR$(34) + bfg_doom$ + CHR$(34) _
        ) =0 THEN
            'patch succeeded; use the patched WAD
            LET iwad_path$ = bfg_doom$
            PRINT "                Success! Using DOOMU_BFG_PATCHED.WAD"
        ELSE
            'failed to patch, just use unpatched WAD
            PRINT "                Failed to patch! Falling back to DOOM.WAD"
        END IF
    END IF
    
    PRINT ""
    RETURN
    
iwadDOOM2:
    'try and find "DOOM2.WAD" in Steam/GOG installations:
    '-------------------------------------------------------------------------
    'is GOG "DOOM II + Master Levels" installed?
    IF WADs_GetGOGFileByRef(iwad_path$, _
        GOG_DOOM2M_ID, "doom2\DOOM2.WAD" _
    ) THEN RETURN
    'is GOG "DOOM II Enhanced" installed?
    IF WADs_GetGOGFileByRef(iwad_path$, _
        GOG_DOOM2E_ID, "DOOM II_Data\StreamingAssets\doom2.wad" _
    ) THEN RETURN
    
    'is Steam "DOOM 2" installed?
    IF WADs_GetSteamFileByRef(iwad_path$, _
        STEAM_DOOM2_ID, STEAM_DOOM2_NAME, _
        "base\DOOM2.WAD" _
    ) THEN RETURN
    'is Steam "Master Levels for DOOM II" installed?
    '(this also contains a copy of DOOM2.WAD)
    IF WADs_GetSteamFileByRef(iwad_path$, _
        STEAM_DOOM2M_ID, STEAM_DOOM2M_NAME, _
        "doom2\DOOM2.WAD" _
    ) THEN RETURN
    'is Steam "DOOM II Enhanced" installed?
    IF WADs_GetSteamFileByRef(iwad_path$, _
        STEAM_DOOM2E_ID, STEAM_DOOM2E_NAME, _
        "DOOM II_Data\StreamingAssets\doom2.wad" _
    ) THEN RETURN
    
    'IF NO OTHER OPTION REMAINS, FALL BACK TO DOOM 3 BFG
    'this is not ideal, because the WAD needs patching
    '-------------------------------------------------------------------------
    'is GOG "DOOM 3 BFG Edition" installed?
    IF WADs_GetGOGFileByRef(iwad_path$, _
        GOG_DOOM3BFG_ID, "base\wads\DOOM2.WAD" _
    ) THEN GOTO iwadDOOM2_BFG
    
    'is Steam "DOOM 3 BFG Edition" installed?
    IF WADs_GetSteamFileByRef(iwad_path$, _
        STEAM_DOOM3BFG_ID, STEAM_DOOM3BFG_NAME, _
        "base\wads\DOOM2.WAD" _
    ) THEN GOTO iwadDOOM2_BFG
    
    'can't find DOOM2.WAD, try FreeDOOM substitution?
    IF iwad_path$ = "" THEN
        PRINT "": COLOR WHITE
        PRINT "                WARNING: Could not locate DOOM2.WAD,"
        PRINT "                using FREEDOOM2.WAD as replacement"
        PRINT ""
        LET iwad_path$ = DIR_WADS$ + "conversions\freedoom\freedoom2.wad"
    END IF
    
    RETURN
    
iwadDOOM2_BFG:
    '-------------------------------------------------------------------------
    'patch the DOOM2 BFG WADs
    PRINT "": COLOR WHITE
    PRINT "                DOOM 3 BFG Edition found -- automatically patching..."
    
    LET bfg_path$ = Paths_GetPath$(iwad_path$)
    LET bfg_doom$ = bfg_path$ + "DOOM2_BFG_PATCHED.WAD"
    LET bfg_tool$ = DIR_TOOLS$ + "xdelta3\"
    
    'if the file has already been patched in the past
    IF _FILEEXISTS(bfg_doom$) THEN
        'then use that
        LET iwad_path$ = bfg_doom$
        PRINT "                Using existing DOOM2_BFG_PATCHED.WAD"
    ELSE
        'do the patching:
        IF _SHELLHIDE ( _
            CHR$(34) + bfg_tool$ + "xdelta3-3.0.11-i686.exe" _
          + CHR$(34) + " -d -s " + CHR$(34) + iwad_path$ + CHR$(34) + " " _
          + CHR$(34) + bfg_tool$ + "bfg-to-1.9.vcdiff" + CHR$(34) + " " _
          + CHR$(34) + bfg_doom$ + CHR$(34) _
        ) =0 THEN
            'patch succeeded; use the patched WAD
            LET iwad_path$ = bfg_doom$
            PRINT "                Success! Using DOOM2_BFG_PATCHED.WAD"
        ELSE
            'failed to patch, just use unpatched WAD
            PRINT "                Failed to patch! Falling back to DOOM2.WAD"
        END IF
    END IF
    
    PRINT ""
    RETURN
    
iwadTNT:
    'try and find "TNT.WAD" in Steam/GOG installations:
    '-------------------------------------------------------------------------
    'is GOG "Final DOOM" installed?
    IF WADs_GetGOGFileByRef(iwad_path$, _
        GOG_FDOOM_ID, "TNT\TNT.WAD" _
    ) THEN RETURN
    
    'is Steam "Final DOOM" installed?
    IF WADs_GetSteamFileByRef(iwad_path$, _
        STEAM_FDOOM_ID, STEAM_FDOOM_NAME, _
        "base\TNT.WAD" _
    ) THEN RETURN
    'is Steam "DOOM II Enhanced" installed?
    IF WADs_GetSteamFileByRef(iwad_path$, _
        STEAM_DOOM2E_ID, STEAM_DOOM2E_NAME, _
        "finaldoombase\TNT.WAD" _
    ) THEN RETURN
    
    'return iwad_path$ = ""
    RETURN
    
iwadPLUTONIA:
    'try and find "PLUTONIA.WAD" in Steam/GOG installations:
    '-------------------------------------------------------------------------
    'is GOG "Final DOOM" installed?
    IF WADs_GetGOGFileByRef(iwad_path$, _
        GOG_FDOOM_ID, "Plutonia\PLUTONIA.WAD" _
    ) THEN RETURN
    
    'is Steam "Final DOOM" installed?
    IF WADs_GetSteamFileByRef(iwad_path$, _
        STEAM_FDOOM_ID, STEAM_FDOOM_NAME, _
        "base\PLUTONIA.WAD" _
    ) THEN RETURN
    'is Steam "DOOM II Enhanced" installed?
    IF WADs_GetSteamFileByRef(iwad_path$, _
        STEAM_DOOM2E_ID, STEAM_DOOM2E_NAME, _
        "finaldoombase\PLUTONIA.WAD" _
    ) THEN RETURN
    
    'return iwad_path$ = ""
    RETURN
    
iwadHERETIC:
    'try and find "HERETIC.WAD" in Steam/GOG installations:
    '-------------------------------------------------------------------------
    'is GOG "Heretic" installed?
    IF WADs_GetGOGFileByRef(iwad_path$, _
        GOG_HERETIC_ID, "HERETIC.WAD" _
    ) THEN RETURN
    
    'is Steam "Heretic" installed?
    IF WADs_GetSteamFileByRef(iwad_path$, _
        STEAM_HERETIC_ID, STEAM_HERETIC_NAME, _
        "base\HERETIC.WAD" _
    ) THEN RETURN
    
    'return iwad_path$ = ""
    RETURN
    
iwadHEXEN:
    'try and find "HEXEN.WAD" in Steam/GOG installations:
    '-------------------------------------------------------------------------
    'is GOG "Hexen" installed?
    IF WADs_GetGOGFileByRef(iwad_path$, _
        GOG_HEXEN_ID, "HEXEN.WAD" _
    ) THEN RETURN
    'is GOG "Hexen: Deathkings of the Dark Citadel" installed?
    IF WADs_GetGOGFileByRef(iwad_path$, _
        GOG_HEXENDD_ID, "HEXEN.WAD" _
    ) THEN RETURN
    
    'is Steam "Hexen" installed?
    IF WADs_GetSteamFileByRef(iwad_path$, _
        STEAM_HEXEN_ID, STEAM_HEXEN_NAME, _
        "base\HEXEN.WAD" _
    ) THEN RETURN
    'is Steam "Hexen: Deathkings of the Dark Citadel" installed?
    IF WADs_GetSteamFileByRef(iwad_path$, _
        STEAM_HEXENDD_ID, STEAM_HEXENDD_NAME, _
        "base\HEXEN.WAD" _
    ) THEN RETURN
    
    'return iwad_path$ = ""
    RETURN
    
iwadSTRIFE:
    'try and find "STRIFE1.WAD" in Steam/GOG installations:
    '-------------------------------------------------------------------------
    'is GOG "The Original Strife: Veteran Edition" installed?
    IF WADs_GetGOGFileByRef(iwad_path$, _
        GOG_STRIFEVE_ID, "strife1.wad" _
    ) THEN RETURN
    
    'is Steam "The Original Strife: Veteran Edition" installed?
    IF WADs_GetSteamFileByRef(iwad_path$, _
        STEAM_STRIFEVE_ID, STEAM_STRIFEVE_NAME, "strife1.wad" _
    ) THEN RETURN
    
    'return iwad_path$ = ""
    RETURN

END FUNCTION

'=============================================================================
SUB IWADs_Select(iwad%)
    LET IWADs_Current = iwad%
    LET IWADs_Selected = IWADs(IWADs_Current)
END SUB

'''gets a title for a built-in IWAD
'''=============================================================================
''FUNCTION IWADs_GetTitle$(iwad$)
''    SELECT CASE UCASE$(Paths_GetFileBaseName$(iwad$))
''        CASE "DOOM"
''            LET IWADs_GetTitle$ = "DOOM"
''        CASE "DOOM2"
''            LET IWADs_GetTitle$ = "DOOM II"
''        CASE "HERETIC"
''            LET IWADs_GetTitle$ = "Heretic"
''        CASE "HEXEN"
''            LET IWADs_GetTitle$ = "Hexen: Beyond Heretic"
''        CASE "STRIFE1"
''            LET IWADs_GetTitle$ = "Strife: Quest for the Sigil"
''        CASE "DOOM64"
''            LET IWADs_GetTitle$ = "DOOM 64"
''        CASE ELSE
''            LET IWADs_GetTitle$ = Paths_GetFileBaseName$(iwad$)
''    END SELECT
''END FUNCTION
''
'''gets the compatibility tags for a built-in IWAD
'''=============================================================================
''FUNCTION IWADs_GetTags$(iwad$)
''    SELECT CASE UCASE$(Paths_GetFileBaseName$(iwad$))
''        CASE "DOOM64"
''            'DOOM 64 does not run on a typical 'vanilla' engine
''            LET IWADs_GetTags$ = "doom64"
''        CASE ELSE
''            'all other built-in IWADs run on any 'vanilla'-compatible engine
''            LET IWADs_GetTags$ = "vanilla"
''    END SELECT
''END FUNCTION