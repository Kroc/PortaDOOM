'copyright (C) Kroc Camen 2018-2023, BSD 2-clause
'engines.bm : functions for handling engines (DOOM source ports)

'   Engines_Enumerate()
'   Engines_Filter()
'   Engines_SelectTiers()
'   Engines_Select(engine%)
'   Engines_GetType%(type$)     -> INTEGER

'walk the ports folder and identify all engines present
'=============================================================================
SUB Engines_Enumerate()
    LET ui_statusbar_left$(1) = "Parsing engines:"
    CALL UIStatusbar_Update

    'loop counter
    DIM i AS _UNSIGNED LONG
    
    LET Engines_Count = 0
    CALL Tags_Clear
    
    'create a directory list in a file, containing only sub-folder names
    CHDIR DIR_EXE$ + DIR_PORTS$
    SHELL _HIDE "DIR /AD /B > dir.tmp"
    
    DIM dir_handle%
    LET dir_handle% = FREEFILE
    OPEN "dir.tmp" FOR INPUT AS #dir_handle%
    
    DO WHILE EOF(dir_handle%) = FALSE
        'read a folder-name
        DIM dir$
        LINE INPUT #dir_handle%, dir$
        
        'check for an INI file in the engine's folder
        DIM ini_path$
        LET ini_path$ = _CWD$ + "\" + dir$ + "\porta-doom.ini"
        IF NOT _FILEEXISTS(ini_path$) THEN GOTO NextFolder
        
        'read the global values:
        '---------------------------------------------------------------------
        DIM shared_engine$
        LET shared_engine$ = ReadIniUTF8$(ini_path$, "global", "engine")
        IF  shared_engine$ = "" THEN
            CALL UIErrorScreen_Begin("ERROR: Invalid INI Definition")
            PRINT " The `[global]`->`engine` field is missing " _
                + "from the INI file:"
            PRINT " " + CHR$(34) _
                + RTRUNCATE$(ini_path$, UI_SCREEN_WIDTH - 2) + CHR$(34)
            PRINT ""
            PRINTWRAP_X 2, UI_SCREEN_WIDTH - 2, _
                "The `engine` field defines the common engine-name the " _
              + "engine being defined belongs to. For example, an `engine`" _
              + "field of 'gzdoom' is used to group all GZDoom engines " _
              + "together, regardless of version."
            PRINT ""
            PRINT " Example:"
            PRINT ""
            PRINT "     [global]"
            PRINT "     engine=gzdoom"
            GOSUB closeFile
            CALL UIErrorScreen_End
        END IF
        
        DIM shared_type$
        LET shared_type$ = ReadIniUTF8$(ini_path$, "global", "type")
        
        DIM shared_tier$
        LET shared_tier$ = ReadIniUTF8$(ini_path$, "global", "tier")
        IF  shared_tier$ = "" THEN
            CALL UIErrorScreen_Begin("ERROR: Invalid INI Definition")
            PRINT " The `[global]`->`tier` field is missing " _
                + "from the INI file:"
            PRINT " " + CHR$(34) _
                + RTRUNCATE$(ini_path$, UI_SCREEN_WIDTH - 2) + CHR$(34)
            PRINT ""
            PRINTWRAP_X 2, UI_SCREEN_WIDTH - 2, "The `tier` field " _
                      + "categorizes engines into one of three 'tiers':"
            PRINT ""
            PRINT "     ultra = high-resolution, high-end graphics (discrete GPU)"
            PRINT "     fast  = high-resolution but fast graphics (integrated GPU)"
            PRINT "     retro = low-resolution, chunky graphics"
            PRINT ""
            PRINT " Example:"
            PRINT ""
            PRINT "     [global]"
            PRINT "     engine=choco-doom"
            PRINT "     tier=retro"
            GOSUB closeFile
            CALL UIErrorScreen_End
        END IF
        
        DIM shared_rank$
        LET shared_rank$ = ReadIniUTF8$(ini_path$, "global", "rank")
        IF  shared_rank$ = "" THEN
            CALL UIErrorScreen_Begin("ERROR: Invalid INI Definition")
            PRINT " The `[global]`->`rank` field is missing " _
                + "from the INI file:"
            PRINT " " + CHR$(34) _
                + RTRUNCATE$(ini_path$, UI_SCREEN_WIDTH - 2) + CHR$(34)
            PRINT ""
            PRINTWRAP_X 2, UI_SCREEN_WIDTH - 2, _
                "The `rank` field provides a means of forcing engines into " _
              + "a certain order that cannot be expressed with the other " _
              + "fields. For example, PrBoom+ is ranked higher than ZDoom, " _
              + "even though ZDoom would be considered the 'better' " _
              + "engine, because ZDoom has been discontinued."
            PRINT ""
            PRINT " Example:"
            PRINT ""
            PRINT "     [global]"
            PRINT "     engine=prboom-plus"
            PRINT "     tier=fast"
            PRINT "     rank=5"
            GOSUB closeFile
            CALL UIErrorScreen_End
        END IF
        
        DIM shared_exe$
        LET shared_exe$ = ReadIniUTF8$(ini_path$, "global", "exe")
        DIM shared_ver$
        LET shared_ver$ = ReadIniUTF8$(ini_path$, "global", "ver")
        DIM shared_bit$
        LET shared_bit$ = ReadIniUTF8$(ini_path$, "global", "bit")
        DIM shared_vid$
        LET shared_vid$ = ReadIniUTF8$(ini_path$, "global", "vid")
        DIM shared_kin$
        LET shared_kin$ = ReadIniUTF8$(ini_path$, "global", "kin")
        DIM shared_cfg$
        LET shared_cfg$ = ReadIniUTF8$(ini_path$, "global", "cfg")
        DIM shared_save$
        LET shared_save$ = ReadIniUTF8$(ini_path$, "global", "save")
        DIM shared_tags$
        LET shared_tags$ = ReadIniUTF8$(ini_path$, "global", "tags")
        DIM shared_auto$
        LET shared_auto$ = ReadIniUTF8$(ini_path$, "global", "auto")
        DIM shared_cmd$
        LET shared_cmd$ = ReadIniUTF8$(ini_path$, "global", "cmd")
            
        'read each engine definition:
        '---------------------------------------------------------------------
        DIM ini_index%
        LET ini_index% = 1
        DO
            DIM ini_id$
            LET ini_id$ = ReadIniUTF8$(ini_path$, "engines", STRINT$(ini_index%))
            IF  ini_id$ = "" THEN
                'if this is still the first check,
                'then no engines are defined!
                IF ini_index% = 1 THEN
                    CALL UIErrorScreen_Begin("ERROR: Invalid INI Definition")
                    PRINT " No engines defined in the INI file:"
                    PRINT " " + CHR$(34) _
                        + RTRUNCATE$(ini_path$, UI_SCREEN_WIDTH - 2) _
                        + CHR$(34)
                    PRINT ""
                    PRINTWRAP_X 2, UI_SCREEN_WIDTH - 2, _
                        "At least one engine must be defined in the " _
                      + "`[engines]` section. An engine is defined with " _
                      + "a field number and then an ID for that engine " _
                      + "(cannot be the same as the `[global]`>`engine` " _
                      + "field)."
                    PRINT ""
                    PRINT " Example:"
                    PRINT ""
                    PRINT "     [engines]"
                    PRINT "     1=prboom-plus-hw"
                    PRINT "     2=prboom-plus-hw"
                    GOSUB closeFile
                    CALL UIErrorScreen_End
                END IF
                EXIT DO
            END IF
            
            'the engine-id cannot match the global engine-id:
            IF shared_engine$ = ini_id$ THEN
                CALL UIErrorScreen_Begin("ERROR: Invalid INI Definition")
                PRINT " Local engine ID cannot match global engine ID, " _
                    + "in INI file:"
                PRINT " " + CHR$(34) _
                   + RTRUNCATE$(ini_path$, UI_SCREEN_WIDTH - 2) + CHR$(34)
                PRINT ""
                PRINTWRAP_X 2, UI_SCREEN_WIDTH - 2, _
                    "The global engine ID is used to group multiple " _
                  + " engine versions into a single pool, e.g. 'gzdoom'. " _
                  + "The local engine ID defines a specific version " _
                  + "(or invocation) of an engine, e.g. 'gzdoom-36'."
                PRINT ""
                PRINT " Example:"
                PRINT
                PRINT "     [global]"
                PRINT "     engine=prboom-plus"
                PRINT ""
                PRINT "     [engines]"
                PRINT "     1=prboom-plus-hw"
                PRINT "     2=prboom-plus-sw"
                GOSUB closeFile
                CALL UIErrorScreen_End
            END IF
            
            'read engine data from the INI file
            DIM ini_section$
            LET ini_section$ = "engine." + ini_id$
            
            'get the engine title. since this is required this will also
            'serve to check if the section exists as it should
            DIM ini_title$
            LET ini_title$ = ReadIniUTF8$(ini_path$, ini_section$, "title")
            IF  ini_title$ = "" THEN
                CALL UIErrorScreen_Begin("ERROR: Invalid INI Definition")
                PRINT " Title field (or engine section) missing, " _
                    + "in INI file:"
                PRINT " " + CHR$(34) _
                   + RTRUNCATE$(ini_path$, UI_SCREEN_WIDTH - 2) + CHR$(34)
                PRINT ""
                PRINTWRAP_X 2, UI_SCREEN_WIDTH - 2, _
                    "A `title` field is required for an engine definition. " _
                  + " This error can also occur if the engine's section " _
                  + "cannot be found. For each local engine-id given, " _
                  + "a `[engines.id]` section must also be given, " _
                  + "for example:"
                PRINT ""
                PRINT "     [engines]"
                PRINT "     1=choco-doom-30"
                PRINT ""
                PRINT "     [engines.choco-doom-30]"
                PRINT "     title=" + CHR$(34) + "Chocolate Doom" + CHR$(34)
                GOSUB closeFile
                CALL UIErrorScreen_End
            END IF
            
            LET ui_statusbar_right$(1) = ini_id$
            LET ui_statusbar_left$(2) = ini_title$
            CALL UIStatusbar_Update
            
            DIM ini_desc$
            LET ini_desc$ = ReadIniUTF8$(ini_path$, ini_section$, "desc")
            IF  ini_desc$ = "" THEN
                CALL UIErrorScreen_Begin("ERROR: Invalid INI Definition")
                PRINT " Description field missing in INI file:"
                PRINT " " + CHR$(34) _
                   + RTRUNCATE$(ini_path$, UI_SCREEN_WIDTH - 2) + CHR$(34)
                PRINT ""
                PRINTWRAP_X 2, UI_SCREEN_WIDTH - 2, _
                    "Engines require a description."
                PRINT ""
                PRINT " Example:"
                PRINT ""
                PRINT "     [engines.choco-doom-30]"
                PRINT "     title=" + CHR$(34) + "Chocolate Doom" + CHR$(34)
                PRINT "     desc=" + CHR$(34) + "A pixel-for-pixel, " _
                    + "bug-for-bug recreation of ... " + CHR$(34)
                GOSUB closeFile
                CALL UIErrorScreen_End
            END IF
            
            DIM ini_type$
            LET ini_type$ = ReadIniUTF8$(ini_path$, ini_section$, "type")
            'TODO:allow local tier, rank?
            DIM ini_exe$
            LET ini_exe$ = ReadIniUTF8$(ini_path$, ini_section$, "exe")
            DIM ini_ver$
            LET ini_ver$ = ReadIniUTF8$(ini_path$, ini_section$, "ver")
            DIM ini_bit$
            LET ini_bit$ = ReadIniUTF8$(ini_path$, ini_section$, "bit")
            DIM ini_vid$
            LET ini_vid$ = ReadIniUTF8$(ini_path$, ini_section$, "vid")
            DIM ini_kin$
            LET ini_kin$ = ReadIniUTF8$(ini_path$, ini_section$, "kin")
            DIM ini_cfg$
            LET ini_cfg$ = ReadIniUTF8$(ini_path$, ini_section$, "cfg")
            DIM ini_save$
            LET ini_save$ = ReadIniUTF8$(ini_path$, ini_section$, "save")
            DIM ini_tags$
            LET ini_tags$ = ReadIniUTF8$(ini_path$, ini_section$, "tags")
            DIM ini_auto$
            LET ini_auto$ = ReadIniUTF8$(ini_path$, ini_section$, "auto")
            DIM ini_cmd$
            LET ini_cmd$ = ReadIniUTF8$(ini_path$, ini_section$, "cmd")
            
            '-------------------------------------------------------------------
            'process the tag list
            CALL Tags_Add(ini_tags$)
            
            'increase the list of known engines
            LET Engines_Count = Engines_Count + 1
            REDIM _PRESERVE Engines(1 TO Engines_Count) AS Engine
            
            LET Engines(Engines_Count).engine = LCASE$(shared_engine$)
            LET Engines(Engines_Count).id = LCASE$(ini_id$)
            LET Engines(Engines_Count).dir = dir$
            
            LET Engines(Engines_Count).title = ini_title$
            LET Engines(Engines_Count).desc = ini_desc$
            
            IF ini_type$ = "" THEN LET ini_type$ = shared_type$
            IF ini_type$ = "" THEN SYSTEM 9
            LET Engines(Engines_Count).type = Engines_GetType%(ini_type$)
            
            SELECT CASE LCASE$(shared_tier$)
                CASE "ultra": LET Engines(Engines_Count).tier = TIER_ULTRA
                CASE "fast": LET Engines(Engines_Count).tier = TIER_FAST
                CASE "retro": LET Engines(Engines_Count).tier = TIER_RETRO
                CASE ELSE
                    'TODO: none of the above?
                    SYSTEM 99
            END SELECT
            
            LET Engines(Engines_Count).rank = VAL(shared_rank$)
            
            IF ini_exe$ = "" THEN LET ini_exe$ = shared_exe$
            IF ini_exe$ = "" THEN SYSTEM 9
            LET Engines(Engines_Count).exe = ini_exe$
            
            'deconstruct the version string into component numbers
            IF ini_ver$ = "" THEN LET ini_ver$ = shared_ver$
            CALL STR2VER(ini_ver$, Engines(Engines_Count).ver)
            
            IF ini_bit$ = "" THEN LET ini_bit$ = shared_bit$
            IF ini_bit$ = "" THEN SYSTEM 9
            SELECT CASE ini_bit$
                CASE "64"
                    LET Engines(Engines_Count).bit = 64
                    'if this is a 32-bit machine (or the `/32` switch was
                    'used) skip it entirely, it wouldn't run on this CPU
                    IF CPU_BIT = 32 THEN GOTO NextEngine
                    
                CASE ELSE
                    'TODO: error for invalid choice?
                    LET Engines(Engines_Count).bit = 32
                    
            END SELECT
            
            IF ini_vid$ = "" THEN LET ini_vid$ = shared_vid$
            IF ini_vid$ = "" THEN SYSTEM 9
            LET Engines(Engines_Count).vid = VAL(ini_vid$)
            
            IF ini_kin$ = "" THEN LET ini_kin$ = shared_kin$
            IF ini_kin$ = "" THEN SYSTEM 9
            SELECT CASE UCASE$(ini_kin$)
                CASE "X": LET Engines(Engines_Count).kin = KIN_X
                CASE "V": LET Engines(Engines_Count).kin = KIN_V
                CASE "B": LET Engines(Engines_Count).kin = KIN_B
                CASE "Z": LET Engines(Engines_Count).kin = KIN_Z
                CASE "G": LET Engines(Engines_Count).kin = KIN_G
                CASE ELSE
                    LET Engines(Engines_Count).kin = 0
            END SELECT
            
            IF ini_cfg$ = "" THEN LET ini_cfg$ = shared_cfg$
            IF ini_cfg$ = "" THEN SYSTEM 9
            LET Engines(Engines_Count).cfg = ini_cfg$
            IF ini_save$ = "" THEN LET ini_save$ = shared_save$
            IF ini_save$ = "" THEN SYSTEM 9
            LET Engines(Engines_Count).save = ini_save$
            IF ini_tags$ = "" THEN LET ini_tags$ = shared_tags$
            LET Engines(Engines_Count).tags = ini_tags$
            IF ini_auto$ = "" THEN LET ini_auto$ = shared_auto$
            LET Engines(Engines_Count).auto = ini_auto$
            IF ini_cmd$ = "" THEN LET ini_cmd$ = shared_cmd$
            LET Engines(Engines_Count).cmd = ini_cmd$
            
            NextEngine:
            LET ini_index% = ini_index% + 1
        LOOP
    NextFolder:
    LOOP
    GOSUB closeFile
    
    LET ui_statusbar_right$(1) = ""
    LET ui_statusbar_left$(2) = ""
    LET ui_statusbar_left$(1) = "Prioritizing engines..."
    CALL UIStatusbar_Update
    
    'prioritise engine list:
    '-------------------------------------------------------------------------
    '... given ten different versions of GZDoom, each with hardware/software
    'renderers, which is the 'best' that we should default to?
    
    'the criteria for the 'best' engine is:
    '- prefer engines in higher tiers, i.e. "ultra" > "fast" > "retro"
    '- prefer engines with a higher rank
    '- prefer engines in a higher genealogy, i.e. "G" > "Z" > "B" > "V"
    '- prefer newer versions over older versions
    '- prefer hardware renderers (if present) over software
    '- prefer 64-bit (if present and machine supports it) over 32-bit
    
    'to whit, re-order the list of engines according to this criteria:
    
    DIM sorted%
    LET sorted% = FALSE
    DIM sortCount%
    
    DO WHILE sorted% = FALSE
        LET sorted% = TRUE
        
        FOR i = 2 TO Engines_Count
            'compare the engine with the one above
            '(A = above, B = below)
            DIM A%, B%
            LET A% = i - 1
            LET B% = i
            
            'compare the engine's tier:
            DIM tA%, tB%
            LET tA% = Engines(A%).tier
            LET tB% = Engines(B%).tier
            
            'if the engine below is of a higher tier, move it up
            IF tB% > tA% THEN
                SWAP Engines(A%), Engines(B%)
                LET sortCount% = sortCount% + 1
                LET sorted% = FALSE
            
            ELSEIF tB% = tA% THEN
                'compare the engine's rank:
                DIM rA%, rB%
                LET rA% = Engines(A%).rank
                LET rB% = Engines(B%).rank
                
                'if the engine below is of a higher rank, move it up
                IF rB% > rA% THEN
                    SWAP Engines(A%), Engines(B%)
                    LET sortCount% = sortCount% + 1
                    LET sorted% = FALSE
                    
                ELSEIF rB% = rA% THEN
                    'compare the two engine's genealogy:
                    DIM kA%, kB%
                    LET kA% = Engines(A%).kin
                    LET kB% = Engines(B%).kin
                    
                    'if the engine below is of a higher genealogy, move it up
                    IF kB% > kA% THEN
                        SWAP Engines(A%), Engines(B%)
                        LET sortCount% = sortCount% + 1
                        LET sorted% = FALSE
                    
                    ELSEIF kB% = kA% THEN
                        'compare the names (alphabetically sort engines)
                        DIM nA$, nB$
                        LET nA$ = Engines(A%).engine
                        LET nB$ = Engines(B%).engine
                        
                        IF nB$ < nA$ THEN
                            SWAP Engines(A%), Engines(B%)
                            LET sortCount% = sortCount% + 1
                            LET sorted% = FALSE
                        
                        ELSEIF nB$ = nA$ THEN
                            'compare the two engine's version numbers
                            DIM vA&, vB&
                            LET vA& = VER2INT&(Engines(A%).ver)
                            LET vB& = VER2INT&(Engines(B%).ver)
                            
                            IF vB& > vA& THEN
                                SWAP Engines(A%), Engines(B%)
                                LET sortCount% = sortCount% + 1
                                LET sorted% = FALSE
                                
                            ELSEIF vB& = vA& THEN
                                'compare renderer colour-depth
                                DIM cA%, cB%
                                LET cA% = Engines(A%).vid
                                LET cB% = Engines(B%).vid
                                
                                IF cB% > cA% THEN
                                    SWAP Engines(A%), Engines(B%)
                                    LET sortCount% = sortCount% + 1
                                    LET sorted% = FALSE
                                
                                ELSEIF cB% = cA% THEN
                                    'compare executable CPU-type (32/64-bit)
                                    DIM xA%, xB%
                                    LET xA% = Engines(A%).bit
                                    LET xB% = Engines(B%).bit
                                    
                                    IF xB% > xA% THEN
                                        SWAP Engines(A%), Engines(B%)
                                        LET sortCount% = sortCount% + 1
                                        LET sorted% = FALSE
                                    END IF
                                END IF
                                
                            END IF
                        END IF
                    END IF
                END IF
            END IF
        NEXT i
    LOOP
    
    ''PRINT "SORT COUNT: " + STRINT$(sortCount%)
    ''PRINT ""
    ''PRINT "Sorted Engine List:"
    ''PRINT "-------------------"
    ''FOR i = 1 TO Engines_Count
    ''    PRINT "- " + Engines(i).id, VER2STR$(Engines(i).ver), STR$(VER2INT&(Engines(i).ver))
    ''    IF i MOD 24 = 0 THEN SLEEP
    ''NEXT i
    ''PRINT ""
    ''SLEEP
    
    '-------------------------------------------------------------------------
    
    'create a look-up table of which engines provide which tags
    REDIM EngineTags(1 TO Engines_Count, 0 TO UBOUND(Tags)) AS LONG
    FOR i = 1 TO UBOUND(Engines)
        LET tag$ = Tags_Split$(Engines(i).tags)
        DO WHILE tag$ <> ""
            'find the tag index
            LET tag% = Tags_Find%(tag$)
            'set up the game <> tag mapping
            LET EngineTags(i, tag%) = 1
            'get the next tag in the list
            LET tag$ = Tags_Split$("")
        LOOP
    NEXT i
    
    'also, do this for game definitions -- this has to be done after
    'enumerating the engines, as all unique tags will be known by then
    REDIM GameTags(1 TO Games_Count, 1 TO UBOUND(Tags)) AS LONG
    FOR i = 1 TO UBOUND(Games)
        LET tag$ = Tags_Split$(Games(i).tags)
        DO WHILE tag$ <> ""
            'find the tag index
            LET tag% = Tags_Find%(tag$)
            'set up the game <> tag mapping
            LET GameTags(i, tag%) = 1
            'get the next tag in the list
            LET tag$ = Tags_Split$("")
        LOOP
    NEXT i
    
    LET ui_statusbar_left$(1) = ""
    CALL UIStatusbar_Update
    EXIT SUB
    
closeFile:
    CLOSE #dir_handle%
    KILL "dir.tmp"
    CHDIR DIR_EXE$
    
    RETURN
END SUB

'filter the engines to suit the chosen game
'=============================================================================
SUB Engines_Filter()
    'loop counter
    DIM i AS _UNSIGNED LONG
    
    'reset the short-list
    '(needed so that the user can go back and select a different game choice)
    LET Engines_ListCount = 0
    REDIM Engines_List(0) AS INTEGER
    
    'test each engine against the game's requirements:
    FOR i = 1 TO UBOUND(Engines)
        'are we looking for a specific engine-id?
        'e.g. the `/USE` command-line parameter
        IF Games_Selected.use <> "" THEN
            IF Engines(i).engine <> Games_Selected.use _
               AND Engines(i).id <> Games_Selected.use _
            THEN
                _CONTINUE
            END IF
        END IF
        
        'does the engine support the type of IWAD given?
        IF (IWADs_Selected.type AND Engines(i).type) = 0 THEN _CONTINUE
        
        'is the binary compatible with this machine? (32 / 64-bit)
        'if we are a 32-bit machine, we can't run 64-bit software.
        'this has already been handling in Engine enumeration,
        'but I will leave this here for safety
        IF CPU_BIT = 32 AND Engines(i).bit = 64 THEN _CONTINUE
        
        'does the game demand a certain binary type?
        '(this is purely for testing 32/64-bit binaries specifically)
        IF Games_Selected.bit <> 0 THEN
            IF Engines(i).bit <> Games_Selected.bit THEN _CONTINUE
        END IF
        
        'does the game demand a certain colour-depth? (i.e. software mode)
        IF Games_Selected.vid > 0 THEN
            'does the engine provide this colour depth?
            IF Engines(i).vid <> Games_Selected.vid THEN _CONTINUE
        END IF
        
        '---------------------------------------------------------------------
        
        'does this engine provide all the features required by the game?
        '(walk along the tags on the engine)
        FOR tag% = 1 TO UBOUND(Tags)
            'check the game's requirement for this tag
            SELECT CASE GameTags(Games_Current, tag%)
                'the *game* requires this from the engine
                CASE 1:
                    'if the *engine* does not provide this feature,
                    'move on to the next engine
                    IF EngineTags(i, tag%) = 0 THEN
                        '`_CONTINUE` does not support breaking nested loops
                        LET i = i + 1: GOTO NextEngine
                    END IF
            END SELECT
        NEXT tag%
        
        '---------------------------------------------------------------------
        
        'all requirements have been checked,
        'meaning that this engine is a candidate
        LET EngineTags(i, 0) = 1
        'add this engine to the valid short-list
        LET Engines_ListCount = Engines_ListCount + 1
        REDIM _PRESERVE Engines_List(1 TO Engines_ListCount) AS INTEGER
        LET Engines_List(Engines_ListCount) = i
        
    NextEngine:
    NEXT i
    
    IF Engines_ListCount = 0 THEN
        'TODO: we should do something useful here instead of erroring,
        'such as offering an open choice of engines
        CALL UIErrorScreen( _
            "ERROR: No Compatible Engine Found", _
            "No compatible engine could be found for the game / user " _
          + "requirements." _
        )
    END IF
    
    '''print a list of the candidate engines:
    ''PRINT ""
    ''PRINT "Candidate Engines:"
    ''PRINT "------------------"
    ''FOR i = Engines_ListCount TO 1 STEP -1
    ''    PRINT "- " + Engines(Engines_List(i)).id,, Engines(Engines_List(i)).tier
    ''    IF i MOD 24 = 0 THEN SLEEP
    ''NEXT i
    ''PRINT ""
    ''SLEEP
    
END SUB

'============================================================================
SUB Engines_SelectTiers()
    'walk down the list of sort-listed engines and pick out the first
    'of each low, medium, and high-tiered engines
    
    'reset the results
    LET Engines_SelectedUltra = 0
    LET Engines_SelectedFast = 0
    LET Engines_SelectedRetro = 0
    
    'Engines_Filter must have been called,
    'or there will not be any engines to examine!
    IF Engines_ListCount = 0 THEN EXIT SUB
    
    DIM i AS LONG
    FOR i = Engines_ListCount TO 1 STEP - 1
        'which type of engine is this?
        SELECT CASE Engines(Engines_List(i)).tier
            CASE TIER_ULTRA: LET Engines_SelectedUltra = Engines_List(i)
            CASE TIER_FAST: LET Engines_SelectedFast = Engines_List(i)
            CASE TIER_RETRO: LET Engines_SelectedRetro = Engines_List(i)
        END SELECT
    NEXT i
    
END SUB

'selects an engine for use, populating the 'selected engine' variables
'============================================================================
SUB Engines_Select(engine%)
    LET Engines_Current = engine%
    LET Engines_Selected = Engines(Engines_Current)
END SUB

'translates a comma-separated list of engine-types into a numeric value
'============================================================================
FUNCTION Engines_GetType%(type$)
    DIM r%: LET r% = 0
    LET type$ = "," + UCASE$(type$) + ","
    
    IF INSTR(type$, ",DOOM,") THEN LET r% = r% OR TYPE_DOOM
    IF INSTR(type$, ",DOOM2,") THEN LET r% = r% OR TYPE_DOOM2
    IF INSTR(type$, ",HERETIC,") THEN LET r% = r% OR TYPE_HERETIC
    IF INSTR(type$, ",HEXEN,") THEN LET r% = r% OR TYPE_HEXEN
    IF INSTR(type$, ",STRIFE,") THEN LET r% = r% OR TYPE_STRIFE
    IF INSTR(type$, ",CHEX,") THEN LET r% = r% OR TYPE_CHEX
    IF INSTR(type$, ",DOOM64,") THEN LET r% = r% OR TYPE_DOOM64
    IF INSTR(type$, ",HARM1,") THEN LET r% = r% OR TYPE_HARM1
    IF INSTR(type$, ",ROTWB,") THEN LET r% = r% OR TYPE_ROTWB
    
    LET Engines_GetType% = r%
END FUNCTION
