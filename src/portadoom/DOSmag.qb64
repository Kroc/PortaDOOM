'DOSmag : a DOS-like portable front-end for hyperlinked textual content.
'         copyright (C) Kroc Camen, 2016-2018; MIT license (see LICENSE.TXT)
'=============================================================================
'WARNING: THIS IS A QB64.NET SOURCE FILE, ENCODED AS ANSI CODE-PAGE 437
'         (SOMETIMES REFERRED TO AS "DOS" OR "OEM-US" ENCODING).
'         DO NOT OPEN AND SAVE THIS FILE AS UNICODE / UTF-8!
'=============================================================================
$EXEICON:'.\icon.ico'

'set ALT+ENTER to switch to 4:3 aspect ratio, with anti-aliasing;
'many thanks Fellippe Heitor for implementing this!
_ALLOWFULLSCREEN _SQUAREPIXELS, _SMOOTH

'$INCLUDE: 'lib\consts.bi'
'$INCLUDE: 'lib\strgui\strgui.bi'

'TODO: error check everywhere before we attempt something so that we're water-
'      tight and can turn off the compiled-in error checking (slow)
' $CHECKING:OFF

''ON ERROR GOTO error_handler

''$CONSOLE
''_CONSOLE ON

'the default size (in char cols/rows) of the screen
CONST SCREEN_MODE = 0
CONST SCREEN_WIDTH = 80
CONST SCREEN_HEIGHT = 30

'our text-formatting control codes
'-----------------------------------------------------------------------------
CONST CTL_ESCAPE = ASC_CARET '     ^
CONST CTL_CENTER = ASC_C '         ^C - centre alignment
CONST CTL_RIGHT = ASC_R '          ^R - right alignment
CONST CTL_HEADING = ASC_COLON '    :
CONST CTL_BULLET = ASC_DASH '      - (bullet point)
CONST CTL_BOLD = ASC_ASTERISK '    *...*
CONST CTL_ITALIC = ASC_USCORE '    _..._
CONST CTL_LINE1 = ASC_EQUALS '     =
CONST CTL_LINE2 = ASC_DASH '       -
CONST CTL_PAREN_ON = ASC_LPAREN '  (
CONST CTL_PAREN_OFF = ASC_RPAREN ' )
CONST CTL_KEY_ON = ASC_LSQB '      [
CONST CTL_KEY_OFF = ASC_RSQB '     ]
CONST CTL_INDENT = ASC_BAR '       |
CONST CTL_BREAK = ASC_BSLASH '     \\ (manual line-break)
CONST CTL_WARNING = ASC_EXCL '     !

'number of spaces between tab-stops
CONST TAB_SIZE = 4

'format constants
CONST FORMAT_LEFT = 0 '..left-align text
CONST FORMAT_CENTER = 1 'center-align text
CONST FORMAT_RIGHT = 2 '.right-align text

'screen layout
'-----------------------------------------------------------------------------
CONST ASC_SCROLL_TRACK = 176 'ASCII code for the scrolling track
CONST ASC_SCROLL_THUMB = 219 'ASCII code for the scrolling thumb

CONST HEAD_TOP = 1 '....row where the header starts
CONST HEAD_HEIGHT = 3 '.size of the header area

'row number where the page begins (immediately after the header)
CONST PAGE_TOP = HEAD_TOP + HEAD_HEIGHT
'height of the page display on the screen;
'(screen height less breadcrumb, title line, page and status bar)
CONST PAGE_HEIGHT = SCREEN_HEIGHT - PAGE_TOP - 1
'the page is padded either side by a column, plus the scrollbar
CONST PAGE_WIDTH = SCREEN_WIDTH - 3

CONST PAGE_FGND = LTGREY
CONST PAGE_BKGD = BLUE

'colour of the status/bar, help screen and some dialog boxes
CONST HELP_FGND = BLACK
CONST HELP_BKGD = CYAN

'extended height of the status area at the bottom of the screen;
'note that heights above 0 actually overlap the page, not squash it.
'this is used to slide the help bar up and display the instructions
DIM SHARED StatusHeight%%: StatusHeight%% = 0

'theme colours
'-----------------------------------------------------------------------------
CONST COLOR_BGND = 0 '..background colour
CONST COLOR_FGND = 1 '..foreground colour
CONST COLOR_BOLD = 2 '..*bold* text
CONST COLOR_ITALIC = 3 '_italic_ text
CONST COLOR_HEAD = 4 '..heading and other structural elements
CONST COLOR_PAREN = 5 '.parentheses (...)
CONST COLOR_KEY = 6 '...key marker [...]

TYPE Theme
    name AS STRING * 15
    colorBack AS _BYTE
    colorFore AS _BYTE
    colorBold AS _BYTE
    colorItalic AS _BYTE
    colorHead AS _BYTE
    colorParen AS _BYTE
    colorKey AS _BYTE
    colorPageTab AS _BYTE 'foreground colour of the page tab border
    themeHeader AS _BYTE '.which theme to get the header colours from
    themeWarning AS _BYTE 'which theme to switch to for warning boxes
END TYPE

DIM SHARED Themes(0 TO 5) AS Theme

CONST THEME_HELP = 0
CONST THEME_WARNING = 1
CONST THEME_BLACK = 2
CONST THEME_BLUE = 3
CONST THEME_RED = 4
CONST THEME_GREY = 5

LET Themes(THEME_HELP).name = "HELP"
LET Themes(THEME_HELP).colorBack = CYAN
LET Themes(THEME_HELP).colorFore = BLACK
LET Themes(THEME_HELP).colorBold = WHITE
LET Themes(THEME_HELP).colorItalic = BLUE
LET Themes(THEME_HELP).colorHead = YELLOW
LET Themes(THEME_HELP).colorParen = LTGREY
LET Themes(THEME_HELP).colorKey = AQUA
LET Themes(THEME_HELP).colorPageTab = BLACK
LET Themes(THEME_HELP).themeHeader = THEME_RED
LET Themes(THEME_HELP).themeWarning = THEME_WARNING

LET Themes(THEME_WARNING).name = "WARNING"
LET Themes(THEME_WARNING).colorBack = LTGREY
LET Themes(THEME_WARNING).colorFore = RED
LET Themes(THEME_WARNING).colorBold = BLACK
LET Themes(THEME_WARNING).colorItalic = DKGREY
LET Themes(THEME_WARNING).colorHead = RED
LET Themes(THEME_WARNING).colorParen = RED
LET Themes(THEME_WARNING).colorKey = PURPLE
LET Themes(THEME_WARNING).colorPageTab = RED
LET Themes(THEME_WARNING).themeHeader = THEME_RED
LET Themes(THEME_WARNING).themeWarning = THEME_RED

LET Themes(THEME_BLACK).name = "BLACK"
LET Themes(THEME_BLACK).colorBack = BLACK
LET Themes(THEME_BLACK).colorFore = DKGREY
LET Themes(THEME_BLACK).colorBold = WHITE
LET Themes(THEME_BLACK).colorItalic = PURPLE
LET Themes(THEME_BLACK).colorHead = RED
LET Themes(THEME_BLACK).colorParen = LTGREY
LET Themes(THEME_BLACK).colorKey = YELLOW
LET Themes(THEME_BLACK).colorPageTab = PINK
LET Themes(THEME_BLACK).themeHeader = THEME_RED
LET Themes(THEME_BLACK).themeWarning = THEME_WARNING

LET Themes(THEME_BLUE).name = "BLUE"
LET Themes(THEME_BLUE).colorBack = BLUE
LET Themes(THEME_BLUE).colorFore = LTGREY
LET Themes(THEME_BLUE).colorBold = WHITE
LET Themes(THEME_BLUE).colorItalic = LIME
LET Themes(THEME_BLUE).colorHead = YELLOW
LET Themes(THEME_BLUE).colorParen = CYAN
LET Themes(THEME_BLUE).colorKey = AQUA
LET Themes(THEME_BLUE).colorPageTab = AQUA
LET Themes(THEME_BLUE).themeHeader = THEME_RED
LET Themes(THEME_BLUE).themeWarning = THEME_WARNING

LET Themes(THEME_RED).name = "RED"
LET Themes(THEME_RED).colorBack = RED
LET Themes(THEME_RED).colorFore = LTGREY
LET Themes(THEME_RED).colorBold = WHITE
LET Themes(THEME_RED).colorItalic = LIME
LET Themes(THEME_RED).colorHead = YELLOW
LET Themes(THEME_RED).colorParen = ROSE
LET Themes(THEME_RED).colorKey = PINK
LET Themes(THEME_RED).colorPageTab = ROSE
LET Themes(THEME_RED).themeHeader = THEME_BLUE
LET Themes(THEME_RED).themeWarning = THEME_WARNING

LET Themes(THEME_GREY).name = "GREY"
LET Themes(THEME_GREY).colorBack = LTGREY
LET Themes(THEME_GREY).colorFore = DKGREY
LET Themes(THEME_GREY).colorBold = BLACK
LET Themes(THEME_GREY).colorItalic = PURPLE
LET Themes(THEME_GREY).colorHead = BLUE
LET Themes(THEME_GREY).colorParen = WHITE
LET Themes(THEME_GREY).colorKey = RED
LET Themes(THEME_GREY).colorPageTab = RED
LET Themes(THEME_GREY).themeHeader = THEME_RED
LET Themes(THEME_GREY).themeWarning = THEME_RED

CONST THEME_DEFAULT = THEME_RED

'page data:
'-----------------------------------------------------------------------------
CONST PAGE_DIR = "pages\" '.path where to find the dosmag pages
CONST PAGE_EXT = ".dosmag" 'file extension name used for pages
CONST PAGE_ASC = ASC_HASH '.which char is used to separate page numbers

DIM SHARED PageName AS STRING '..base name of page, without page number
DIM SHARED PageTitle AS STRING '.nav title as defined by `$TITLE=`
DIM SHARED PageNav AS STRING '..,nav path as defined by `$NAV=`
DIM SHARED PageTheme AS INTEGER 'which colour theme to use
DIM SHARED PageNum AS INTEGER '..page number,
DIM SHARED PageCount AS INTEGER 'and number of pages in the set

'page text is formatted, word-wrapped and assembled into this array of
'strings with each entry being one on-screen line. this is done so that
'we can display any line, correctly formatted, without having to know
'what formatting is present on previous lines
REDIM SHARED PageLines$(1)
DIM SHARED PageLineCount AS INTEGER
DIM SHARED PageLine AS INTEGER 'line number at top of screen

CONST ACTION_GOTO = 1 '.key binding action to load another page
CONST ACTION_PAGE = 2 '.key binding action to switch pages in a set
CONST ACTION_SHELL = 3 'key binding action to open a file
CONST ACTION_URL = 4 '..key binding action to launch a browser URL

'a page can define keys and their actions
TYPE PageKey
    keycode AS INTEGER '...ASCII key code
    action AS INTEGER '....the action to take, e.g. ACTION_GOTO
    param AS STRING * 256 'the action parameter, e.g. the page name to load
END TYPE

'the list of keys the page defines
REDIM SHARED PageKeys(1) AS PageKey
DIM SHARED PageKeyCount%

'prepare a blank page in case nothing is loaded
LET PageName$ = ""
LET PageTitle = ""
LET PageNav = ""
LET PageTheme = THEME_DEFAULT
LET PageNum% = 0
LET PageCount% = 0
LET PageLines$(1) = ""
LET PageLine% = 0
LET PageLineCount% = 0
LET PageKeyCount% = 0

'history / breadcrumb
'-----------------------------------------------------------------------------
'the navigation history:
REDIM SHARED historyPages(1) AS STRING '..page names
REDIM SHARED historyScroll(1) AS INTEGER 'where the user had scrolled to
'number of levels of history
DIM SHARED historyDepth AS INTEGER: historyDepth% = 1

'help screen
'-----------------------------------------------------------------------------
DIM SHARED HelpText$(14)
LET HelpText$(1) = "     [F1] = Hide / show these instructions"
LET HelpText$(2) = ""
LET HelpText$(3) = "Press the keys indicated between square brackets to navigate to a section."
LET HelpText$(4) = "Press [BKSP] (backspace) to return to the previous section."
LET HelpText$(5) = ""
LET HelpText$(6) = "Each section will have one or more pages:"
LET HelpText$(7) = ""
LET HelpText$(8) = "      [" + CHR$(ASC_ARR_LT) + "] = Previous page       [" + CHR$(ASC_ARR_RT) + "] = Next page (or R-CLICK)"
LET HelpText$(9) = ""
LET HelpText$(10) = "      [" + CHR$(ASC_ARR_UP) + "] = Scroll-up page (or MWHEEL-FWD)"
LET HelpText$(11) = "      [" + CHR$(ASC_ARR_DN) + "] = Scroll-down page (or MWHEEL-BCK)"
LET HelpText$(12) = ""
LET HelpText$(13) = "   [PgUp] = scroll-up one screen-full    [HOME] = Scroll to top of page"
LET HelpText$(14) = "   [PgDn] = scroll-down one screen-full   [END] = Scroll to bottom of page"

'dialog box
'-----------------------------------------------------------------------------
DIM SHARED dialogOn`
'internal size of the dialogue window, that is the size the text occupies.
'this excludes the button area below
DIM SHARED dialogWidth AS _UNSIGNED _BYTE
DIM SHARED dialogHeight AS _UNSIGNED _BYTE
DIM SHARED dialogText$ 'binary string of the dialogue text


'MAIN:
'=============================================================================
'disallow resizing of the window. this adds a great deal of complexity for
'very little gain right now and there isn't an easy way to restore a window
'to its 1:1 size
$RESIZE:OFF

_TITLE "DOSmag"

'set graphics mode, screen size, colour and clear screen
SCREEN SCREEN_MODE, , 0, 0: WIDTH SCREEN_WIDTH, SCREEN_HEIGHT
COLOR PAGE_FGND, PAGE_BKGD: CLS

'display the front-page
CALL loadPage("Home"): CALL refreshScreen

'input processing: (main loop)
'-----------------------------------------------------------------------------
DO
    'limit this processing loop to 30 fps to reduce CPU usage
    _LIMIT 30

    'if mouse input is on the queue then fetch and process it
    DO WHILE _MOUSEINPUT
        'scroll?
        DIM wheel%: LET wheel% = _MOUSEWHEEL
        IF wheel% <> 0 THEN
            'scroll up or  down?
            IF wheel% = 1 THEN CALL scrollDown ELSE CALL scrollUp
        END IF

        'right-click?
        IF _MOUSEBUTTON(2) = TRUE THEN
            CALL nextPage
        END IF

        'clear the mouse buffer
        DO WHILE _MOUSEINPUT: LOOP
    LOOP

    DIM key$: LET key$ = UCASE$(INKEY$)
    IF key$ <> "" THEN
        'get that as a keycode
        DIM keycode%: LET keycode% = ASC(key$)

        'ESC - quit instantly
        IF keycode% = ASC_ESC THEN SYSTEM

        'special key?
        IF keycode% = 0 THEN
            'get the special keycode
            LET keycode% = ASC(key$, 2)

            SELECT CASE keycode%
                CASE ASC_F1 'F1 = HELP
                    CALL helpScreen

                CASE ASC_F5 'reload the current page
                    'remember the current scroll position
                    DIM old_line%: LET old_line% = PageLine%
                    CALL loadPage(historyPages$(historyDepth%))
                    'restore the scroll position
                    CALL scrollTo(old_line%)

                CASE ASC_F11, ASC_ENTER 'F11 or ALT+ENTER
                    'flip the full-screen mode
                    IF _FULLSCREEN = 0 THEN
                        'use 1:1 pixel sizing as best as possible;
                        '(the other option blurs the picture)
                        _FULLSCREEN _SQUAREPIXELS, _SMOOTH
                    ELSE
                        _FULLSCREEN _OFF
                    END IF

                CASE ASC_UP 'up arrow - scroll page up
                    CALL scrollUp

                CASE ASC_DOWN 'down arrow - scroll page down
                    CALL scrollDown

                CASE ASC_PGDN 'Page Down
                    CALL scrollPageDown

                CASE ASC_PGUP 'Page Up
                    CALL scrollPageUp

                CASE ASC_HOME 'HOME - top of page
                    CALL scrollTop

                CASE ASC_END 'END - scroll to bottom of page
                    CALL scrollBottom

                CASE ASC_RIGHT 'right arrow - next page
                    CALL nextPage

                CASE ASC_LEFT 'left arrow - previous page
                    CALL prevPage

                CASE ELSE
                    'unrecognised special key
                    BEEP

            END SELECT

        ELSEIF keycode% = ASC_BKSP THEN
            'pressing backspace will go up a level;
            'check the history depth:
            IF historyDepth% = 1 THEN
                'can't go any fyrther back
                BEEP
            ELSE
                LET historyDepth% = historyDepth% - 1
                CALL loadPage(historyPages$(historyDepth%))
                CALL scrollTo(historyScroll%(historyDepth%))
                CALL refreshScreen
            END IF

        ELSEIF keycode% = ASC_SPC THEN
            'pressing space will scroll down a screenfull
            CALL scrollPageDown
        ELSE
            'any page-registered keys?
            IF PageKeyCount% > 0 THEN
                'check the keys registered by the page
                DIM n%
                FOR n% = 1 TO PageKeyCount%
                    IF PageKeys(n%).keycode = keycode% THEN
                        'the action parameter is a padded string
                        DIM param$: LET param$ = TRIM$(PageKeys(n%).param)
                        'which action to take?
                        SELECT CASE PageKeys(n%).action
                            CASE ACTION_GOTO
                                'record the current scroll position:
                                'when going back, we'll restore this
                                LET historyScroll%(historyDepth%) = PageLine%

                                'TODO: don't increase history for navigating
                                '      between pages of the same set
                                LET historyDepth% = historyDepth% + 1
                                REDIM _PRESERVE historyPages$(historyDepth%)
                                REDIM _PRESERVE historyScroll%(historyDepth%)
                                CALL loadPage(param$)
                                CALL refreshScreen
                                'don't check for pressed keys,
                                'when the load will have changed them!
                                EXIT FOR

                            CASE ACTION_PAGE
                                'record the current scroll position:
                                'when going back, we'll restore this
                                LET historyScroll%(historyDepth%) = PageLine%
                                LET historyDepth% = historyDepth% + 1
                                REDIM _PRESERVE historyPages$(historyDepth%)
                                REDIM _PRESERVE historyScroll%(historyDepth%)

                                'change to another page in the set
                                'without increasing history
                                CALL loadPage(PageName$ + " " + param$)
                                CALL refreshScreen
                                'don't check for pressed keys,
                                'when the load will have changed them!
                                EXIT FOR

                            CASE ACTION_SHELL
                                'switch to the files directory
                                DIM cwd$: LET cwd$ = _CWD$
                                CHDIR "files"
                                'exeute the shell command
                                SHELL param$
                                'return to the previous directory
                                CHDIR cwd$

                            CASE ACTION_URL
                                CALL launchURL(param$)
                                EXIT FOR

                        END SELECT
                    END IF
                NEXT
            END IF
        END IF

        'clear keyboard buffer
        DO WHILE INKEY$ <> "": LOOP
    END IF
LOOP
'illegal exit
SYSTEM 1


error_handler:
'-----------------------------------------------------------------------------
CALL fatalError( _
    "Error on line " + STRINT$(_ERRORLINE) + "." + CHR$(13) + CHR$(13) + _
    "  PageLine%      : " + STRINT$(PageLine%) + CHR$(13) + _
    "  PageLineCount% : " + STRINT$(PageLineCount%) + CHR$(13) + _
    STRINT$(UBOUND(PageLines$)) _
)
SLEEP: SYSTEM 1


'go to the next page in the set
'=============================================================================
SUB nextPage
    'if on the last page (or no pages) beep
    IF PageNum% = PageCount% THEN
        BEEP
    ELSE
        'switching pages cancels a history step that would return to
        'a different page in the same set
        CALL checkSamePageHistory
        'switch pages, note that this doesn't increase history depth,
        'that's only for navigation between different page sets
        CALL loadPage(PageName$ + " " + pageNumber$(PageNum% + 1))
        CALL refreshScreen
    END IF
END SUB

'go to the previous page in the set
'=============================================================================
SUB prevPage
    'if on the first page (or no pages) beep
    IF PageNum% < 2 THEN
        BEEP
    ELSE
        'switching pages cancels a history step that would return to
        'a different page in the same set
        CALL checkSamePageHistory
        'switch pages, note that this doesn't increase history depth,
        'that's only for navigation between different page sets
        CALL loadPage(PageName$ + " " + pageNumber$(PageNum% - 1))
        CALL refreshScreen
    END IF
END SUB

'=============================================================================
SUB checkSamePageHistory
    'can't do anything if history is not deep enough
    IF historyDepth% < 2 THEN EXIT SUB
    'check if the previous page in the history is the same as the current
    IF getPageName$(historyPages(historyDepth% - 1)) = PageName$ THEN
        LET historyDepth% = historyDepth% - 1
    END IF
END SUB

'show the built-in help screen
'=============================================================================
SUB helpScreen
    'slide the help bar up from the bottom of the screen
    DIM n%
    FOR n% = 0 TO UBOUND(HelpText$) + 3
        LET StatusHeight%% = n%
        CALL refreshScreen
        _DELAY 0.01
    NEXT

    '-------------------------------------------------------------------------
    DO
        'limit this processing loop to 30 fps to reduce CPU usage
        _LIMIT 30
        'wait for any key press
        SLEEP

        DIM key$: key$ = INKEY$
        IF key$ <> "" THEN
            SELECT CASE ASC(key$)
                CASE ASC_ESC
                    SYSTEM

                CASE 0
                    IF ASC(key$, 2) = ASC_F1 THEN EXIT DO
                    IF ASC(key$, 2) = ASC_F11 THEN
                        'flip the full-screen mode
                        IF _FULLSCREEN = 0 THEN
                            'use 1:1 pixel sizing as best as possible;
                            '(the other option blurs the picture)
                            _FULLSCREEN _SQUAREPIXELS
                        ELSE
                            _FULLSCREEN _OFF
                        END IF
                    END IF
            END SELECT

            'clear the keyboard buffer
            DO WHILE INKEY$ <> "": LOOP
        END IF
    LOOP

    '-------------------------------------------------------------------------
    FOR n% = UBOUND(HelpText$) + 3 TO 0 STEP -1
        LET StatusHeight%% = n%
        CALL refreshScreen
        _DELAY 0.01
    NEXT

END SUB

'load a page from disk
'=============================================================================
SUB loadPage (page_name$)
    DIM page_number%
    DIM file_base$ 'base name, without page number
    DIM file_path$ 'full file path, including extension

    'TODO: verify page number
    'is a page number attached to the name?
    IF ASC(page_name$, LEN(page_name$) - 2) = PAGE_ASC THEN
        'extract the page number off the end of the name
        LET page_number% = VAL(RIGHT$(page_name$, 2))
        'remove the page number from the name
        LET file_base$ = TRIM$(LEFT$(page_name$, LEN(page_name$) - 3))
        LET file_path$ = pagePath$(file_base$, page_number%)

    ELSE
        'no page number
        LET page_number% = 0
        LET file_base$ = TRIM$(page_name$)
        LET file_path$ = pagePath$(file_base$, 0)

        'does the file exist?
        IF NOT _FILEEXISTS(pagePath$(file_base$, 0)) THEN
            'if not, it may be that the page does exist, but with page number
            IF _FILEEXISTS(pagePath$(file_base$, 1)) THEN
                'add a default page number
                LET file_path$ = pagePath$(file_base$, 1)
                LET page_number% = 1
            END IF
        END IF
    END IF

    'does the page exist?
    IF NOT _FILEEXISTS(file_path$) THEN
        CALL fatalError("Cannot locate file '" + file_path$ + "'")
    END IF

    '-------------------------------------------------------------------------

    'clear current page in memory
    LET PageName$ = file_base$
    LET PageTitle$ = ""
    LET PageNav$ = ""
    LET PageTheme = THEME_DEFAULT
    LET PageNum% = 0
    LET PageCount% = 0
    LET PageLine% = 0
    ERASE PageLines$: LET PageLineCount% = 0
    ERASE PageKeys: LET PageKeyCount% = 0

    'get page number / count
    LET PageNum% = page_number%
    LET PageCount% = PageNum%
    'look for additionally numbered pages
    DO WHILE PageCount% < 99 AND _FILEEXISTS( _
        pagePath$(file_base$, PageCount% + 1) _
    )
        LET PageCount% = PageCount% + 1
    LOOP

    '-------------------------------------------------------------------------

    OPEN file_path$ FOR BINARY AS #1
    DO UNTIL EOF(1)
        'read a line of text from source
        DIM line$: LINE INPUT #1, line$
        'convert the line from UTF-8 to ANSI(cp437)
        LET line$ = UTF8ANSI$(line$)

        IF LEFT$(line$, 5) = "$REM=" THEN
            '.................................................................
            'skip REM lines; allows authors to put comments into the page
            'without them appearing on-screen

        ELSEIF LEFT$(line$, 7) = "$THEME=" THEN
            '.................................................................
            'change the theme for this page?
            DIM i%: FOR i% = LBOUND(Themes) TO UBOUND(Themes)
                IF TRIM$(MID$(line$, 8)) = TRIM$(Themes(i%).name) THEN
                    LET PageTheme = i%
                    EXIT FOR
                END IF
            NEXT i%

        ELSEIF LEFT$(line$, 7) = "$TITLE=" THEN
            '.................................................................
            'title of the page, for the navigation bread crumb
            LET PageTitle$ = TRIM$(MID$(line$, 8))

        ELSEIF LEFT$(line$, 5) = "$NAV=" THEN
            '.................................................................
            'category / folder of the page, for the navigation bread crumb
            '(if already defined, a second definition appends to the first)
            IF PageNav$ = "" THEN
                LET PageNav$ = TRIM$(MID$(line$, 6))
            ELSE
                LET PageNav$ = PageNav$ + " " + CHR$(ASC_LGLLMT) + " " _
                             + TRIM$(MID$(line$, 6))
            END IF

        ELSEIF LEFT$(line$, 5) = "$KEY:" THEN
            '.................................................................
            'key definition, the key name follows:

            'is there an equals sign?
            DIM keypos%: LET keypos% = INSTR(6, line$, "=")
            'if an equals sign doesn't follow,
            'this is not a valid key definition
            IF keypos% = 0 THEN
                CALL fatalError("The page '" + file_path$ + "' " + _
                                "contains an invalid key definition")
            END IF
            'extract the keyname
            DIM keyname$: LET keyname$ = MID$(line$, 6, keypos% - 6)
            DIM keycode%
            SELECT CASE keyname$
                'at the moment, these are the key names supported
                CASE "A" TO "Z", "0" TO "9", "#"
                    'just use the ASCII code
                    LET keycode% = ASC(keyname$)

                CASE ELSE
                    CALL fatalError ("The page '" + file_path$ + "' " + _
                                     "contains an invalid key definition")
            END SELECT

            'extract the action & param portion of the key definition
            DIM action$, action%, param$
            LET action$ = MID$(line$, keypos% + 1)

            IF LEFT$(action$, 5) = "GOTO:" THEN
                LET param$ = TRIM$(MID$(action$, 6))
                LET action% = ACTION_GOTO
            ELSEIF LEFT$(action$, 5) = "PAGE:" THEN
                LET param$ = TRIM$(MID$(action$, 6))
                LET action% = ACTION_PAGE
            ELSEIF LEFT$(action$, 6) = "SHELL:" THEN
                LET param$ = TRIM$(MID$(action$, 7))
                LET action% = ACTION_SHELL
            ELSEIF LEFT$(action$, 4) = "URL:" THEN
                LET param$ = TRIM$(MID$(action$, 5))
                LET action% = ACTION_URL
            ELSE
                CALL fatalError( _
                    "The page '" + file_path$ + "' " + _
                    "contains an invalid key definition" _
                )
            END IF

            LET PageKeyCount% = PageKeyCount% + 1
            REDIM _PRESERVE PageKeys(PageKeyCount%) AS PageKey
            LET PageKeys(PageKeyCount%).keycode = keycode%
            LET PageKeys(PageKeyCount%).action = action%
            LET PageKeys(PageKeyCount%).param = param$

        ELSE
            'not a meta line, formattable text:
            '.................................................................
            'an indent at the beginning of the line
            'will be maintained on wrapped lines
            DIM indent%: LET indent% = 0 'length of the indent (spaces)
            DIM src%: LET src% = 1 'current char-position in the source line

            'check for an indent:
            DO
                'watch out for the possibility of a white-space only line
                IF src% >= LEN(line$) THEN EXIT DO
                'check the charcter
                SELECT CASE ASC(line$, src%)
                    CASE ASC_TAB
                        'if it's a tab, account for extra
                        'spaces in the line wrapping
                        LET indent% = indent% + TAB_SIZE
                        LET src% = src% + 1

                    CASE ASC_SPC
                        LET indent% = indent% + 1
                        LET src% = src% + 1

                    CASE ELSE
                        'we've reached a non white-space character
                        EXIT DO

                END SELECT
            LOOP

            'if there is an indent, slice it off
            IF src% > 1 THEN LET line$ = MID$(line$, src%)

            'process formatting-codes in the line (and word-wrap)
            CALL formatLine(indent%, line$, PageTheme%)

        END IF
    LOOP
    CLOSE #1

    '-------------------------------------------------------------------------

    'set the current history to this page
    '(the key handling will increase history depth before loading the page)
    LET historyPages$(historyDepth%) = page_name$
    LET PageLine% = 1
END SUB

'strip the page number off of a page name, if present
'=============================================================================
FUNCTION getPageName$ (page_name$)
    'is a page number attached to the name?
    IF ASC(page_name$, LEN(page_name$) - 2) = PAGE_ASC THEN
        'remove the page number from the name
        LET getPageName$ = TRIM$(LEFT$(page_name$, LEN(page_name$) - 3))
    ELSE
        LET getPageName$ = page_name$
    END IF
END FUNCTION

'build a path to a DOSmag page file
'=============================================================================
FUNCTION pagePath$ (page_name$, page_number%)
    'if a page number is provided (0 = ignore)
    IF page_number% > 0 THEN
        LET pagePath$ = PAGE_DIR + page_name$ + " " _
                      + pageNumber$(page_number%) + PAGE_EXT
    ELSE
        'no page number
        LET pagePath$ = PAGE_DIR + page_name$ + PAGE_EXT
    END IF
END FUNCTION

'convert a page number to a string for use in file names, i.e. "#01"
'=============================================================================
FUNCTION pageNumber$ (page_number%)
    'ensure that it's always double-digit
    IF page_number% < 10 _
        THEN LET pageNumber$ = CHR$(PAGE_ASC) + "0" + STRINT$(page_number%) _
        ELSE LET pageNumber$ = CHR$(PAGE_ASC) + STRINT$(page_number%)
END FUNCTION

'display a confirmation screen for launching a URL
'=============================================================================
SUB launchURL (url$)
    'display the URL warning

    'set the width of the dialogue box
    'NOTE: this is the internal width, 'width of text',
    '      padding and border will be added automatically
    LET dialogWidth = 64
    
    STRGUI.Begin
    STRGUI.Add "Do you want to launch the following URL^{N}"
    STRGUI.Add "in your default web browser?^{N,N}"
    LET dialogHeight = 3

    'the URL will likely need to be line-wrapped;
    'how many lines will it take?
    DIM urlWidth%: LET urlWidth% = dialogWidth - 2
    DIM urlLines%: LET urlLines% = _CEIL(LEN(url$) / urlWidth%)
    LET dialogHeight = dialogHeight + urlLines%

    DIM i%
    FOR i% = 1 TO urlLines%
        STRGUI.Add " ^{Fb}" + _
            MID$(url$, urlWidth% * (i% - 1) + 1, urlWidth%) + "^{F-,N}"
    NEXT i%
    
    LET dialogText$ = STRGUI.Compile$
    
    LET dialogOn` = TRUE
    CALL refreshScreen

    '-------------------------------------------------------------------------
    DO
        'limit this processing loop to 30 fps to reduce CPU usage
        _LIMIT 30
        'wait for any key press
        SLEEP

        DIM key$: key$ = INKEY$
        IF key$ <> "" THEN
            SELECT CASE ASC(UCASE$(key$))
                CASE ASC_Y
                    'launch the URL
                    SHELL url$
                    'return the main screen
                    EXIT DO

                CASE ASC_ESC, ASC_N
                    'cancel launching URL,
                    'return to main screen
                    EXIT DO

                CASE 0
                    IF ASC(key$, 2) = ASC_F11 THEN
                        'flip the full-screen mode
                        IF _FULLSCREEN = 0 THEN
                            'use 1:1 pixel sizing as best as possible;
                            '(the other option blurs the picture)
                            _FULLSCREEN _SQUAREPIXELS
                        ELSE
                            _FULLSCREEN _OFF
                        END IF
                    END IF
            END SELECT

            'clear the keyboard buffer
            DO WHILE INKEY$ <> "": LOOP
        END IF
    LOOP

    LET dialogOn` = FALSE
    CALL refreshScreen
END SUB

'show an error screen and stop the program
'=============================================================================
SUB fatalError (msg$)
    'error could have occurred during display drawing,
    'so just create a new screen
    SCREEN 0, , 0, 0: COLOR YELLOW, RED: CLS
    'leave fullscreen
    _FULLSCREEN _OFF

    'write the message
    LOCATE 3, 32: PRINT "! FATAL ERROR !"

    COLOR WHITE
    LOCATE 6, 3: PRINT msg$;

    'wait for keypress before exiting
    SLEEP: SYSTEM 1
END SUB

'=============================================================================
'$INCLUDE: 'lib\strgui\strgui.bm'

'$INCLUDE: 'lib\strings.bm'
'$INCLUDE: 'lib\scroll.bm'
'$INCLUDE: 'lib\ui.bm'
