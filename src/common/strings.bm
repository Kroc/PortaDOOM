'copyright (C) Kroc Camen 2018-2023, BSD 2-clause

'   ISINT(text$)                -> INTEGER
'   STRINT$(number&)            -> STRING
'   TRUNCATE$(text$, length%)   -> STRING
'   RTRUNCATE$(text$, length%)  -> STRING
'   PAD$(text$, length%)        -> STRING
'   UTF8ANSI$(text$)            -> STRING

'is a string an integer? (only numeric digits)
'=============================================================================
FUNCTION ISINT(text$)
    'nullstring?
    IF text$ = "" THEN
        LET ISINT = FALSE
        EXIT FUNCTION
    END IF
    
    'walk the string
    DIM i AS LONG
    FOR i = 1 TO LEN(text$)
        DIM a%%: LET a%% = ASC(text$, i)
        IF a%% >= 48 AND a%% <=57 THEN
            LET ISINT = -1
        ELSE
            'any non-number, return false
            LET ISINT = 0
            EXIT FUNCTION
        END IF
    NEXT i
END FUNCTION

'convert an integer into a string and trim it
'=============================================================================
FUNCTION STRINT$(number&)
    LET STRINT$ = LTRIM$(STR$(number&))
END FUNCTION

'truncate a string to a maximum length, adding ellipsis if necessary
'=============================================================================
FUNCTION TRUNCATE$(text$, length%)
    'right-trim because we might get a fixed-width string
    LET text$ = RTRIM$(text$)
    'is any truncation needed in the first place?
    IF LEN(text$) > length% THEN
        'replace the end with an ellipsis
        LET TRUNCATE$ = LEFT$(text$, length% - 3) + "..."
    ELSE
        'text fits, no truncation needed
        LET TRUNCATE$ = text$
    END IF
END FUNCTION

'truncate the left hand side of a string to fit a maximum length
'=============================================================================
FUNCTION RTRUNCATE$(text$, length%)
    IF LEN(text$) > length% THEN
        'replace the beginning with an ellipsis
        LET RTRUNCATE$ = "..." + RIGHT$(text$, length% - 3)
    ELSE
        'text fits, no truncation needed
        LET RTRUNCATE$ = text$
    END IF
END FUNCTION

'pad a string to a number of spaces, truncating overflow
'=============================================================================
FUNCTION PAD$(text$, length%)
    DIM r$
    LET r$ = TRUNCATE$(text$, length%)
    'add the remaining spaces?
    IF LEN(r$) < length% THEN 
        LET r$ = r$ + SPACE$(length% - LEN(r$))
    END IF
    
    LET PAD$ = r$
END FUNCTION

'convert a UTF-8 string to an ANSI(cp437) string, with some transliteration
'=============================================================================
FUNCTION UTF8ANSI$(text$)
    DIM R$
    DIM b~%%, c~%%, d~%%, e~%% '=_UNSIGNED _BYTE
    DIM p~& '...................=_UNSIGNED LONG

    'we'll need to walk the string as bytes
    '(this is the assumption of QB64, it doesn't handle wide-strings)
    DIM i%
    FOR i% = 1 TO LEN(text$)
        'read a byte
        LET b~%% = ASC(text$, i%)
        'if byte is <128 then it's the same in ASCII/ANSI/UTF-8,
        LET p~& = b~%%

        IF (b~%% AND &HE0) = &HC0 THEN
            'this is a 2-byte UTF-8 sequence;
            '(the top three bits are "110?????")
            'read the next byte to determine the character
            LET i% = i% + 1: LET c~%% = ASC(text$, i%)
            'combine the two bytes into a single (integer) character
            LET p~& = (b~%% AND &H1F&) * &H40 _
                    + (c~%% AND &H3F&)

        ELSEIF (b~%% AND &HF0) = &HE0 THEN
            'this is a 3-byte UTF-8 sequence:
            '(the top four bits are "1110????")
            LET i% = i% + 1: LET c~%% = ASC(text$, i%)
            LET i% = i% + 1: LET d~%% = ASC(text$, i%)
            LET p~& = (b~%% AND &HF) * &H1000 _
                    + (c~%% AND &H3F) * &H40 _
                    + (d~%% AND &H3F)

        ELSEIF (b~%% AND &HF8) = &HF0 THEN
            'this is a 4-byte UTF-8 sequence:
            '(the top four bits are "11110???")
            LET i% = i% + 1: LET c~%% = ASC(text$, i%)
            LET i% = i% + 1: LET d~%% = ASC(text$, i%)
            LET i% = i% + 1: LET e~%% = ASC(text$, i%)
            LET p~& = (b~%% AND &H7) * &H40000 _
                    + (c~%% AND &H3F) * &H1000 _
                    + (d~%% AND &H3F) * &H40 _
                    + (e~%% AND &H3F)
        END IF

        SELECT CASE p~&
            CASE IS < 128
                'if byte is <128 then it's the same in ASCII/ANSI/UTF-8
                LET R$ = R$ + CHR$(b~%%)

            CASE &H263A&: LET R$ = R$ + CHR$(1)
            CASE &H263B&: LET R$ = R$ + CHR$(2)
            CASE &H2665&: LET R$ = R$ + CHR$(3)
            CASE &H2666&: LET R$ = R$ + CHR$(4)
            CASE &H2663&: LET R$ = R$ + CHR$(5)
            CASE &H2660&: LET R$ = R$ + CHR$(6)
            CASE &H2022&: LET R$ = R$ + CHR$(7)
            CASE &H25D8&: LET R$ = R$ + CHR$(8)
            CASE &H25CB&: LET R$ = R$ + CHR$(9)
            CASE &H25D9&: LET R$ = R$ + CHR$(10)
            CASE &H2642&: LET R$ = R$ + CHR$(11)
            CASE &H2640&: LET R$ = R$ + CHR$(12)
            CASE &H266A&: LET R$ = R$ + CHR$(13)
            CASE &H266B&: LET R$ = R$ + CHR$(14)
            CASE &H263C&: LET R$ = R$ + CHR$(15)
            CASE &H25BA&: LET R$ = R$ + CHR$(16)
            CASE &H25C4&: LET R$ = R$ + CHR$(17)
            CASE &H2195&: LET R$ = R$ + CHR$(18)
            CASE &H203C&: LET R$ = R$ + CHR$(19)
            CASE &H00B6&: LET R$ = R$ + CHR$(20)
            CASE &H00A7&: LET R$ = R$ + CHR$(21)
            CASE &H25AC&: LET R$ = R$ + CHR$(22)
            CASE &H21A8&: LET R$ = R$ + CHR$(23)
            CASE &H2191&: LET R$ = R$ + CHR$(24)
            CASE &H2193&: LET R$ = R$ + CHR$(25)
            CASE &H2192&: LET R$ = R$ + CHR$(26)
            CASE &H2190&: LET R$ = R$ + CHR$(27)
            CASE &H221F&: LET R$ = R$ + CHR$(28)
            CASE &H2194&: LET R$ = R$ + CHR$(29)
            CASE &H25B2&: LET R$ = R$ + CHR$(30)
            CASE &H25BC&: LET R$ = R$ + CHR$(31)
            CASE &H2302&: LET R$ = R$ + CHR$(127)
            CASE &H00C7&: LET R$ = R$ + CHR$(128)
            CASE &H00FC&: LET R$ = R$ + CHR$(129)
            CASE &H00E9&: LET R$ = R$ + CHR$(130)
            CASE &H00E2&: LET R$ = R$ + CHR$(131)
            CASE &H00E4&: LET R$ = R$ + CHR$(132)
            CASE &H00E0&: LET R$ = R$ + CHR$(133)
            CASE &H00E5&: LET R$ = R$ + CHR$(134)
            CASE &H00E7&: LET R$ = R$ + CHR$(135)
            CASE &H00EA&: LET R$ = R$ + CHR$(136)
            CASE &H00EB&: LET R$ = R$ + CHR$(137)
            CASE &H00E8&: LET R$ = R$ + CHR$(138)
            CASE &H00EF&: LET R$ = R$ + CHR$(139)
            CASE &H00EE&: LET R$ = R$ + CHR$(140)
            CASE &H00EC&: LET R$ = R$ + CHR$(141)
            CASE &H00C4&: LET R$ = R$ + CHR$(142)
            CASE &H00C5&: LET R$ = R$ + CHR$(143)
            CASE &H00C9&: LET R$ = R$ + CHR$(144)
            CASE &H00E6&: LET R$ = R$ + CHR$(145)
            CASE &H00C6&: LET R$ = R$ + CHR$(146)
            CASE &H00F4&: LET R$ = R$ + CHR$(147)
            CASE &H00F6&: LET R$ = R$ + CHR$(148)
            CASE &H00F2&: LET R$ = R$ + CHR$(149)
            CASE &H00FB&: LET R$ = R$ + CHR$(150)
            CASE &H00F9&: LET R$ = R$ + CHR$(151)
            CASE &H00FF&: LET R$ = R$ + CHR$(152)
            CASE &H00D6&: LET R$ = R$ + CHR$(153)
            CASE &H00DC&: LET R$ = R$ + CHR$(154)
            CASE &H00A2&: LET R$ = R$ + CHR$(155)
            CASE &H00A3&: LET R$ = R$ + CHR$(156)
            CASE &H00A5&: LET R$ = R$ + CHR$(157)
            CASE &H20A7&: LET R$ = R$ + CHR$(158)
            CASE &H0192&: LET R$ = R$ + CHR$(159)
            CASE &H00E1&: LET R$ = R$ + CHR$(160)
            CASE &H00ED&: LET R$ = R$ + CHR$(161)
            CASE &H00F3&: LET R$ = R$ + CHR$(162)
            CASE &H00FA&: LET R$ = R$ + CHR$(163)
            CASE &H00F1&: LET R$ = R$ + CHR$(164)
            CASE &H00D1&: LET R$ = R$ + CHR$(165)
            CASE &H00AA&: LET R$ = R$ + CHR$(166)
            CASE &H00BA&: LET R$ = R$ + CHR$(167)
            CASE &H00BF&: LET R$ = R$ + CHR$(168)
            CASE &H2310&: LET R$ = R$ + CHR$(169)
            CASE &H00AC&: LET R$ = R$ + CHR$(170)
            CASE &H00BD&: LET R$ = R$ + CHR$(171)
            CASE &H00BC&: LET R$ = R$ + CHR$(172)
            CASE &H00A1&: LET R$ = R$ + CHR$(173)
            CASE &H00AB&: LET R$ = R$ + CHR$(174)
            CASE &H00BB&: LET R$ = R$ + CHR$(175)
            CASE &H2591&: LET R$ = R$ + CHR$(176)
            CASE &H2592&: LET R$ = R$ + CHR$(177)
            CASE &H2593&: LET R$ = R$ + CHR$(178)
            CASE &H2502&: LET R$ = R$ + CHR$(179)
            CASE &H2524&: LET R$ = R$ + CHR$(180)
            CASE &H2561&: LET R$ = R$ + CHR$(181)
            CASE &H2562&: LET R$ = R$ + CHR$(182)
            CASE &H2556&: LET R$ = R$ + CHR$(183)
            CASE &H2555&: LET R$ = R$ + CHR$(184)
            CASE &H2563&: LET R$ = R$ + CHR$(185)
            CASE &H2551&: LET R$ = R$ + CHR$(186)
            CASE &H2557&: LET R$ = R$ + CHR$(187)
            CASE &H255D&: LET R$ = R$ + CHR$(188)
            CASE &H255C&: LET R$ = R$ + CHR$(189)
            CASE &H255B&: LET R$ = R$ + CHR$(190)
            CASE &H2510&: LET R$ = R$ + CHR$(191)
            CASE &H2514&: LET R$ = R$ + CHR$(192)
            CASE &H2534&: LET R$ = R$ + CHR$(193)
            CASE &H252C&: LET R$ = R$ + CHR$(194)
            CASE &H251C&: LET R$ = R$ + CHR$(195)
            CASE &H2500&: LET R$ = R$ + CHR$(196)
            CASE &H253C&: LET R$ = R$ + CHR$(197)
            CASE &H255E&: LET R$ = R$ + CHR$(198)
            CASE &H255F&: LET R$ = R$ + CHR$(199)
            CASE &H255A&: LET R$ = R$ + CHR$(200)
            CASE &H2554&: LET R$ = R$ + CHR$(201)
            CASE &H2569&: LET R$ = R$ + CHR$(202)
            CASE &H2566&: LET R$ = R$ + CHR$(203)
            CASE &H2560&: LET R$ = R$ + CHR$(204)
            CASE &H2550&: LET R$ = R$ + CHR$(205)
            CASE &H256C&: LET R$ = R$ + CHR$(206)
            CASE &H2567&: LET R$ = R$ + CHR$(207)
            CASE &H2568&: LET R$ = R$ + CHR$(208)
            CASE &H2564&: LET R$ = R$ + CHR$(219)
            CASE &H2565&: LET R$ = R$ + CHR$(210)
            CASE &H2559&: LET R$ = R$ + CHR$(211)
            CASE &H2558&: LET R$ = R$ + CHR$(212)
            CASE &H2552&: LET R$ = R$ + CHR$(213)
            CASE &H2553&: LET R$ = R$ + CHR$(214)
            CASE &H256B&: LET R$ = R$ + CHR$(215)
            CASE &H256A&: LET R$ = R$ + CHR$(216)
            CASE &H2518&: LET R$ = R$ + CHR$(217)
            CASE &H250C&: LET R$ = R$ + CHR$(218)
            CASE &H2588&: LET R$ = R$ + CHR$(219)
            CASE &H2584&: LET R$ = R$ + CHR$(220)
            CASE &H258C&: LET R$ = R$ + CHR$(221)
            CASE &H2590&: LET R$ = R$ + CHR$(222)
            CASE &H2580&: LET R$ = R$ + CHR$(223)
            CASE &H03B1&: LET R$ = R$ + CHR$(224)
            CASE &H00DF&: LET R$ = R$ + CHR$(225)
            CASE &H0393&: LET R$ = R$ + CHR$(226)
            CASE &H03C0&: LET R$ = R$ + CHR$(227)
            CASE &H03A3&: LET R$ = R$ + CHR$(228)
            CASE &H03C3&: LET R$ = R$ + CHR$(229)
            CASE &H00B5&: LET R$ = R$ + CHR$(230)
            CASE &H03C4&: LET R$ = R$ + CHR$(231)
            CASE &H03A6&: LET R$ = R$ + CHR$(232)
            CASE &H0398&: LET R$ = R$ + CHR$(233)
            CASE &H03A9&: LET R$ = R$ + CHR$(234)
            CASE &H03B4&: LET R$ = R$ + CHR$(235)
            CASE &H221E&: LET R$ = R$ + CHR$(236)
            CASE &H03C6&: LET R$ = R$ + CHR$(237)
            CASE &H03B5&: LET R$ = R$ + CHR$(238)
            CASE &H2229&: LET R$ = R$ + CHR$(239)
            CASE &H2261&: LET R$ = R$ + CHR$(240)
            CASE &H00B1&: LET R$ = R$ + CHR$(241)
            CASE &H2265&: LET R$ = R$ + CHR$(242)
            CASE &H2264&: LET R$ = R$ + CHR$(243)
            CASE &H2320&: LET R$ = R$ + CHR$(244)
            CASE &H2321&: LET R$ = R$ + CHR$(245)
            CASE &H00F7&: LET R$ = R$ + CHR$(246)
            CASE &H2248&: LET R$ = R$ + CHR$(247)
            CASE &H00B0&: LET R$ = R$ + CHR$(248)
            CASE &H2219&: LET R$ = R$ + CHR$(249)
            CASE &H00B7&: LET R$ = R$ + CHR$(250)
            CASE &H221A&: LET R$ = R$ + CHR$(251)
            CASE &H207F&: LET R$ = R$ + CHR$(252)
            CASE &H00B2&: LET R$ = R$ + CHR$(253)
            CASE &H25A0&: LET R$ = R$ + CHR$(254)
            CASE &H00A0&: LET R$ = R$ + CHR$(255)
            CASE &H2026&: LET R$ = R$ + "..." '    ...
            CASE &H2013&: LET R$ = R$ + "-" '      - (en-dash)
            CASE &H2014&: LET R$ = R$ + "--" '     -- (em-dash)
            CASE &H2018&: LET R$ = R$ + "'" '      ' (left)
            CASE &H2019&: LET R$ = R$ + "'" '      ' (right)
            CASE &H201C&: LET R$ = R$ + CHR$(34) ' " (left)
            CASE &H201D&: LET R$ = R$ + CHR$(34) ' " (right)
            CASE &HFEFF&:
                'ignore zero-width space!
            CASE ELSE
                'not a mappable Unicode point
                LET R$ = R$ + CHR$(0)
        END SELECT
    NEXT
    
    LET UTF8ANSI$ = R$
END FUNCTION
