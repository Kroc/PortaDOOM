'copyright (C) Kroc Camen 2018-2020, BSD 2-clause

'=============================================================================
FUNCTION TUI_DesktopBars_Add ( _
    row AS _UNSIGNED _BYTE, _
    foreColor AS _UNSIGNED _BYTE, _
    backColor AS _UNSIGNED _BYTE, _
    textLeft AS STRING, _
    textRight AS STRING _
)
    'increase the number of desktop bars defined
    'and populate its properties
    DIM kind_id AS _UNSIGNED LONG
    LET kind_id = UBOUND(TUI_DesktopBars) + 1
    REDIM _PRESERVE TUI_DesktopBars(1 TO kind_id) AS TUI_DesktopBar
    
    LET TUI_DesktopBars(kind_id).textLeft = TUI_Strings_Add(textLeft)
    LET TUI_DesktopBars(kind_id).textRight = TUI_Strings_Add(textRight)
    
    'add the desktop bar to the draw stack
    LET TUI_DesktopBars_Add = TUI_Controls_Add ( _
        1, row, _WIDTH, 1, foreColor, backColor, _
        TUI_ControlKind_DesktopBar, kind_id _
    )
END FUNCTION

'=============================================================================
SUB TUI_DesktopBars_Update ( _
    controlID AS _UNSIGNED _BYTE, _
    textLeft AS STRING, _
    textRight AS STRING _
)
    DIM kind_id AS _UNSIGNED _BYTE
    LET kind_id = TUI_Controls(controlID).kind_id
    
    LET TUI_Strings(TUI_DesktopBars(kind_id).textLeft) = textLeft
    LET TUI_Strings(TUI_DesktopBars(kind_id).textRight) = textRight
END SUB

'=============================================================================
SUB TUI_DesktopBars_Print (controlID AS _UNSIGNED _BYTE)
    DIM x AS _UNSIGNED _BYTE
    DIM y AS _UNSIGNED _BYTE
    LET x = TUI_Controls(controlID).x
    LET y = TUI_Controls(controlID).y
    
    'draw the bar background across the screen
    LOCATE y, x
    COLOR TUI_Controls(controlID).foreColor, _
          TUI_Controls(controlID).backColor
    PRINT SPACE$(_WIDTH);
    
    DIM kind_id AS _UNSIGNED _BYTE
    LET kind_id = TUI_Controls(controlID).kind_id
    
    DIM txtL AS STRING
    DIM txtR AS STRING
    LET txtL = TUI_Strings(TUI_DesktopBars(kind_id).textLeft)
    LET txtR = TUI_Strings(TUI_DesktopBars(kind_id).textRight)
    
    DIM lenL AS _UNSIGNED _BYTE
    DIM lenR AS _UNSIGNED _BYTE
    LET lenL = LEN(txtL)
    LET lenR = LEN(txtR)
    
    DIM lenW AS _UNSIGNED _BYTE
    LET lenW = _WIDTH - 3
    
    'does the text even fit on the screen together?
    IF lenL + lenR > lenW THEN
        'if the right hand side is too long, then the left will not be
        'displayed at all
        IF lenW - LenR < 3 THEN LET txtL = "": LET lenL = 0
        'is the right hand side longer than the screen?
        IF lenR > lenW THEN LET txtR = RTRUNCATE$(txtR, lenW): LET lenR = lenW
    END IF
    'truncate the left hand side, according to the room the right leaves
    IF lenL > 0 THEN
        LET txtL = TRUNCATE$(txtL, lenW - lenR)
        LET lenL = LEN(txtL)
    END IF
    
    LOCATE y, x + 1: PRINT txtL;
    IF lenR > 0 THEN
        LOCATE y, _WIDTH - 1 - lenR: PRINT txtR;
    END IF
END SUB
