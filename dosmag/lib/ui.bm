'copyright (C) Kroc Camen 2016-2018, BSD 2-clause

'does a complete redraw of the screen
'=============================================================================
SUB refreshScreen
    STATIC buffer%

    'switch focus to the backbuffer
    SCREEN , , 1 - buffer%, buffer%

    'draw in the textual content;
    'each of these clear their respective backgrounds themselves
    drawHeader
    drawPage
    drawStatus
    'draw the overlaid dialog box if one is currently present
    IF dialogOn` THEN drawDialog
    
    'flip the display buffers
    buffer% = 1 - buffer%
    SCREEN , , 1 - buffer%, buffer%
END SUB

'draw the title of the current page and the navigation breadcrumb
'=============================================================================
SUB drawHeader
    DIM n%

    'clear the existing page line (title and page count)
    STRGUI.Begin
    STRGUI.SetVar "b", Themes(Themes(PageTheme%).themeHeader).colorBack
    STRGUI.SetVar "f", Themes(Themes(PageTheme%).themeHeader).colorPageTab
    STRGUI.SetVar "H", Themes(Themes(PageTheme%).themeHeader).colorHead
    STRGUI.SetVar "B", Themes(Themes(PageTheme%).themeHeader).colorBold
    STRGUI.SetVar "p", Themes(PageTheme%).colorPageTab
    STRGUI.SetVar "!", Themes(PageTheme%).colorPageTab + BLINK
    STRGUI.SetVar "t", Themes(PageTheme%).colorBack
    STRGUI.SetVar "W", SCREEN_WIDTH
    
    'set background colour, blank one line
    STRGUI.Add "^{F@f,B@b,&20,R@W}"
    'draw the background tab bar's edge
    STRGUI.Add "^{&CD,R@W}"
    'draw the foreground tab bar's edge
    STRGUI.Add "^{F@p,B@t,&CD,R@W}"

    'draw the page number tab
    '-------------------------------------------------------------------------
    IF PageCount% > 1 THEN
        DIM tab_text$
        tab_text$ = "pg. " + STRINT$(PageNum%) _
                  + " of " + STRINT$(PageCount%)

        'generate the tab graphic (according to the width of the title text)
        DIM text_len%
        text_len% = LEN(tab_text$)
        STRGUI.SetVar "T", text_len%
        
        DIM tab_width%
        tab_width% = text_len% + 6
        STRGUI.SetVar "w", tab_width%
        
        
        STRGUI.Add "^{X*,Y*,X+@W-@w-1,L}"
        STRGUI.Add "^{&DA,&C4,R@w-2,&BF,N}"
        STRGUI.Add "^{&B3}"
        
        'blinking left arrow if there's other pages
        IF PageNum% > 1 _
            THEN STRGUI.Add "^{F@!,&1B,F-} " _
            ELSE STRGUI.Add "  "
        'the "page. 1 of 1" text
        STRGUI.Add tab_text$
        'blinking right arrow if there's other pages
        IF PageNum% < PageCount% _
            THEN STRGUI.Add " ^{F@!,&1A,F-}" _
            ELSE STRGUI.Add "  "
        
        STRGUI.Add "^{&B3}"
        'connect the tab to the page space below
        STRGUI.Add "^{N,&BE,&20,R@w-2,&D4}"
    END IF
    
    LOCATE HEAD_TOP, 1
    STRGUI.Print
    
    'draw the breadcrumb
    '-------------------------------------------------------------------------
    DIM nav$, crumb$
    'begin with the 'root' mark
    nav$ = " " + CHR$(ASC_DIAMOND) + " "

    'is there a parent category / folder?
    IF PageNav$ <> "" THEN
        nav$ = nav$ + PageNav$ + " " + CHR$(ASC_LGLLMT) + " "
    END IF

    'get the name of the page from the history stack
    crumb$ = historyPages$(historyDepth%)
    'if it has a page number on the end, this can be removed
    'when we're display names on the breadcrumb
    IF ASC(crumb$, LEN(crumb$) - 2) = PAGE_ASC THEN
        'remove the page number from the name
        crumb$ = LEFT$(crumb$, LEN(crumb$) - 3)
    END IF
    'there could be a space between the name and page number
    nav$ = nav$ + TRIM$(crumb$) + " "

    'if the page has its own title, append that
    IF PageTitle$ <> "" THEN
        nav$ = nav$ + ": " + PageTitle$ + " "
    END IF

    'prevent the breadcrumb from being too long
    nav$ = RTRUNCATE$(nav$, SCREEN_WIDTH - tab_width% - 3)
    
    STRGUI.Begin
    STRGUI.SetVar "n", LEN(nav$)
    STRGUI.Add "^{F@f,B@b}"
    STRGUI.Add "^{&C4,R@n,&BF}"
    
    STRGUI.Add "^{N,F@H}"
    'walk the breadcrumb string and pick out the separators
    FOR n% = 1 TO LEN(nav$)
        DIM char%: char% = ASC(nav$, n%)
        SELECT CASE char%
            CASE ASC_DIAMOND: STRGUI.Add "^{F@B,&04,F-}"
            CASE ASC_LGLLMT: STRGUI.Add "^{F@B,&AE,F-}"
            CASE ELSE: STRGUI.Add CHR$(ASC(nav$, n%))
        END SELECT
    NEXT n%

    STRGUI.Add "^{F-,&D4}"
    
    LOCATE HEAD_TOP, 1
    STRGUI.Print
    
END SUB

'draw the page area where the content goes
'=============================================================================
SUB drawPage
    'clear the background before displaying the page
    '(not all lines will fill the full 80 cols)
    COLOR , Themes(PageTheme).colorBack
    DIM n%
    FOR n% = PAGE_TOP TO PAGE_TOP + PAGE_HEIGHT
        LOCATE n%, 1
        PRINT SPACE$(SCREEN_WIDTH);
    NEXT

    'if there's not enough text, no scroll bar is shown
    IF PageLineCount% > PAGE_HEIGHT THEN drawScrollbar

    '-------------------------------------------------------------------------

    _CONTROLCHR OFF

    FOR n% = 0 TO PAGE_HEIGHT
        IF PageLine% + n% > PageLineCount% THEN EXIT FOR
        LOCATE (PAGE_TOP + n%), 2
        COLOR Themes(PageTheme).colorFore , Themes(PageTheme).colorBack
        BINSTR.Print PageLines$(PageLine% + n%)
    NEXT

    _CONTROLCHR ON
END SUB

'draws the scroll bar and thumb
'=============================================================================
SUB drawScrollbar
    COLOR Themes(PageTheme).colorFore , Themes(PageTheme).colorBack

    'draw the bar
    DIM n%
    FOR n% = PAGE_TOP TO PAGE_TOP + PAGE_HEIGHT
        LOCATE n%, SCREEN_WIDTH
        PRINT CHR$(ASC_SCROLL_TRACK);
    NEXT

    'calculate the thumb size as a representation
    'of the screen size within the page length
    DIM thumblen!
    LET thumblen! = (PAGE_HEIGHT / PageLineCount%) * PAGE_HEIGHT

    'be doubly sure this is in range...
    IF thumblen! < 1 THEN thumblen! = 1
    IF thumblen! > PAGE_HEIGHT THEN thumblen! = PAGE_HEIGHT

    'and where vertically the thumb is located
    DIM thumbpos!
    IF PageLine% = 0 THEN
        thumbpos! = 0
    ELSE
        thumbpos! = (PAGE_HEIGHT / PageLineCount%) * PageLine%
    END IF

    'be doubly sure this is in range...
    IF thumbpos! < 0 THEN thumbpos! = 0
    IF thumbpos! + thumblen! > PAGE_HEIGHT THEN
        thumbpos! = PAGE_HEIGHT - thumblen!
    END IF

    'draw the thumb
    COLOR Themes(PageTheme).colorFore
    FOR n% = INT(thumbpos!) TO INT(thumbpos! + thumblen!)
        LOCATE PAGE_TOP + n%, SCREEN_WIDTH: PRINT CHR$(ASC_SCROLL_THUMB);
    NEXT
END SUB

'draw the status bar at the bottom of the screen
'=============================================================================
SUB drawStatus
    COLOR HELP_FGND, HELP_BKGD
    IF StatusHeight%% = 0 THEN
        LOCATE SCREEN_HEIGHT, 1
        PRINT SPACE$(SCREEN_WIDTH);

    ELSEIF StatusHeight%% > 0 THEN
        DIM n%
        FOR n% = 0 TO StatusHeight%%
            LOCATE SCREEN_HEIGHT - n%, 1
            PRINT SPACE$(SCREEN_WIDTH);
        NEXT
    END IF

    '-------------------------------------------------------------------------

    LOCATE SCREEN_HEIGHT - StatusHeight%%, 1
    PRINT " F1:HELP  BKSP:BACK                                    F11:FULLSCREEN  ESC:QUIT";

    IF StatusHeight%% > 0 THEN
        LOCATE SCREEN_HEIGHT - StatusHeight%% + 1, 2
        PRINT STRING$(SCREEN_WIDTH - 2, "-");

        _CONTROLCHR OFF

        FOR n% = 1 TO StatusHeight%% - 2
            IF n% > UBOUND(HelpText$) THEN EXIT FOR
            LOCATE SCREEN_HEIGHT - (StatusHeight%% - 2) + n%, 2
            PRINT HelpText$(n%);
        NEXT

        _CONTROLCHR ON
    END IF
    
    ''STRGUI.Begin
    ''STRGUI.Add STRGUI.WINDOW$(70, 24, 0)
    ''STRGUI.Add "^{&FE} HELP :: KEYS^{N}"
    ''STRGUI.Add "^{*%,X-1}_^{R70}"
    ''STRGUI.Add "^{%*}"
    ''
    ''LOCATE 4,(SCREEN_WIDTH - 70) \ 2
    ''COLOR HELP_FGND, HELP_BKGD
    ''STRGUI.Print
    
END SUB

'draw a dialogue box, if present
'=============================================================================
SUB drawDialog
    DIM x%, y%

    'calculate the position of the border box on screen
    DIM boxWidth%: boxWidth% = dialogWidth + 4
    DIM boxLeft%: boxLeft% = (SCREEN_WIDTH - boxWidth%) / 2
    DIM boxHeight%: boxHeight% = dialogHeight + 4
    DIM boxTop%: boxTop% = 1 + (SCREEN_HEIGHT - boxHeight%) / 2

    'draw the dialogue box
    STRGUI.Begin
    STRGUI.SetVar "!", HELP_FGND + BLINK
    STRGUI.SetVar "f", HELP_FGND
    STRGUI.SetVar "b", HELP_BKGD
    STRGUI.SetVar "w", boxWidth%
    
    STRGUI.Add "^{F@f,B@b}"
    STRGUI.Add STRGUI.WINDOW$(boxWidth%, boxHeight%, 1)
    
    STRGUI.Add "^{X+1,L}"
    STRGUI.Add dialogText$
    
    'divider line for buttons
    STRGUI.Add "^{X-2,&C3,&C4,R@w-2,&B4,N}"
    
    STRGUI.Add SPACE$(dialogWidth - 17) + "^{FW,FC}[Y]^{F-} YES^{F-} or ^{FW,FC}[N]^{F-} NO^{F-}"
    
    LOCATE boxTop%, boxLeft%
    STRGUI.Print
END SUB

'convert a line of DOSmag semantic-formatted text to strgui-encoded text
'=============================================================================
SUB formatLine (indent%, src$, default_theme%)
    
    'always right-trim a line as this can cause unexpected wrapping
    LET src$ = RTRIM$(src$)
    'length of the input string; further down, we'll add a terminating space
    'to allow look-ahead, but this value won't change
    DIM src_len%: LET src_len% = LEN(src$)

    'define the width of the line for word-wrapping: (sans-indent)
    DIM line_width%: LET line_width% = PAGE_WIDTH - indent%
    'some format codes may increase the indent on the next line
    '(for example, bullet points)
    DIM next_indent%: LET next_indent% = indent%
    
    'the 'theme' will choose which colours are used for which formatting
    'codes -- some codes might temporarily change the theme used
    DIM theme%
    LET theme% = default_theme%
    GOSUB switchTheme

    '-------------------------------------------------------------------------

    DIM src% '.current character position in the source line
    DIM char% 'ASCII code of current character

    'for aligning tabs, we need to know the *column* number of the current
    'character in the original source line, this is not the same as the
    'string index as tab characters are expanded into spaces
    DIM src_col%: LET src_col% = indent%

    'clear the strgui string builder; this will be the current line of text
    'being formatted; since the input string may be longer than the allowed
    'line width, multiple output lines may need to be produced
    STRGUI.Begin
    
    'set a strgui variable for the current line-length. this will be used
    'for drawing borders according to the width of the page
    STRGUI.SetVar "w", line_width%
    
    'visual length of the line being built (sans format-codes)
    DIM line_len%: LET line_len% = 0

    DIM word$ '....the current word being built
    DIM word_len% 'length of the current word (excluding format-codes)

    'adding a space on the end allows us to do a 1-character look-ahead
    'without having to avoid indexing past the end of the string
    LET src$ = src$ + " "
    LET src% = 1

    'warning box?
    '-------------------------------------------------------------------------
    'a line that begins with an exclamation mark produces a "warning box".
    'we must insert the top and bottom borders of the box, but contiguous
    'lines with the marker contribute to a single box
    STATIC is_warn`
    IF ASC(src$, src%) = CTL_WARNING THEN
        'skip the marker
        LET src% = src% + 1: LET src_col% = src_col% + 1
        'if there is a following space, ignore it (typographical)
        IF ASC(src$, src%) = ASC_SPC THEN
            LET src% = src% + 1: LET src_col% = src_col% + 1
        END IF
        
        'change to the warning-theme to use given by the current theme
        LET theme% = Themes(theme%).themeWarning: GOSUB switchTheme
        
        'if this is the opening line of the warning-box, include the border
        IF is_warn` = FALSE THEN
            'toggle the 'warning box' state
            LET is_warn` = TRUE
            'switch the warning colours, draw the top-border
            STRGUI.Add " ^{B@b,F@!,&DA,&C4,R@w-4,&BF}"
            'dispatch the top-border line and continue with intended line
            GOSUB addLine
        END IF
        
        'switch to the warning colours, draw the border, internal space
        'and jump back to the inside of the box for further printing
        STRGUI.Add " ^{F@f,B@b,F@!,&B3,F-}"
        STRGUI.Add " ^{*X,&20,R@w-6}"
        STRGUI.Add " ^{F@!,&B3,F-,X*}"
        
        'reduce the width of the line to account
        'for the box borders when word-wrapping
        LET line_width% = line_width% - 6
        
    ELSEIF is_warn` = TRUE THEN
        'if we were in a warning box, and this line doesn't continue it,
        'we need to terminate the box with the bottom border
        
        'change to the warning-theme to use given by the current theme
        LET theme% = Themes(theme%).themeWarning: GOSUB switchTheme
        
        'switch to the warning colours and draw the bottom border
        STRGUI.Add " ^{B@b,F@!,&C0,&C4,R@w-4,&D9}"
        
        'dispatch the bottom-border line and continue with intended line
        GOSUB addLine
        
        'toggle the 'warning box' state
        LET is_warn` = FALSE
    END IF

    'is this a completely blank line?
    'we need to check this after processing the warning box as a blank line
    'following a warning box must trigger the closing warning-box border
    'before adding the blank line itself
    IF TRIM$(src$) = "" THEN
        'output a blank line and skip any further processing
        STRGUI.Begin: LET indent% = 0
        GOSUB pushLine
        EXIT SUB
    END IF

    'bullet point?
    '-------------------------------------------------------------------------
    'if a line begins with a "-" it's a bullet point;
    'bullet-points cannot be centred or right-aligned
    IF ASC(src$, src%) = CTL_BULLET AND _
       ASC(src$, src% + 1) = ASC_SPC _
    THEN
        'add the bullet point to the line
        STRGUI.Add "^{F@B,&07,F-} "
        LET line_len% = line_len% + 2
        
        'increase the indent (for wrapped lines) to after the bullet
        LET next_indent% = next_indent% + 2
        'skip over the bullet point for the rest of processing
        LET src% = src% + 2: LET src_col% = src_col% + 2
    END IF

    'centered or right-aligned?
    '-------------------------------------------------------------------------
    DIM align%

    IF ASC(src$, src%) = CTL_ESCAPE THEN
        SELECT CASE ASC(src$, src% + 1)
            'set the mode, when a line is dispatched, it'll be centred
            CASE CTL_CENTER: LET align% = FORMAT_CENTER
            CASE CTL_RIGHT: LET align% = FORMAT_RIGHT
            ELSE
                'unrecognised starting code
                CALL fatalError( _
                    "Unrecognized Control Code '^" + _
                    MID$(src$, src% + 1, 1) + "' in file." _
                )
        END SELECT
        'do not display the marker
        LET src% = src% + 2: LET src_col% = src_col% + 2
    END IF

    'heading?
    '-------------------------------------------------------------------------
    'if a line begins with ":" then it's a heading or divider line
    DIM is_heading`
    IF ASC(src$, src%) = CTL_HEADING THEN
        'skip the heading marker
        LET src% = src% + 1: LET src_col% = src_col% + 1
        'set the heading colour
        STRGUI.Add "^{F@H}"
        'check for the dividing lines
        IF ASC(src$, src%) = CTL_LINE1 _
        OR ASC(src$, src%) = CTL_LINE2 _
        THEN
            'TODO: what a mess
            IF ASC(src$, src%) = CTL_LINE1 THEN STRGUI.Add CHR$(ASC_BOX_DBL_H)
            IF ASC(src$, src%) = CTL_LINE2 THEN STRGUI.Add CHR$(ASC_BOX_H)
            STRGUI.Add "^{R" + STRINT$(line_width% - line_len%) + "}"
            'ignore the rest of the line!
            GOSUB addLine: EXIT SUB
        ELSE
            'set the mode (in case of word-wrapping)
            LET is_heading` = TRUE
        END IF
    END IF

    '-------------------------------------------------------------------------

    'bold / italic are only valid on word-boundaries;
    'the beginning of a line is always a word-boundary
    DIM is_boundary`: LET is_boundary` = TRUE

    'we need to know if a word was already bold/italic &c. when it began,
    'so that if it's wrapped we can insert the format code on the new line
    DIM is_bold`, word_bold`
    DIM is_italic`, word_italic`
    DIM is_paren`, word_paren`
    DIM is_key`, word_key`

    'process text:
    FOR src% = src% TO src_len%
        'get current character in the source line
        LET char% = ASC(src$, src%)
        'this moves the column in the source text forward, however
        'if this is a tab character this will be adjusted further down
        '(this is why src% and src_col% may not be the same)
        LET src_col% = src_col% + 1

        'null is given by UTF8ANSI$ to mark unusable UTF8 characters
        IF char% = 0 THEN
            'add a blinking question mark to highlight errant null chars
            LET word$ = word$ + "^{Br,FY!}?^{F-,B-}"
            LET word_len% = word_len% + 1
            LET is_boundary` = FALSE
            _CONTINUE
        END IF

        'within key link text no formatting occurs!
        IF is_key` = TRUE THEN
            'is this the end of the key text?
            IF char% = CTL_KEY_OFF THEN
                'add the closing bracket and control code for display
                GOSUB addChar
                LET word$ = word$ + "^{F-}"
                'a word boundary occurs after the closing bracket
                LET is_key` = FALSE
                LET is_boundary` = TRUE

            ELSEIF char% = ASC_SPC THEN
                'append the current word (this will word-wrap as necessary)
                'if the line wrapped exactly the space will not be needed,
                'and this GOSUB call will not return here!
                GOSUB addWord
                'if the line wrapped, we don't want to add the whitespace
                'to the beginning of the new line, indentation has already
                'been handled
                IF line_len% > 0 THEN
                    STRGUI.Add " "
                    LET line_len% = line_len% + 1
                END IF
            ELSE
                'any other character, add as is
                GOSUB addChar
            END IF
            'process next letter...
            _CONTINUE
        END IF

        SELECT CASE char%
            CASE CTL_INDENT
                '.............................................................
                'set the following indent to the current position
                LET next_indent% = line_len% + word_len%
                'word-break immediately
                GOSUB addWord

            CASE CTL_HEADING
                '.............................................................
                'look for the " : " pattern
                IF ( _
                    ASC(src$, src% - 1) = ASC_SPC OR _
                    ASC(src$, src% - 1) = ASC_TAB _
                ) AND ( _
                    ASC(src$, src% + 1) = ASC_SPC OR _
                    ASC(src$, src% + 1) = ASC_TAB _
                ) THEN
                    'push the colon alone
                    GOSUB addChar
                    GOSUB addWord

                    'set the indent to the current position
                    LET next_indent% = line_len% + word_len% + 1
                ELSE
                    GOSUB addChar
                END IF

            CASE CTL_KEY_ON
                '.............................................................
                'don't allow within 'italic'
                IF is_italic` = FALSE THEN
                    'enable the key mode and change the colour
                    LET is_key` = TRUE
                    LET word$ = word$ + "^{F@K}"
                    LET word_len% = word_len% + 1
                END IF
                'add the open-bracket character
                GOSUB addChar

            CASE CTL_PAREN_ON
                '.............................................................
                'automatic paren mode will only occur on a word boundary
                IF is_boundary` = TRUE THEN
                    'enable the paren mode
                    LET is_paren` = TRUE
                    LET word$ = word$ + "^{F@P}"
                END IF
                'add the parenthesis to the output
                GOSUB addChar
                'a word boundary occurs within the parens
                LET is_boundary` = TRUE

            CASE CTL_PAREN_OFF
                '.............................................................
                GOSUB addChar
                IF is_paren` = TRUE THEN
                    'end paren mode
                    LET is_paren` = FALSE
                    LET word$ = word$ + "^{F-}"
                END IF
                'a word boundary occurs after the parens
                LET is_boundary` = TRUE

            CASE CTL_BOLD
                '.............................................................
                'check the next character:
                SELECT CASE ASC(src$, src% + 1)
                    CASE char%
                        'double is an escape, treat as single literal
                        LET src% = src% + 1: LET src_col% = src_col% + 1
                        GOSUB addChar

                    CASE ASC_SPC, ASC_TAB
                        'if followed by whitespace, then it's
                        'assumed to be a closing bold marker
                        IF is_bold` = TRUE THEN
                            LET is_bold` = FALSE
                            LET word$ = word$ + "^{F-}"
                        ELSE
                            'treat as literal
                            GOSUB addChar
                        END IF

                    CASE ASC_COMMA, ASC_COLON, ASC_SEMICOLON, ASC_PERIOD, _
                         ASC_APOS, ASC_EXCL, ASC_QMARK, ASC_SMARK, _
                         ASC_FSLASH, ASC_BSLASH, CTL_ITALIC, _
                         CTL_PAREN_OFF
                        'word boundary? if bold is on, flip it off
                        IF is_bold` = TRUE THEN
                            LET is_bold` = FALSE
                            LET word$ = word$ + "^{F-}"

                        ELSEIF is_bold` = FALSE THEN
                            LET is_bold` = TRUE
                            LET word$ = word$ + "^{F@B}"

                        ELSE
                            'treat as literal
                            GOSUB addChar
                        END IF

                    CASE ELSE
                        'bold can only be enabled at a word-boundary
                        IF is_boundary` = TRUE THEN
                            LET is_bold` = TRUE
                            LET word$ = word$ + "^{F@B}"
                        ELSE
                            'middle of word, treat as literal
                            GOSUB addChar
                        END IF
                END SELECT

            CASE CTL_ITALIC
                '.............................................................
                'check the next character:
                SELECT CASE ASC(src$, src% + 1)
                    CASE char%
                        'double is an escape, treat as single literal
                        LET src% = src% + 1: LET src_col% = src_col% + 1
                        GOSUB addChar

                    CASE ASC_SPC, ASC_TAB, _
                         ASC_COMMA, ASC_COLON, ASC_SEMICOLON, ASC_PERIOD, _
                         ASC_APOS, ASC_EXCL, ASC_QMARK, ASC_SMARK, _
                         ASC_FSLASH, ASC_BSLASH, CTL_BOLD, CTL_PAREN_OFF
                        'word boundary? if italic is on, flip it off
                        IF is_italic` = TRUE THEN
                            LET is_italic` = FALSE
                            LET word$ = word$ + "^{F-}"

                        ELSEIF is_italic` = FALSE THEN
                            LET is_italic` = TRUE
                            LET word$ = word$ + "^{F@I}"

                        ELSE
                            'treat as literal
                            GOSUB addChar
                        END IF

                    CASE ELSE
                        'italic can only be enabled at a word-boundary
                        IF is_boundary` = TRUE THEN
                            LET is_italic` = TRUE
                            LET word$ = word$ + "^{F@I}"
                        ELSE
                            'middle of word, treat as literal
                            GOSUB addChar
                        END IF
                END SELECT

            CASE CTL_BREAK
                '.............................................................
                'double back-slash creates a manual line-break
                IF ASC(src$, src% + 1) = CTL_BREAK THEN
                    LET char% = 0: GOSUB addWord: GOSUB lineBreak
                    'ignore the second slash
                    LET src% = src% + 1: LET src_col% = src_col% + 1
                ELSE
                    'treat as normal
                    GOSUB addChar
                END IF

            CASE ASC_APOS, ASC_EXCL, ASC_QMARK, ASC_SMARK
                '.............................................................
                'some punctuation is a word-boundary, but not a word-break;
                'e.g. "_bob_'s italics"
                GOSUB addChar
                LET is_boundary` = TRUE

            CASE ASC_FSLASH, ASC_BSLASH, ASC_DASH, ASC_COMMA, ASC_SEMICOLON
                '.............................................................
                'these break the word, but the character must be included
                GOSUB addChar
                'append the word to the line and continue
                GOSUB addWord

            CASE ASC_SPC, ASC_TAB
                '.............................................................
                'append the current word (this will word-wrap as necessary)
                'if the line wrapped exactly the space will not be needed,
                'and this GOSUB call will not return here!
                GOSUB addWord
                'if the line wrapped, we don't want to add the whitespace
                'to the beginning of the new line, indentation has already
                'been handled
                IF line_len% = 0 THEN _CONTINUE

                'the source column has already been moved forward by one,
                'but this might be wrong due to a tab character
                LET src_col% = src_col% - 1

                'batch together any contiguous white-space
                DIM ws%: LET ws% = 0 'number of spaces
                'this will be used to calculate the difference between
                'the on-screen column and the column in the source text
                DIM adjust%: LET adjust% = 0
                'two spaces will cause a column sync, but a single tab
                'will always cause a column sync even if the tab character
                'only ends up expanding to one space
                DIM is_sync`: LET is_sync` = FALSE
                DO
                    'if this is a tab
                    IF ASC(src$, src%) = ASC_TAB THEN
                        'walk along the tab-stops
                        DIM t%: LET t% = 1
                        DO
                            'if this tab-stop comes after the current column
                            IF (t% * TAB_SIZE) > src_col% THEN
                                'calc the number of spaces
                                'to reach the tab stop
                                LET adjust% = (t% * TAB_SIZE) - src_col%
                                EXIT DO
                            END IF
                            LET t% = t% + 1
                        LOOP
                        'move things along
                        LET src_col% = src_col% + adjust%
                        LET ws% = ws% + adjust%
                        'a tab always causes a column-sync,
                        'even if the tab only expands to one space
                        LET is_sync` = TRUE

                    ELSE
                        'not a tab, just a space
                        LET ws% = ws% + 1
                        LET src_col% = src_col% + 1
                        'columns will sync after two or more spaces
                        IF ws% > 1 THEN LET is_sync` = TRUE
                    END IF

                    'was this the last character in the line?
                    IF src% = src_len% THEN EXIT DO
                    'is the next character not white-space?
                    IF ASC(src$, src% + 1) <> ASC_SPC AND _
                       ASC(src$, src% + 1) <> ASC_TAB _
                    THEN
                        EXIT DO
                    END IF
                    'get next character in the source line
                    LET src% = src% + 1
                LOOP

                'if there's more than one space, resync the columns
                IF src% <= src_len% - 1 THEN
                    IF is_sync` = TRUE _
                    OR ( _
                        (ASC(src$, src% + 1) = ASC_COLON) AND _
                        (ASC(src$, src% + 2) = ASC_SPC) _
                    ) THEN
                        'calculate the difference between the source column,
                        'and the screen column (no formatting marks)
                        LET adjust% = src_col% - (line_len% + indent% + ws%)
                        'adjust the whitespace to match the source column,
                        'rather than the screen one
                        LET ws% = ws% + adjust%
                        'set the next line indent to the current position
                        LET next_indent% = src_col%
                        'clear the bold/italic state;
                        'this removes the need for a *lot* of fiddly typing
                        IF is_bold` = TRUE THEN
                            STRGUI.Add "^{F-}"
                            LET is_bold` = FALSE
                        END IF
                        IF is_italic` = TRUE THEN
                            STRGUI.Add "^{F-}"
                            LET is_italic` = FALSE
                        END IF
                    END IF
                END IF

                'append the white-space to the current line
                STRGUI.Add SPACE$(ws%)
                LET line_len% = line_len% + ws%

            CASE ELSE
                '.............................................................
                'add character to current word
                GOSUB addChar

        END SELECT
    NEXT

    'add this word to the last line
    GOSUB addWord
    IF line_len% > 0 THEN GOSUB addLine

    EXIT SUB

    addChar:
    '-------------------------------------------------------------------------
    'add the current character to the current word
    LET word$ = word$ + CHR$(char%): LET word_len% = word_len% + 1
    'we are no longer at the beginning of a word!
    LET is_boundary` = FALSE

    RETURN

    addWord:
    '-------------------------------------------------------------------------
    'if the current word fits the line, we can line-break:
    IF line_len% + word_len% = line_width% THEN
        'add the word to the end of the line
        GOSUB pushWord
        'word has been used, clear it
        GOSUB newWord
        'start a new line
        GOTO lineBreak
    END IF

    'would the current word overhang the line?
    IF line_len% + word_len% > line_width% THEN
        'end the current line and start a new line with the current word
        GOTO lineBreak
    END IF

    'add the word to the end of the line:
    GOSUB pushWord
    GOTO newWord

    pushWord:
    '-------------------------------------------------------------------------
    'add the word to the end of the line:
    STRGUI.Add word$
    LET line_len% = line_len% + word_len%
    RETURN
    
    lineBreak:
    '-------------------------------------------------------------------------
    'line has wrapped, dispatch the current line:
    GOSUB addLine

    'set the correct indent and wrap-point
    DIM this_indent%
    LET this_indent% = next_indent%
    LET indent% = this_indent%: LET next_indent% = indent%
    LET line_width% = PAGE_WIDTH - indent%

    'currently in a warning-box?
    IF is_warn` = TRUE THEN
        'switch the warning colours
        STRGUI.Add " ^{F@f,B@b}"
        'draw the box background and return to the inside
        STRGUI.Add "^{F@!,&B3,F-} "
        STRGUI.Add "^{*X,&20,R@w-6} "
        STRGUI.Add "^{F@!,&B3,F-}"
        STRGUI.Add "^{X*}" '< jump back to the inside of the box
        'reduce the width of the line to account
        'for the box borders when word-wrapping
        LET line_width% = line_width% - 6
    END IF
    'is this a heading we're processing?
    IF is_heading` = TRUE THEN STRGUI.Add "^{F@H}"
    'are we currently in parentheses?
    IF word_paren` = TRUE THEN STRGUI.Add "^{F@P}"
    'in key mode?
    IF word_key` = TRUE THEN STRGUI.Add "^{F@K}"
    'are we currently bold?
    IF word_bold` = TRUE THEN STRGUI.Add "^{F@B}"
    'are we currently italic?
    IF word_italic` = TRUE THEN STRGUI.Add "^{F@I}"
    'begin the line with the remaining word
    GOSUB pushWord

    newWord:
    '-------------------------------------------------------------------------
    'clear the 'current' word
    LET word$ = "": LET word_len% = 0
    'remember the bold/italic &c. state at the beginning of the word;
    'if it gets wrapped, the bold/italic &c. state needs to be copied
    'to the new line
    LET word_bold` = is_bold`
    LET word_italic` = is_italic`
    LET word_paren` = is_paren`
    LET word_key` = is_key`
    'we are now at the beginning of a word
    LET is_boundary` = TRUE

    RETURN

    addLine:
    '-------------------------------------------------------------------------
    'do we need to apply centre / right-alignment?
    'the line will need to be shorter than the screen for this to work
    '(this is the on-screen width without the control code characters)
    IF line_len% < line_width% THEN
        'does the line need to be centred?
        IF align% = FORMAT_CENTER THEN
            'pad the left-side with enough spaces to centre the text
            STRGUI$ = SPACE$((line_width% - line_len%) / 2) + STRGUI$

        ELSEIF align% = FORMAT_RIGHT THEN
            'pad the left-side with enough spaces to fit-right
            STRGUI$ = SPACE$(line_width% - line_len%) + STRGUI$
        END IF
    END IF

    pushLine:
    '-------------------------------------------------------------------------
    'add the line to the array of screen-ready converted lines:
    'increase the number of lines stored
    LET PageLineCount% = PageLineCount% + 1
    REDIM _PRESERVE PageLines$(PageLineCount%)
    LET STRGUI$ = SPACE$(indent%) + STRGUI$
    LET PageLines$(PageLineCount%) = STRGUI.Compile$
    'start a fresh line
    LET line_len% = 0
    STRGUI.Begin

    RETURN
    
    switchTheme:
    '-------------------------------------------------------------------------
    'when themes are changed, we change the colour variables.
    'since the binary string is only compiled at the end of the line,
    'this implies that the only one theme can be used per-line
    STRGUI.SetVar "b", Themes(theme%).colorBack
    STRGUI.SetVar "f", Themes(theme%).colorFore
    STRGUI.SetVar "B", Themes(theme%).colorBold
    STRGUI.SetVar "I", Themes(theme%).colorItalic
    STRGUI.SetVar "H", Themes(theme%).colorHead
    STRGUI.SetVar "P", Themes(theme%).colorParen
    STRGUI.SetVar "K", Themes(theme%).colorKey
    STRGUI.SetVar "!", Themes(theme%).colorFore + BLINK
    
    RETURN
    
END SUB
