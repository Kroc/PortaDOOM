'copyright (C) Kroc Camen 2018, BSD 2-clause

'print to the console only
'=============================================================================
SUB ECHO (text$)
    _DEST _CONSOLE: PRINT text$: _DEST 0
END SUB

'why isn't this built-in?
'=============================================================================
FUNCTION TRIM$ (text$)
    LET TRIM$ = LTRIM$(RTRIM$(text$))
END FUNCTION

'convert an integer into a string and trim it
'=============================================================================
FUNCTION STRINT$ (number%)
    LET STRINT$ = LTRIM$(STR$(number%))
END FUNCTION

'truncate a string to a maximum length, adding ellipsis if necessary
'=============================================================================
FUNCTION TRUNCATE$ (text$, length%)
    IF LEN(text$) > length% THEN
        'replace the end with an ellipsis
        LET TRUNCATE$ = LEFT$(text$, length% - 3) + "..."
    ELSE
        'text fits, no truncation needed
        LET TRUNCATE$ = text$
    END IF
END FUNCTION

'truncate the left hand side of a string to fit a maximum length
'=============================================================================
FUNCTION RTRUNCATE$ (text$, length%)
    IF LEN(text$) > length% THEN
        'replace the beginning with an ellipsis
        LET RTRUNCATE$ = "..." + RIGHT$(text$, length% - 3)
    ELSE
        'text fits, no truncation needed
        LET RTRUNCATE$ = text$
    END IF
END FUNCTION

'convert a UTF-8 string to an ANSI(cp437) string, with some transliteration
'=============================================================================
FUNCTION UTF8ANSI$ (text$)
    DIM b~%%, c~%%, d~%% '=_UNSIGNED _BYTE
    DIM p~& '.............=_UNSIGNED LONG

    'we'll need to walk the string as bytes
    '(this is the assumption of QB64, it doesn't handle wide-strings)
    DIM i%
    FOR i% = 1 TO LEN(text$)
        'read a byte
        LET b~%% = ASC(text$, i%)
        'if byte is <128 then it's the same in ASCII/ANSI/UTF-8,
        LET p~& = b~%%

        IF (b~%% AND &HE0) = &HC0 THEN
            'this is a 2-byte UTF-8 sequence;
            '(the top three bits are "110?????")
            'read the next byte to determine the character
            LET i% = i% + 1: LET c~%% = ASC(text$, i%)
            'combine the two bytes into a single (integer) character
            LET p~& = (b~%% AND &H1F&) * &H40 + (c~%% AND &H3F&)

        ELSEIF (b~%% AND &HF0) = &HE0 THEN
            'this is a 3-byte UTF-8 sequence:
            '(the top four bits are "1110????")
            LET i% = i% + 1: LET c~%% = ASC(text$, i%)
            LET i% = i% + 1: LET d~%% = ASC(text$, i%)
            LET p~& = (b~%% and &HF) * &H1000 _
                    + (c~%% AND &H3F) * &H40 _
                    + (d~%% AND &H3F)
        END IF

        SELECT CASE p~&
            CASE IS < 128
                'if byte is <128 then it's the same in ASCII/ANSI/UTF-8
                LET UTF8ANSI$ = UTF8ANSI$ + CHR$(b~%%)

            CASE &H263A: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(1)
            CASE &H263B: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(2)
            CASE &H2665: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(3)
            CASE &H2666: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(4)
            CASE &H2663: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(5)
            CASE &H2660: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(6)
            CASE &H2022: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(7)
            CASE &H25D8: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(8)
            CASE &H25CB: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(9)
            CASE &H25D9: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(10)
            CASE &H2642: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(11)
            CASE &H2640: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(12)
            CASE &H266A: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(13)
            CASE &H266B: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(14)
            CASE &H263C: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(15)
            CASE &H25BA: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(16)
            CASE &H25C4: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(17)
            CASE &H2195: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(18)
            CASE &H203C: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(19)
            CASE &H00B6: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(20)
            CASE &H00A7: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(21)
            CASE &H25AC: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(22)
            CASE &H21A8: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(23)
            CASE &H2191: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(24)
            CASE &H2193: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(25)
            CASE &H2192: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(26)
            CASE &H2190: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(27)
            CASE &H221F: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(28)
            CASE &H2194: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(29)
            CASE &H25B2: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(30)
            CASE &H25BC: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(31)
            CASE &H2302: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(127)
            CASE &H00C7: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(128)
            CASE &H00FC: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(129)
            CASE &H00E9: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(130)
            CASE &H00E2: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(131)
            CASE &H00E4: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(132)
            CASE &H00E0: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(133)
            CASE &H00E5: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(134)
            CASE &H00E7: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(135)
            CASE &H00EA: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(136)
            CASE &H00EB: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(137)
            CASE &H00E8: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(138)
            CASE &H00EF: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(139)
            CASE &H00EE: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(140)
            CASE &H00EC: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(141)
            CASE &H00C4: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(142)
            CASE &H00C5: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(143)
            CASE &H00C9: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(144)
            CASE &H00E6: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(145)
            CASE &H00C6: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(146)
            CASE &H00F4: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(147)
            CASE &H00F6: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(148)
            CASE &H00F2: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(149)
            CASE &H00FB: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(150)
            CASE &H00F9: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(151)
            CASE &H00FF: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(152)
            CASE &H00D6: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(153)
            CASE &H00DC: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(154)
            CASE &H00A2: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(155)
            CASE &H00A3: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(156)
            CASE &H00A5: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(157)
            CASE &H20A7: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(158)
            CASE &H0192: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(159)
            CASE &H00E1: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(160)
            CASE &H00ED: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(161)
            CASE &H00F3: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(162)
            CASE &H00FA: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(163)
            CASE &H00F1: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(164)
            CASE &H00D1: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(165)
            CASE &H00AA: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(166)
            CASE &H00BA: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(167)
            CASE &H00BF: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(168)
            CASE &H2310: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(169)
            CASE &H00AC: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(170)
            CASE &H00BD: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(171)
            CASE &H00BC: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(172)
            CASE &H00A1: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(173)
            CASE &H00AB: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(174)
            CASE &H00BB: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(175)
            CASE &H2591: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(176)
            CASE &H2592: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(177)
            CASE &H2593: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(178)
            CASE &H2502: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(179)
            CASE &H2524: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(180)
            CASE &H2561: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(181)
            CASE &H2562: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(182)
            CASE &H2556: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(183)
            CASE &H2555: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(184)
            CASE &H2563: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(185)
            CASE &H2551: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(186)
            CASE &H2557: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(187)
            CASE &H255D: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(188)
            CASE &H255C: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(189)
            CASE &H255B: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(190)
            CASE &H2510: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(191)
            CASE &H2514: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(192)
            CASE &H2534: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(193)
            CASE &H252C: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(194)
            CASE &H251C: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(195)
            CASE &H2500: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(196)
            CASE &H253C: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(197)
            CASE &H255E: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(198)
            CASE &H255F: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(199)
            CASE &H255A: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(200)
            CASE &H2554: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(201)
            CASE &H2569: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(202)
            CASE &H2566: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(203)
            CASE &H2560: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(204)
            CASE &H2550: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(205)
            CASE &H256C: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(206)
            CASE &H2567: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(207)
            CASE &H2568: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(208)
            CASE &H2564: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(219)
            CASE &H2565: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(210)
            CASE &H2559: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(211)
            CASE &H2558: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(212)
            CASE &H2552: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(213)
            CASE &H2553: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(214)
            CASE &H256B: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(215)
            CASE &H256A: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(216)
            CASE &H2518: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(217)
            CASE &H250C: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(218)
            CASE &H2588: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(219)
            CASE &H2584: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(220)
            CASE &H258C: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(221)
            CASE &H2590: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(222)
            CASE &H2580: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(223)
            CASE &H03B1: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(224)
            CASE &H00DF: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(225)
            CASE &H0393: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(226)
            CASE &H03C0: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(227)
            CASE &H03A3: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(228)
            CASE &H03C3: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(229)
            CASE &H00B5: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(230)
            CASE &H03C4: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(231)
            CASE &H03A6: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(232)
            CASE &H0398: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(233)
            CASE &H03A9: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(234)
            CASE &H03B4: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(235)
            CASE &H221E: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(236)
            CASE &H03C6: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(237)
            CASE &H03B5: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(238)
            CASE &H2229: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(239)
            CASE &H2261: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(240)
            CASE &H00B1: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(241)
            CASE &H2265: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(242)
            CASE &H2264: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(243)
            CASE &H2320: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(244)
            CASE &H2321: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(245)
            CASE &H00F7: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(246)
            CASE &H2248: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(247)
            CASE &H00B0: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(248)
            CASE &H2219: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(249)
            CASE &H00B7: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(250)
            CASE &H221A: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(251)
            CASE &H207F: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(252)
            CASE &H00B2: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(253)
            CASE &H25A0: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(254)
            CASE &H00A0: LET UTF8ANSI$ = UTF8ANSI$ + CHR$(255)
            CASE ELSE
                'not a mappable Unicode point
                LET UTF8ANSI$ = UTF8ANSI$ + CHR$(0)
        END SELECT
    NEXT
END FUNCTION
